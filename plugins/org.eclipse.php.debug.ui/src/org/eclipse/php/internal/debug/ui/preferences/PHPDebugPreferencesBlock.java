/*******************************************************************************
 * Copyright (c) 2009 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Zend Technologies
 *******************************************************************************/
package org.eclipse.php.internal.debug.ui.preferences;

import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ProjectScope;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Preferences;
import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.core.runtime.preferences.IScopeContext;
import org.eclipse.jface.dialogs.IPageChangedListener;
import org.eclipse.jface.dialogs.PageChangedEvent;
import org.eclipse.jface.preference.PreferenceDialog;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.php.internal.debug.core.PHPDebugPlugin;
import org.eclipse.php.internal.debug.core.preferences.*;
import org.eclipse.php.internal.debug.core.zend.communication.DebuggerCommunicationDaemon;
import org.eclipse.php.internal.debug.ui.Logger;
import org.eclipse.php.internal.debug.ui.PHPDebugUIMessages;
import org.eclipse.php.internal.server.core.Server;
import org.eclipse.php.internal.server.core.manager.ServersManager;
import org.eclipse.php.internal.ui.preferences.AbstractPHPPreferencePageBlock;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.*;
import org.eclipse.ui.dialogs.PreferencesUtil;
import org.eclipse.ui.ide.IDEEncoding;
import org.osgi.service.prefs.BackingStoreException;

/**
 * PHP debug options preferences add-on. This add-on specifies the default
 * debugger, executable and server for the workspace or the project specific.
 * 
 * @author Shalom Gibly
 */
public class PHPDebugPreferencesBlock extends AbstractPHPPreferencePageBlock {

	private static final String UNRESOLVED_PHP_VERSION = PHPDebugUIMessages.PHPDebugPreferencesBlock_3; 
	private static final String DEBUGGERS_PAGE_ID = "org.eclipse.php.debug.ui.installedDebuggersPage"; //$NON-NLS-1$
	private static final String SERVERS_PAGE_ID = "org.eclipse.php.server.internal.ui.PHPServersPreferencePage"; //$NON-NLS-1$
	private static final String PHP_EXE_PAGE_ID = "org.eclipse.php.debug.ui.preferencesphps.PHPsPreferencePage"; //$NON-NLS-1$

	private Button fStopAtFirstLine;
	private Combo fDefaultDebugger;
	private Combo fDefaultServer;
	private Combo fDefaultPHPExe;
	private Collection<String> debuggersIds;
	private Combo fDebugEncodingSettings;
	private Combo fOutputEncodingSettings;
	private PreferencePage propertyPage;
	private URL autoGeneratedURL;
	private Text fAutoGeneratedURLText;
	private Text fDefaultBasePath;
	private final boolean isPropertyPage;
	private String defaultBasePath;
	private IPageValidator pageValidator = null;
	private Button fEnableCLIDebug;

	public boolean isPropertyPage() {
		return isPropertyPage;
	}

	public PHPDebugPreferencesBlock(boolean isPropertyPage) {
		this.isPropertyPage = !isPropertyPage;
	}

	public void setCompositeAddon(Composite parent) {
		Composite composite = addPageContents(parent);
		addProjectPreferenceSubsection(composite);
	}

	public void initializeValues(PreferencePage propertyPage) {
		this.propertyPage = propertyPage;
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		IScopeContext[] preferenceScopes = createPreferenceScopes(propertyPage);

		boolean stopAtFirstLine = prefs
				.getBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE);
		boolean enableCLIDebug = prefs
				.getBoolean(PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG);
		String debuggerName = PHPDebuggersRegistry.getDebuggerName(prefs
				.getString(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID));
		String serverName = ServersManager.getDefaultServer(null).getName();
		PHPexes exes = PHPexes.getInstance();
		String phpExeName = PHPDebugUIMessages.PhpDebugPreferencePage_noExeDefined;
		IProject project = getProject(propertyPage);
		PHPexeItem item = PHPDebugPlugin.getPHPexeItem(project);
		if (item != null && item.getName() != null) {
			phpExeName = item.getName();
		}
		String transferEncoding = prefs
				.getString(PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
		String outputEncoding = prefs
				.getString(PHPDebugCorePreferenceNames.OUTPUT_ENCODING);
		loadDebuggers(fDefaultDebugger);
		loadServers(fDefaultServer);
		boolean exeLoaded = false;
		// Update the values in case we have a project-specific settings.
		if (preferenceScopes[0] instanceof ProjectScope) {
			IEclipsePreferences node = preferenceScopes[0]
					.getNode(getPreferenceNodeQualifier());
			if (node != null && project != null) {
				if (getBasePathValue(project) == null
						|| getBasePathValue(project) == "") { //$NON-NLS-1$
					setBasePathValue(project, project.getName());
				}
				String projectServerName = ServersManager.getDefaultServer(
						project).getName();
				if (!projectServerName.equals("")) { //$NON-NLS-1$
					String debuggerId = item != null ? item.getDebuggerID()
							: PHPDebugPlugin.getCurrentDebuggerId();
					debuggerName = PHPDebuggersRegistry
							.getDebuggerName(debuggerId);
					serverName = projectServerName;
					stopAtFirstLine = node.getBoolean(
							PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE,
							stopAtFirstLine);
					enableCLIDebug = node.getBoolean(
							PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG,
							enableCLIDebug);
					transferEncoding = node.get(
							PHPDebugCorePreferenceNames.TRANSFER_ENCODING,
							transferEncoding); 
					outputEncoding = node.get(
							PHPDebugCorePreferenceNames.OUTPUT_ENCODING,
							outputEncoding); 
					// Check that if the project had a non-defined exe, and now
					// there is one that is valid. we set
					// it with the new valid default exe.
					if (PHPDebugUIMessages.PhpDebugPreferencePage_noExeDefined
							.equals(phpExeName)) {
						if (exes.hasItems(debuggerId)) {
							phpExeName = exes.getDefaultItem(debuggerId)
									.getName();
							node.put(PHPDebugCorePreferenceNames.DEFAULT_PHP,
									phpExeName);
							try {
								node.flush();
							} catch (BackingStoreException e) {
							}
						}
					}
					loadPHPExes(fDefaultPHPExe, exes.getItems(node.get(
							PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID,
							debuggerId)));
					exeLoaded = true;
				}
			}
		}
		if (!exeLoaded) {
			loadPHPExes(fDefaultPHPExe,
					exes.getItems(PHPDebugPlugin.getCurrentDebuggerId()));
		}
		fStopAtFirstLine.setSelection(stopAtFirstLine);
		fEnableCLIDebug.setSelection(enableCLIDebug);
		fDefaultDebugger.select(fDefaultDebugger.indexOf(debuggerName));
		fDefaultServer.select(fDefaultServer.indexOf(serverName));
		fDefaultPHPExe.select(fDefaultPHPExe.indexOf(phpExeName));
		fDebugEncodingSettings.setText(transferEncoding);
		fOutputEncodingSettings.setText(outputEncoding);

		if (isPropertyPage()) {
			defaultBasePath = getBasePathValue(project);
			initAutoGenerateListener();
			fDefaultBasePath.setText(defaultBasePath);
		}
	}

	private String getBasePathValue(IProject project) {
		String basepath = PHPProjectPreferences.getDefaultBasePath(project);
		return basepath;
	}

	private void setBasePathValue(IProject project, String value) {
		PHPProjectPreferences.setDefaultBasePath(project, value);
	}

	public void initAutoGenerateListener() {
		fDefaultBasePath.addModifyListener(new ModifyListener() {
			public void modifyText(final ModifyEvent e) {
				try {
					try {
						if (pageValidator != null)
							pageValidator.validate(new BasePathValidator(
									fDefaultBasePath));
						refreshAutoGeneratedBaseURLDisplay();
					} catch (ControlValidationException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				} catch (MalformedURLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}

		});
	}

	private String getSelectedServerName() {
		return fDefaultServer.getText();
	}

	private void dispalyAutoGeneratedURL(URL url) {
		fAutoGeneratedURLText.setText(url.toString());

	}

	public boolean performOK(boolean isProjectSpecific) {
		savePreferences(isProjectSpecific);
		return true;
	}

	public void performApply(boolean isProjectSpecific) {
		performOK(isProjectSpecific);
	}

	public boolean performCancel() {
		return true;
	}

	public void performDefaults() {
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		fStopAtFirstLine
				.setSelection(prefs
						.getDefaultBoolean(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE));
		fEnableCLIDebug
				.setSelection(prefs
						.getDefaultBoolean(PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG));
		loadDebuggers(fDefaultDebugger);
		loadServers(fDefaultServer);
		loadPHPExes(
				fDefaultPHPExe,
				PHPexes.getInstance().getItems(
						DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID));
		fDebugEncodingSettings
				.setText(prefs
						.getDefaultString(PHPDebugCorePreferenceNames.TRANSFER_ENCODING));
		fOutputEncodingSettings.setText(prefs
				.getDefaultString(PHPDebugCorePreferenceNames.OUTPUT_ENCODING));
	}

	protected String getPreferenceNodeQualifier() {
		return PHPProjectPreferences.getPreferenceNodeQualifier();
	}

	private void addProjectPreferenceSubsection(Composite composite) {

		Group defultPrefsGroup = new Group(composite, SWT.NONE);
		defultPrefsGroup.setText(PHPDebugUIMessages.PHPDebugPreferencesBlock_0);
		defultPrefsGroup.setFont(composite.getFont());
		GridLayout layout = new GridLayout();
		layout.numColumns = 3;
		layout.verticalSpacing = 10;
		defultPrefsGroup.setLayout(layout);
		defultPrefsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

		addLabelControl(defultPrefsGroup,
				PHPDebugUIMessages.PhpDebugPreferencePage_phpDebugger,
				PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID);
		fDefaultDebugger = addCombo(defultPrefsGroup, 2);
		addLink(defultPrefsGroup,
				PHPDebugUIMessages.PHPDebugPreferencesBlock_1,
				DEBUGGERS_PAGE_ID);

		addLabelControl(defultPrefsGroup,
				PHPDebugUIMessages.PhpDebugPreferencePage_9,
				ServersManager.DEFAULT_SERVER_PREFERENCES_KEY);
		fDefaultServer = addCombo(defultPrefsGroup, 2);
		addLink(defultPrefsGroup,
				PHPDebugUIMessages.PhpDebugPreferencePage_serversLink,
				SERVERS_PAGE_ID);

		addLabelControl(defultPrefsGroup,
				PHPDebugUIMessages.PhpDebugPreferencePage_12,
				PHPDebugCorePreferenceNames.DEFAULT_PHP);
		fDefaultPHPExe = addCombo(defultPrefsGroup, 2);
		addLink(defultPrefsGroup,
				PHPDebugUIMessages.PhpDebugPreferencePage_installedPHPsLink,
				PHP_EXE_PAGE_ID);

		// fEnableCLIDebug = addCheckBox(defultPrefsGroup,
		// PHPDebugUIMessages.PhpDebugPreferencePage_13,
		// PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG, 1);
		new Label(defultPrefsGroup, SWT.NONE); // dummy label
		fEnableCLIDebug = new Button(defultPrefsGroup, SWT.CHECK);
		fEnableCLIDebug.setText(PHPDebugUIMessages.PhpDebugPreferencePage_13);

		GridData gd = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
		gd.horizontalIndent = 1;
		gd.horizontalSpan = 2;

		fEnableCLIDebug.setLayoutData(gd);
		fEnableCLIDebug.setData(PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG);

		new Label(composite, SWT.NONE); // dummy label

		Group encodingGroup = new Group(composite, SWT.NONE);
		encodingGroup.setText(PHPDebugUIMessages.PHPDebugPreferencesBlock_2);
		encodingGroup.setLayout(new GridLayout(2, false));
		encodingGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

		addLabelControl(
				encodingGroup,
				PHPDebugUIMessages.PHPDebugPreferencesAddon_debugTransferEncoding,
				PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
		fDebugEncodingSettings = addEncodingSettings(encodingGroup);

		addLabelControl(
				encodingGroup,
				PHPDebugUIMessages.PHPDebugPreferencesAddon_debugOutputEncoding,
				PHPDebugCorePreferenceNames.OUTPUT_ENCODING);
		fOutputEncodingSettings = addEncodingSettings(encodingGroup);

		ModifyListener modifyListener = new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				boolean isValid = isValidEncoding(((Combo) e.getSource())
						.getText());
				if (isValid) {
					propertyPage.setErrorMessage(null);
				} else {
					propertyPage
							.setErrorMessage(PHPDebugUIMessages.PHPDebugPreferencesAddon_unsupportedEncoding);
				}
				propertyPage.setValid(isValid);
			}
		};
		fDebugEncodingSettings.addModifyListener(modifyListener);
		fOutputEncodingSettings.addModifyListener(modifyListener);

		new Label(composite, SWT.NONE); // dummy label
		if (isPropertyPage())
			createBaseURLGroup(composite);

		new Label(composite, SWT.NONE); // dummy label

		fStopAtFirstLine = addCheckBox(composite,
				PHPDebugUIMessages.PhpDebugPreferencePage_1,
				PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE, 0);

		// Add a default debugger listener that will update the possible
		// executables
		// and, maybe, servers that can work with this debugger.
		fDefaultDebugger.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				String selectedDebugger = getSelectedDebuggerId();
				PHPexeItem[] items = PHPexes.getInstance().getItems(
						selectedDebugger);
				loadPHPExes(fDefaultPHPExe, items);
			}
		});

		fDefaultServer.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				try {
					PHPDebugPreferencesBlock.this
							.refreshAutoGeneratedBaseURLDisplay();
				} catch (MalformedURLException e1) {
					// safe Malformed URL - exisiting server
				}
			}
		});
	}

	private void createBaseURLGroup(Composite composite) {
		Group baseURLGroup = createGroup(composite, PHPDebugUIMessages.PHPDebugPreferencesBlock_9);

		addBasePathLabelAndText(baseURLGroup);
		addBaseURLLabelAndText(baseURLGroup);
	}

	private void addBaseURLLabelAndText(Group baseURLGroup) {
		addLabelControl(baseURLGroup, PHPDebugUIMessages.PHPDebugPreferencesBlock_10,
				PHPDebugCorePreferenceNames.TRANSFER_ENCODING);

		addBaseURLText(baseURLGroup);

	}

	private URL generateBaseURL(Server server, IPath basePath)
			throws MalformedURLException {
		URL serverUrl = server.getRootURL();
		IPath file = new Path(serverUrl.getFile());
		if (!file.isEmpty()) {
			file = file.append(basePath);
		} else {
			file = basePath;
		}
		URL generatedBaseURL = new URL(serverUrl.getProtocol(),
				serverUrl.getHost(), serverUrl.getPort(), file.toString());
		return generatedBaseURL;
	}

	private Text addBaseURLText(Composite parent) {
		fAutoGeneratedURLText = addText(parent, 2, SWT.RESIZE | SWT.READ_ONLY);
		return fAutoGeneratedURLText;
	}

	private void addBasePathLabelAndText(Group baseURLGroup) {
		addLabelControl(baseURLGroup, PHPDebugUIMessages.PHPDebugPreferencesBlock_11,
				PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
		addBasePathText(baseURLGroup);
	}

	private Text addBasePathText(Composite parent) {
		fDefaultBasePath = addText(parent, 2, SWT.BORDER | SWT.RESIZE);
		return fDefaultBasePath;
	}

	private IPath getDefaultBasePath() {
		if (fDefaultBasePath != null)
			return new Path(fDefaultBasePath.getText());

		return null;
	}

	private Server getDefaultServer() {
		return ServersManager.getServer(fDefaultServer.getText());
	}

	private void displayDefaultBaseURL(URL generatedBaseURL) {
		fAutoGeneratedURLText.setText(generatedBaseURL.toString());
	}

	private Group createGroup(Composite composite, String groupName) {
		Group newGroup = new Group(composite, SWT.NONE);
		newGroup.setText(groupName);
		newGroup.setLayout(new GridLayout(2, false));
		newGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
		return newGroup;
	}

	private void loadPHPExes(Combo combo, PHPexeItem[] items) {
		combo.removeAll();
		if (items == null || items.length == 0) {
			combo.add(PHPDebugUIMessages.PhpDebugPreferencePage_noExeDefined);
			combo.select(0);
			return;
		}
		for (PHPexeItem element : items) {
			String name = element.getName();
			if (null == name)
				name = UNRESOLVED_PHP_VERSION;
			combo.add(name);
		}
		// select the default item for the current selected debugger
		if (fDefaultDebugger.getItemCount() > 0) {
			PHPexeItem defaultItem = PHPexes.getInstance().getDefaultItem(
					getSelectedDebuggerId());
			String defaultItemName;
			if (defaultItem != null) {
				defaultItemName = defaultItem.getName();
				if (null == defaultItemName)
					defaultItemName = UNRESOLVED_PHP_VERSION;
			} else {
				defaultItemName = PHPDebugUIMessages.PHPDebuggersTable_notDefined;
				if (combo.indexOf(defaultItemName) == -1) {
					combo.add(defaultItemName, 0);
					combo.select(0);
				}
			}
			int index = combo.indexOf(defaultItemName);
			if (index > -1) {
				combo.select(index);
			} else if (combo.getItemCount() > 0) {
				// select first item in list
				combo.select(0);
			}
		}

	}

	private void loadServers(Combo combo) {
		combo.removeAll();
		Server[] servers = ServersManager.getServers();
		if (servers != null) {
			for (Server element : servers) {
				combo.add(element.getName());
			}
			// select first item in list
			if (combo.getItemCount() > 0) {
				combo.select(0);
			}
		}
	}

	private void loadDebuggers(Combo combo) {
		debuggersIds = PHPDebuggersRegistry.getDebuggersIds();
		String defaultDebuggerID = DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID;
		combo.removeAll();
		Iterator<String> debuggers = debuggersIds.iterator();
		int defaultIndex = 0;
		int index = 0;
		while (debuggers.hasNext()) {
			String id = debuggers.next();
			if (defaultDebuggerID.equals(id)) {
				defaultIndex = index;
			} else {
				index++;
			}
			String debuggerName = PHPDebuggersRegistry.getDebuggerName(id);
			combo.add(debuggerName);
		}
		// select the default item in list
		if (combo.getItemCount() > 0) {
			combo.select(defaultIndex);
		}
	}

	private void addLink(Composite parent, String label,
			final String propertyPageID) {
		Link link = new Link(parent, SWT.NONE);
		link.setFont(parent.getFont());
		link.setLayoutData(new GridData(SWT.END, SWT.BEGINNING, true, false));
		link.setText(label);
		link.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(
						PHPDebugPreferencesBlock.this.propertyPage.getShell(),
						propertyPageID, null, null);
				dialog.setBlockOnOpen(true);
				dialog.addPageChangedListener(new IPageChangedListener() {
					public void pageChanged(PageChangedEvent event) {
						Display.getDefault().asyncExec(new Runnable() {
							public void run() {
								String selectedDebugger = fDefaultDebugger
										.getText();
								String selectedServer = fDefaultServer
										.getText();
								String selectedPHP = fDefaultPHPExe.getText();
								loadDebuggers(fDefaultDebugger);
								loadServers(fDefaultServer);
								loadPHPExes(
										fDefaultPHPExe,
										PHPexes.getInstance().getItems(
												getSelectedDebuggerId()));
								selectComboItem(fDefaultDebugger,
										fDefaultDebugger
												.indexOf(selectedDebugger));
								selectComboItem(fDefaultServer,
										fDefaultServer.indexOf(selectedServer));
								selectComboItem(fDefaultPHPExe,
										fDefaultPHPExe.indexOf(selectedPHP));
							}
						});
					}
				});
				dialog.open();
			}
		});
	}

	private void selectComboItem(Combo combo, int itemIndex) {
		if (itemIndex < 0) {
			if (combo.getItemCount() > 0) {
				combo.select(0);
			}
		} else {
			combo.select(itemIndex);
		}
	}

	private Combo addEncodingSettings(Composite parent) {
		Combo encodingCombo = new Combo(parent, SWT.NONE);
		GridData data = new GridData();
		encodingCombo.setLayoutData(data);

		List encodings = IDEEncoding.getIDEEncodings();
		String[] encodingStrings = new String[encodings.size()];
		encodings.toArray(encodingStrings);
		encodingCombo.setItems(encodingStrings);

		return encodingCombo;
	}

	private Combo addCombo(Composite parent, int horizontalIndent) {
		Combo combo = new Combo(parent, SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY);
		GridData gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalIndent = horizontalIndent;
		combo.setLayoutData(gd);
		return combo;
	}

	private Text addText(Composite parent, int horizontalIndent, int style) {
		Text text = new Text(parent, style);
		GridData gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalIndent = horizontalIndent;
		text.setLayoutData(gd);
		return text;
	}

	private void savePreferences(boolean isProjectSpecific) {
		String phpExe = fDefaultPHPExe.getText();
		// Check if it's still valid, since this method can be called after
		// removing a php executable from another preferences page (PHP
		// Executables)
		PHPexes exes = PHPexes.getInstance();
		if (exes.getItem(getSelectedDebuggerId(), phpExe) == null) {
			PHPexeItem item = exes.getDefaultItem(getSelectedDebuggerId());
			if (item != null) {
				phpExe = item.getName();
			} else {
				phpExe = ""; //$NON-NLS-1$
			}
		}
		// TODO - Might do the same for the default server
		Preferences prefs = PHPProjectPreferences.getModelPreferences();
		IScopeContext[] preferenceScopes = createPreferenceScopes(propertyPage);
		IEclipsePreferences debugUINode = preferenceScopes[0]
				.getNode(getPreferenceNodeQualifier());
		IProject project = getProject(propertyPage);
		if (isProjectSpecific && debugUINode != null
				&& preferenceScopes[0] instanceof ProjectScope
				&& project != null) {
			debugUINode.putBoolean(
					PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE,
					fStopAtFirstLine.getSelection());
			debugUINode.putBoolean(
					PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG,
					fEnableCLIDebug.getSelection());
			debugUINode.put(PHPDebugCorePreferenceNames.DEFAULT_PHP, phpExe);
			debugUINode.put(PHPDebugCorePreferenceNames.TRANSFER_ENCODING,
					fDebugEncodingSettings.getText());
			debugUINode.put(PHPDebugCorePreferenceNames.OUTPUT_ENCODING,
					fOutputEncodingSettings.getText());
			debugUINode.put(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID,
					getSelectedDebuggerId());

			ServersManager.setDefaultServer(project, fDefaultServer.getText());
			Server server = ServersManager.getServer(fDefaultServer.getText());
			setBasePathValue(project, fDefaultBasePath.getText());
		} else {
			if (project == null) {
				// Workspace settings
				prefs.setValue(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE,
						fStopAtFirstLine.getSelection());
				prefs.setValue(PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG,
						fEnableCLIDebug.getSelection());
				prefs.setValue(PHPDebugCorePreferenceNames.TRANSFER_ENCODING,
						fDebugEncodingSettings.getText());
				prefs.setValue(PHPDebugCorePreferenceNames.OUTPUT_ENCODING,
						fOutputEncodingSettings.getText());
				prefs.setValue(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID,
						getSelectedDebuggerId());
				exes.setDefaultItem(getSelectedDebuggerId(), phpExe);

				ServersManager.setDefaultServer(project,
						fDefaultServer.getText());
			} else {
				if (debugUINode != null) {
					// Removed a project specific
					debugUINode
							.remove(PHPDebugCorePreferenceNames.STOP_AT_FIRST_LINE);
					debugUINode
							.remove(PHPDebugCorePreferenceNames.ENABLE_CLI_DEBUG);
					// debugUINode.remove(PHPDebugCorePreferenceNames.ZEND_DEBUG_PORT);
					// // No need
					debugUINode.remove(PHPDebugCorePreferenceNames.DEFAULT_PHP);
					ServersManager.setDefaultServer(project, (Server) null);
					debugUINode
							.remove(PHPDebugCorePreferenceNames.TRANSFER_ENCODING);
					debugUINode
							.remove(PHPDebugCorePreferenceNames.OUTPUT_ENCODING);
					debugUINode
							.remove(PHPDebugCorePreferenceNames.PHP_DEBUGGER_ID);

					prefs.setValue(
							PHPDebugCorePreferenceNames.DEFAULT_BASE_PATH,
							defaultBasePath);
				}
			}
		}
		try {
			debugUINode.flush();
			exes.save();
			PHPDebugPlugin.getDefault().savePluginPreferences();
		} catch (BackingStoreException e) {
			Logger.logException(e);
		}
	}

	private String getSelectedDebuggerId() {
		int selectedIndex = fDefaultDebugger.getSelectionIndex();
		String debuggerId = DebuggerCommunicationDaemon.ZEND_DEBUGGER_ID; // default
		if (selectedIndex > -1 && debuggersIds.size() > selectedIndex) {
			debuggerId = debuggersIds.toArray()[selectedIndex].toString();
		}
		return debuggerId;
	}

	/**
	 * Returns whether or not the given encoding is valid.
	 * 
	 * @param enc
	 *            the encoding to validate
	 * @return <code>true</code> if the encoding is valid, <code>false</code>
	 *         otherwise
	 * @see org.eclipse.ui.ide.dialogs.AbstractEncodingFieldEditor.isValidEncoding
	 *      (String)
	 */
	private boolean isValidEncoding(String enc) {
		try {
			return Charset.isSupported(enc);
		} catch (IllegalCharsetNameException e) {
			// This is a valid exception
			return false;
		}
	}

	private void resolveAndSetBaseURL() throws MalformedURLException {
		Server server = getDefaultServer();
		IPath basePath = getDefaultBasePath();
		if (basePath != null) {
			URL baseURL = generateBaseURL(server, basePath);
			displayDefaultBaseURL(baseURL);
		}
	}

	private void refreshAutoGeneratedBaseURLDisplay()
			throws MalformedURLException {
		if (!isPropertyPage) {
			return;
		}
		IPath path = new Path(fDefaultBasePath.getText());
		defaultBasePath = fDefaultBasePath.getText();

		Server server = ServersManager.getServer(getSelectedServerName());
		autoGeneratedURL = generateBaseURL(server, path);
		dispalyAutoGeneratedURL(autoGeneratedURL);
	}

	public void setValidator(IPageValidator pageValidator) {
		this.pageValidator = pageValidator;
	}

}
