/*******************************************************************************
 * Copyright (c) 2009 IBM Corporation and others.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Zend Technologies
 *******************************************************************************/
package org.eclipse.php.internal.ui.editor.contentassist;

import java.util.function.Supplier;

import org.eclipse.core.runtime.Platform;
import org.eclipse.dltk.core.IType;
import org.eclipse.dltk.internal.ui.text.hover.DocumentationHover;
import org.eclipse.dltk.ui.PreferenceConstants;
import org.eclipse.dltk.ui.text.ScriptTextTools;
import org.eclipse.dltk.ui.text.completion.ScriptCompletionProposal;
import org.eclipse.jface.internal.text.html.BrowserInformationControl;
import org.eclipse.jface.text.DefaultInformationControl;
import org.eclipse.jface.text.IInformationControl;
import org.eclipse.jface.text.IInformationControlCreator;
import org.eclipse.jface.text.contentassist.IContextInformation;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.php.core.compiler.ast.nodes.NamespaceReference;
import org.eclipse.php.internal.core.PHPCoreConstants;
import org.eclipse.php.internal.core.PHPCorePlugin;
import org.eclipse.php.internal.core.codeassist.ProposalExtraInfo;
import org.eclipse.php.internal.core.typeinference.PHPModelUtils;
import org.eclipse.php.internal.ui.PHPUiPlugin;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Shell;

public class PHPCompletionProposal extends ScriptCompletionProposal
		implements IPHPCompletionProposalExtension, IProcessableProposal {

	/**
	 * The control creator.
	 */
	private IInformationControlCreator fCreator;

	private ProposalProcessorManager mgr;
	private String lastPrefix;
	private String lastPrefixStyled;
	private StyledString initialDisplayString;

	public PHPCompletionProposal(String replacementString, int replacementOffset, int replacementLength,
			Supplier<Image> image, StyledString displayString, int relevance) {
		super(replacementString, replacementOffset, replacementLength, image, displayString, relevance, false);
	}

	public PHPCompletionProposal(String replacementString, int replacementOffset, int replacementLength,
			Supplier<Image> image, StyledString displayString, int relevance, boolean indoc) {
		super(replacementString, replacementOffset, replacementLength, image, displayString, relevance, indoc);
	}

	@Override
	protected int getPatternMatchRule(String pattern, String string) {
		// XXX: avoid unnecessary StringIndexOutOfBoundsExceptions in
		// super.getPatternMatchRule(pattern, string) because
		// "pattern" and "string" may have nothing in common
		// when generated by class PHPCompletionProposal
		if (string.length() < pattern.length()) {
			return -1;
		}
		return super.getPatternMatchRule(pattern, string);
	}

	@Override
	protected boolean isValidPrefix(String prefix) {
		String word = getDisplayString();
		if (word.startsWith("$") && !prefix.startsWith("$")) { //$NON-NLS-1$ //$NON-NLS-2$
			word = word.substring(1);
		}
		boolean result = isPrefix(prefix, word);
		if (!result && prefix.length() > 0 && prefix.charAt(0) == NamespaceReference.NAMESPACE_SEPARATOR) {
			result = isPrefix(prefix.substring(1), word);
		}

		if (!result && ProposalExtraInfo.isMemberInNamespace(getExtraInfo()) && (getModelElement() instanceof IType)) {
			IType type = (IType) getModelElement();
			if (ProposalExtraInfo.isAbsoluteName(getExtraInfo())) {
				result = isPrefix(prefix.substring(1), PHPModelUtils.getFullName(type));
			} else {
				result = isPrefix(prefix, PHPModelUtils.getFullName(type));
			}
		}
		if (!result && ProposalExtraInfo.isFullName(getExtraInfo()) && getModelElement() != null) {
			if (ProposalExtraInfo.isAbsoluteName(getExtraInfo())) {
				result = isPrefix(prefix.substring(1), PHPModelUtils.getFullName(getModelElement()));
			} else {
				result = isPrefix(prefix, PHPModelUtils.getFullName(getModelElement()));
			}
		}
		// int index = word.indexOf(" - ");
		// if (!result && index >= 0) {
		// StringBuilder sb = new StringBuilder();
		// sb.append(word.substring(index + " - ".length()));
		// sb.append('\\');
		// sb.append(word.substring(0, index));
		// result = isPrefix(prefix, sb.toString());
		// }
		return result;
	}

	@Override
	protected boolean isSmartTrigger(char trigger) {
		return trigger == '$';
	}

	@Override
	public IContextInformation getContextInformation() {
		String displayString = getDisplayString();
		if (displayString.indexOf('(') == -1) {
			return null;
		}
		return super.getContextInformation();
	}

	@Override
	protected boolean isCamelCaseMatching() {
		return true;
	}

	@Override
	protected boolean isSubstringMatching() {
		return true;
	}

	@Override
	protected boolean insertCompletion() {
		return Platform.getPreferencesService().getBoolean(PHPCorePlugin.ID,
				PHPCoreConstants.CODEASSIST_INSERT_COMPLETION, true, null);
	}

	@Override
	protected ScriptTextTools getTextTools() {
		return PHPUiPlugin.getDefault().getTextTools();
	}

	@Override
	public IInformationControlCreator getInformationControlCreator() {
		if (fCreator == null) {
			fCreator = new DocumentationHover.HoverControlCreator(new IInformationControlCreator() {
				@Override
				public IInformationControl createInformationControl(Shell parent) {
					if (BrowserInformationControl.isAvailable(parent)) {
						return new BrowserInformationControl(parent, PreferenceConstants.APPEARANCE_DOCUMENTATION_FONT,
								true);
					} else {
						return new DefaultInformationControl(parent, true);
					}
				}
			}, true);
		}
		return fCreator;
	}

	@Override
	public Object getExtraInfo() {
		return ProposalExtraInfo.DEFAULT;
	}

	@Override
	public StyledString getStyledDisplayString() {
		if (initialDisplayString == null) {
			initialDisplayString = super.getStyledDisplayString();
			StyledString copy = copyStyledString(initialDisplayString);
			StyledString decorated = mgr.decorateStyledDisplayString(copy);
			setStyledDisplayString(decorated);
		}
		if (lastPrefixStyled != lastPrefix) {
			lastPrefixStyled = lastPrefix;
			StyledString copy = copyStyledString(initialDisplayString);
			StyledString decorated = mgr.decorateStyledDisplayString(copy);
			setStyledDisplayString(decorated);
		}
		return super.getStyledDisplayString();
	}

	@Override
	public boolean isPrefix(final String prefix, final String string) {
		lastPrefix = prefix;
		boolean res = mgr.prefixChanged(prefix) || super.isPrefix(prefix, string);
		return res;
	}

	@Override
	public ProposalProcessorManager getProposalProcessorManager() {
		return this.mgr;
	}

	@Override
	public void setProposalProcessorManager(ProposalProcessorManager mgr) {
		this.mgr = mgr;
	}
}