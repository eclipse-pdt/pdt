
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 14 00:14:56 CET 2013
//----------------------------------------------------

package org.eclipse.php.internal.core.ast.scanner.php55;

import java.util.*;
import org.eclipse.php.internal.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;

/** CUP v0.10k generated parser.
  * @version Thu Nov 14 00:14:56 CET 2013
  */
public class PhpAstParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PhpAstParser() {super();}

  /** Constructor which sets the default scanner. */
  public PhpAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\005\000\002\004\003\000\002\007\004" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\005\000\002" +
    "\010\007\000\002\010\006\000\002\010\005\000\002\010" +
    "\004\000\002\006\005\000\002\006\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\005\006\000" +
    "\002\012\004\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\006\000\002\011" +
    "\003\000\002\011\004\000\002\014\005\000\002\014\011" +
    "\000\002\014\014\000\002\014\007\000\002\014\011\000" +
    "\002\014\013\000\002\014\007\000\002\014\004\000\002" +
    "\014\005\000\002\014\004\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\014\004\000\002\014\005\000\002" +
    "\014\007\000\002\014\011\000\002\014\012\000\002\014" +
    "\007\000\002\014\003\000\002\014\010\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\014\004\000" +
    "\002\133\003\000\002\133\002\000\002\134\003\000\002" +
    "\134\004\000\002\135\012\000\002\211\003\000\002\211" +
    "\002\000\002\212\006\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\017\003\000\002\017\005\000" +
    "\002\130\003\000\002\131\003\000\002\052\002\000\002" +
    "\052\003\000\002\136\013\000\002\137\011\000\002\137" +
    "\010\000\002\140\003\000\002\140\004\000\002\140\004" +
    "\000\002\140\003\000\002\141\002\000\002\141\004\000" +
    "\002\113\003\000\002\114\002\000\002\114\004\000\002" +
    "\142\002\000\002\142\004\000\002\143\003\000\002\143" +
    "\005\000\002\213\006\000\002\214\003\000\002\214\003" +
    "\000\002\020\004\000\002\215\003\000\002\215\003\000" +
    "\002\021\003\000\002\021\004\000\002\022\003\000\002" +
    "\022\005\000\002\023\003\000\002\023\005\000\002\024" +
    "\003\000\002\024\005\000\002\025\005\000\002\025\007" +
    "\000\002\026\005\000\002\026\006\000\002\026\005\000" +
    "\002\026\006\000\002\027\002\000\002\027\007\000\002" +
    "\027\006\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\005\000\002\032\002\000\002\032\010" +
    "\000\002\033\002\000\002\033\011\000\002\034\002\000" +
    "\002\034\004\000\002\035\002\000\002\035\005\000\002" +
    "\036\003\000\002\036\002\000\002\041\003\000\002\041" +
    "\005\000\002\042\004\000\002\042\005\000\002\042\006" +
    "\000\002\042\007\000\002\144\002\000\002\144\003\000" +
    "\002\144\003\000\002\144\003\000\002\043\003\000\002" +
    "\043\002\000\002\044\003\000\002\044\003\000\002\044" +
    "\004\000\002\044\005\000\002\044\005\000\002\044\006" +
    "\000\002\045\005\000\002\045\003\000\002\046\003\000" +
    "\002\046\004\000\002\046\006\000\002\047\005\000\002" +
    "\047\007\000\002\047\003\000\002\047\005\000\002\050" +
    "\004\000\002\050\002\000\002\051\005\000\002\051\004" +
    "\000\002\051\012\000\002\051\004\000\002\051\003\000" +
    "\002\165\005\000\002\166\003\000\002\166\005\000\002" +
    "\167\003\000\002\167\005\000\002\170\002\000\002\170" +
    "\003\000\002\171\003\000\002\171\004\000\002\172\004" +
    "\000\002\172\004\000\002\173\005\000\002\174\003\000" +
    "\002\174\005\000\002\175\003\000\002\175\003\000\002" +
    "\176\005\000\002\177\006\000\002\177\005\000\002\200" +
    "\002\000\002\200\003\000\002\123\003\000\002\123\005" +
    "\000\002\146\003\000\002\146\003\000\002\122\002\000" +
    "\002\122\003\000\002\124\003\000\002\124\004\000\002" +
    "\125\003\000\002\125\003\000\002\125\003\000\002\125" +
    "\003\000\002\125\003\000\002\125\003\000\002\120\005" +
    "\000\002\120\007\000\002\120\003\000\002\120\005\000" +
    "\002\121\007\000\002\121\006\000\002\053\005\000\002" +
    "\053\003\000\002\054\002\000\002\054\003\000\002\055" +
    "\005\000\002\055\003\000\002\201\004\000\002\201\003" +
    "\000\002\202\006\000\002\202\005\000\002\203\004\000" +
    "\002\203\003\000\002\203\003\000\002\204\002\000\002" +
    "\204\003\000\002\205\005\000\002\056\010\000\002\056" +
    "\005\000\002\056\006\000\002\056\010\000\002\056\004" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\004\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\004\000\002" +
    "\056\004\000\002\056\004\000\002\056\004\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\003\000\002\056\005\000\002\056\006\000\002\056" +
    "\007\000\002\056\006\000\002\056\003\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\004\000" +
    "\002\056\004\000\002\056\004\000\002\056\004\000\002" +
    "\056\004\000\002\056\004\000\002\056\003\000\002\056" +
    "\006\000\002\056\005\000\002\056\005\000\002\056\004" +
    "\000\002\056\013\000\002\056\014\000\002\220\007\000" +
    "\002\220\006\000\002\037\002\000\002\037\006\000\002" +
    "\040\005\000\002\040\006\000\002\040\003\000\002\040" +
    "\004\000\002\057\006\000\002\057\010\000\002\057\007" +
    "\000\002\057\010\000\002\057\010\000\002\057\010\000" +
    "\002\057\010\000\002\057\006\000\002\116\003\000\002" +
    "\116\003\000\002\116\005\000\002\116\004\000\002\117" +
    "\003\000\002\117\005\000\002\117\004\000\002\155\003" +
    "\000\002\155\003\000\002\157\006\000\002\157\003\000" +
    "\002\161\004\000\002\161\002\000\002\162\004\000\002" +
    "\060\002\000\002\060\004\000\002\060\005\000\002\106" +
    "\002\000\002\106\003\000\002\106\003\000\002\061\002" +
    "\000\002\061\005\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\004\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\005\000\002\062\004\000" +
    "\002\063\003\000\002\063\003\000\002\063\005\000\002" +
    "\063\004\000\002\063\004\000\002\063\004\000\002\063" +
    "\006\000\002\063\007\000\002\063\005\000\002\063\006" +
    "\000\002\063\003\000\002\163\005\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\005\000\002" +
    "\064\004\000\002\064\003\000\002\064\005\000\002\064" +
    "\005\000\002\065\002\000\002\065\004\000\002\066\002" +
    "\000\002\066\003\000\002\067\007\000\002\067\005\000" +
    "\002\067\005\000\002\067\003\000\002\070\003\000\002" +
    "\070\003\000\002\145\003\000\002\115\003\000\002\147" +
    "\003\000\002\132\007\000\002\132\003\000\002\127\004" +
    "\000\002\127\002\000\002\151\005\000\002\206\005\000" +
    "\002\207\006\000\002\207\006\000\002\126\003\000\002" +
    "\126\003\000\002\126\002\000\002\150\003\000\002\150" +
    "\004\000\002\152\005\000\002\152\005\000\002\072\003" +
    "\000\002\210\006\000\002\210\006\000\002\164\003\000" +
    "\002\164\003\000\002\164\003\000\002\164\003\000\002" +
    "\160\003\000\002\160\004\000\002\160\003\000\002\071" +
    "\006\000\002\071\006\000\002\071\003\000\002\073\003" +
    "\000\002\073\006\000\002\074\002\000\002\074\003\000" +
    "\002\075\003\000\002\075\003\000\002\076\006\000\002" +
    "\076\006\000\002\076\003\000\002\077\003\000\002\077" +
    "\005\000\002\100\003\000\002\100\004\000\002\101\005" +
    "\000\002\101\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\002\000\002\103\002\000\002\103\004\000\002" +
    "\104\007\000\002\104\005\000\002\104\005\000\002\104" +
    "\003\000\002\104\010\000\002\104\006\000\002\104\006" +
    "\000\002\104\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\003\000\002\105\004\000\002\107\003\000\002" +
    "\107\006\000\002\107\005\000\002\107\005\000\002\107" +
    "\010\000\002\107\005\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\111\006\000\002\111\006\000" +
    "\002\111\004\000\002\111\004\000\002\111\006\000\002" +
    "\111\004\000\002\111\004\000\002\153\003\000\002\153" +
    "\005\000\002\156\005\000\002\156\005\000\002\156\005" +
    "\000\002\154\003\000\002\112\003\000\002\112\003\000" +
    "\002\216\003\000\002\216\003\000\002\217\003\000\002" +
    "\217\004\000\002\217\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03a1\000\002\001\ufffb\000\004\002\u03a3\001\002\000" +
    "\250\003\131\004\161\005\172\006\120\007\011\010\070" +
    "\011\035\012\057\013\066\015\104\017\142\020\136\021" +
    "\132\022\046\024\034\026\113\030\173\033\115\035\144" +
    "\041\061\042\135\043\101\044\121\045\151\046\153\047" +
    "\013\050\042\052\170\054\027\055\012\057\106\060\164" +
    "\061\032\062\063\063\033\064\157\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\104\072" +
    "\107\107\110\143\111\043\112\073\113\026\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\144\010" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\044\215\067\216\021\222" +
    "\165\225\112\226\124\227\064\231\133\233\130\001\001" +
    "\000\002\001\ufeaf\000\004\222\u03a0\001\002\000\002\001" +
    "\uffca\000\002\001\ufeb4\000\006\013\u0395\225\u0396\001\002" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\ufe2f\000\002\001\ufef1\000\004\222" +
    "\u038c\001\002\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\002\001\ufee2" +
    "\000\070\032\u010c\123\u0104\124\u0113\125\376\143\u0101\144" +
    "\u038a\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112" +
    "\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161" +
    "\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109" +
    "\170\374\173\u0100\001\002\000\004\063\u0389\001\002\000" +
    "\002\001\ufead\000\002\001\ufe6d\000\002\001\uffb6\000\036" +
    "\127\357\130\362\131\360\132\371\133\363\134\370\135" +
    "\365\136\367\137\361\140\356\141\364\142\366\174\ufe86" +
    "\175\ufe86\001\ufe88\000\232\003\131\004\161\005\172\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\015\104" +
    "\017\142\020\136\021\132\022\046\024\034\026\113\030" +
    "\173\033\115\035\144\041\061\042\135\043\101\044\250" +
    "\046\153\047\013\050\042\052\170\054\274\055\012\057" +
    "\106\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\104\072\107\247\110" +
    "\143\111\043\112\073\113\026\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\144\010\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\044\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\014\011\214\017\307\112\u037e\114" +
    "\062\222\306\001\002\000\154\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\004\222\u0377\001\002\000\002\001" +
    "\uffb0\000\004\222\u0367\001\002\000\004\224\u0366\001\uffff" +
    "\000\014\013\066\016\u0364\101\u01c8\102\u02ba\103\u02b9\001" +
    "\002\000\154\004\161\006\120\007\011\010\070\011\214" +
    "\012\057\013\066\017\142\033\115\044\250\060\164\061" +
    "\032\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\107\247\110\143\111\043\112\073\114" +
    "\062\115\031\116\077\117\053\120\140\121\117\126\071" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\002\001\ufe73\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\004\104\u034c\001\002\000\002\001" +
    "\ufeae\000\006\013\u0343\044\u01b8\001\ufecb\000\004\206\u0340" +
    "\001\ufe72\000\004\222\u0338\001\002\000\002\001\ufeab\000" +
    "\002\001\ufe70\000\002\001\ufeaa\000\004\011\u032e\001\002" +
    "\000\004\222\u032b\001\002\000\004\067\u0326\001\ufe84\000" +
    "\156\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\151\u018b" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\ufe57\000\024\011\214\013\066" +
    "\072\u0171\107\u0176\112\u0170\114\062\206\u0172\214\213\225" +
    "\112\001\002\000\002\001\ufe9a\000\012\104\u012e\106\ufe76" +
    "\206\u012f\222\ufe7a\001\ufe6f\000\156\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\144\u0320\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\002\001\ufffd\000\004\222\u031d\001\002\000\012" +
    "\013\066\016\u031b\102\u02ba\103\u02b9\001\ufeba\000\004\106" +
    "\u0316\001\002\000\002\001\ufe34\000\004\063\u0315\001\002" +
    "\000\002\001\ufeb3\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\002\000\002\001" +
    "\uffea\000\006\011\214\114\062\001\002\000\002\001\ufeec" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\002\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\002\000\006\013\066\225\u012a\001\002" +
    "\000\004\011\u030b\001\002\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\002\001\ufe99\000\002\001\uffd1\000\020\011\214\013\066" +
    "\107\u0125\112\u011f\114\062\214\213\225\112\001\002\000" +
    "\004\222\u0300\001\002\000\012\011\214\104\u02f8\112\341" +
    "\114\062\001\002\000\006\174\u02f6\175\u02f7\001\002\000" +
    "\004\206\u02f3\001\ufe71\000\004\104\u012b\001\ufe5e\000\004" +
    "\222\u02dc\001\002\000\002\001\ufff9\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\154\004\161\006\120\007\011\010\070\011\214" +
    "\012\057\013\066\017\142\033\115\044\250\060\164\061" +
    "\032\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\107\247\110\143\111\043\112\073\114" +
    "\062\115\031\116\077\117\053\120\140\121\117\126\071" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\002\001\ufeb5\000\004\151\251\001\uffb5\000\002\001" +
    "\ufe95\000\002\001\uffe5\000\012\013\066\016\u02bb\102\u02ba" +
    "\103\u02b9\001\002\000\002\001\ufe69\000\004\011\u0266\001" +
    "\002\000\006\122\u0261\144\u0262\001\002\000\002\001\ufeac" +
    "\000\002\001\uffc6\000\232\003\131\004\161\005\172\006" +
    "\120\007\011\010\070\011\035\012\057\013\066\015\104" +
    "\017\142\020\136\021\132\022\046\024\034\026\113\030" +
    "\173\033\115\035\144\041\061\042\135\043\101\044\250" +
    "\046\153\047\013\050\042\052\170\054\274\055\012\057" +
    "\106\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\104\072\107\247\110" +
    "\143\111\043\112\073\113\026\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\144\010\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\044\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\002\001\uffad\000\002\001\ufe6a\000" +
    "\156\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\144\u0258" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\002\001\ufff8\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\002\000\154\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\002\000\004\206\243\001\ufeb2\000\002\001\ufea9" +
    "\000\004\222\u0237\001\002\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\002\001\uffb7\000\002\001\ufeb0\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\004\011\u0232\001\002\000\004\144\u0231\001\002\000" +
    "\156\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\144\u022c" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\002\001\ufe89\000\004" +
    "\106\u022a\001\002\000\002\001\ufe8a\000\002\001\uffaa\000" +
    "\010\106\ufeca\112\220\222\u0178\001\ufe98\000\004\222\u0225" +
    "\001\ufebd\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\002\001\ufffa\000" +
    "\004\222\u021e\001\002\000\156\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\047\013\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\004\222\u01f5\001\002\000\024\011\214\013\066\072" +
    "\u0171\107\u0176\112\u0170\114\062\206\u0172\214\213\225\112" +
    "\001\002\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\002\001\ufffc\000" +
    "\004\222\u01d5\001\002\000\004\222\174\001\002\000\006" +
    "\011\200\114\176\001\002\000\006\122\u01cc\223\u01cb\001" +
    "\002\000\002\001\ufe32\000\004\127\201\001\002\000\002" +
    "\001\ufe33\000\056\006\120\007\011\010\070\011\214\017" +
    "\142\072\207\073\022\074\047\075\051\076\147\077\006" +
    "\100\202\107\216\110\143\111\043\112\206\114\062\164" +
    "\215\165\204\206\210\214\213\233\130\001\002\000\006" +
    "\016\u01c9\101\u01c8\001\002\000\002\001\ufea6\000\056\006" +
    "\120\007\011\010\070\011\214\017\142\072\207\073\022" +
    "\074\047\075\051\076\147\077\006\100\202\107\216\110" +
    "\143\111\043\112\206\114\062\164\215\165\204\206\210" +
    "\214\213\233\130\001\002\000\002\001\ufe9c\000\006\011" +
    "\214\114\062\001\002\000\004\222\u01c2\001\002\000\056" +
    "\006\120\007\011\010\070\011\214\017\142\072\207\073" +
    "\022\074\047\075\051\076\147\077\006\100\202\107\216" +
    "\110\143\111\043\112\206\114\062\164\215\165\204\206" +
    "\210\214\213\233\130\001\ufe92\000\004\106\225\001\002" +
    "\000\002\001\uff95\000\002\001\ufecb\000\002\001\uffff\000" +
    "\056\006\120\007\011\010\070\011\214\017\142\072\207" +
    "\073\022\074\047\075\051\076\147\077\006\100\202\107" +
    "\216\110\143\111\043\112\206\114\062\164\215\165\204" +
    "\206\210\214\213\233\130\001\002\000\004\112\222\001" +
    "\002\000\006\106\ufeca\112\220\001\ufea5\000\004\011\221" +
    "\001\002\000\002\001\ufffe\000\006\011\214\114\062\001" +
    "\002\000\006\106\ufec9\112\220\001\ufea4\000\002\001\ufea2" +
    "\000\004\011\226\001\002\000\002\001\ufe9b\000\004\207" +
    "\241\001\002\000\004\122\234\001\ufe90\000\004\070\232" +
    "\001\ufe8b\000\056\006\120\007\011\010\070\011\214\017" +
    "\142\072\207\073\022\074\047\075\051\076\147\077\006" +
    "\100\202\107\216\110\143\111\043\112\206\114\062\164" +
    "\215\165\204\206\210\214\213\233\130\001\002\000\002" +
    "\001\ufe8c\000\056\006\120\007\011\010\070\011\214\017" +
    "\142\072\207\073\022\074\047\075\051\076\147\077\006" +
    "\100\202\107\216\110\143\111\043\112\206\114\062\164" +
    "\215\165\204\206\210\214\213\233\130\001\ufe8f\000\002" +
    "\001\ufe91\000\004\070\237\001\ufe8d\000\056\006\120\007" +
    "\011\010\070\011\214\017\142\072\207\073\022\074\047" +
    "\075\051\076\147\077\006\100\202\107\216\110\143\111" +
    "\043\112\206\114\062\164\215\165\204\206\210\214\213" +
    "\233\130\001\002\000\002\001\ufe8e\000\004\206\243\001" +
    "\ufe9e\000\004\206\u0191\001\ufe9d\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\ufe67" +
    "\000\066\032\u010c\123\u0104\124\u0113\125\376\143\u0101\145" +
    "\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108" +
    "\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162" +
    "\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374" +
    "\173\u0100\001\ufe66\000\004\207\u01c1\001\002\000\004\044" +
    "\u01b8\001\ufecb\000\004\112\341\001\002\000\004\151\251" +
    "\001\uffb5\000\002\001\uffb4\000\004\222\253\001\002\000" +
    "\020\011\214\072\254\107\261\112\264\114\062\223\uff7f" +
    "\232\260\001\uff78\000\002\001\uff76\000\004\112\220\001" +
    "\ufec7\000\006\013\333\151\332\001\002\000\004\122\330" +
    "\001\uff80\000\002\001\uff75\000\004\112\326\001\002\000" +
    "\002\001\uff77\000\002\001\uff7e\000\006\011\214\114\062" +
    "\001\002\000\004\223\266\001\002\000\004\054\267\001" +
    "\ufed9\000\004\222\313\001\002\000\004\104\271\001\002" +
    "\000\002\001\uffea\000\250\003\131\004\161\005\172\006" +
    "\120\007\011\010\070\011\035\012\057\013\066\015\104" +
    "\017\142\020\136\021\132\022\046\024\034\026\113\030" +
    "\173\033\115\035\144\041\061\042\135\043\101\044\121" +
    "\046\153\047\013\050\042\052\170\054\274\055\012\057" +
    "\106\060\164\061\032\062\275\063\033\064\157\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\104\072\105\277\107\247\110\143\111\043\112\073" +
    "\113\026\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\144\010\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\044" +
    "\215\067\216\021\222\165\225\112\226\124\227\064\231" +
    "\133\233\130\001\002\000\002\001\uffeb\000\006\017\307" +
    "\222\306\001\002\000\004\222\302\001\002\000\002\001" +
    "\uffe8\000\002\001\ufedd\000\002\001\uffe7\000\002\001\uffe9" +
    "\000\004\223\303\001\002\000\004\144\304\001\002\000" +
    "\002\001\uffe6\000\004\144\312\001\002\000\004\017\310" +
    "\001\002\000\002\001\uffb9\000\004\223\311\001\002\000" +
    "\002\001\uffb8\000\002\001\uffcf\000\006\013\316\151\314" +
    "\001\002\000\004\013\324\001\002\000\006\122\320\223" +
    "\317\001\002\000\002\001\ufed5\000\002\001\ufed8\000\006" +
    "\013\322\151\321\001\002\000\004\013\323\001\002\000" +
    "\002\001\ufed7\000\002\001\ufed6\000\002\001\ufed4\000\004" +
    "\112\220\001\ufec5\000\006\011\214\114\062\001\002\000" +
    "\004\112\220\001\ufec6\000\016\011\214\072\254\107\261" +
    "\112\264\114\062\232\260\001\uff78\000\002\001\uff7d\000" +
    "\004\013\336\001\002\000\004\127\334\001\uff7c\000\056" +
    "\006\120\007\011\010\070\011\214\017\142\072\207\073" +
    "\022\074\047\075\051\076\147\077\006\100\202\107\216" +
    "\110\143\111\043\112\206\114\062\164\215\165\204\206" +
    "\210\214\213\233\130\001\002\000\002\001\uff7a\000\004" +
    "\127\337\001\uff7b\000\056\006\120\007\011\010\070\011" +
    "\214\017\142\072\207\073\022\074\047\075\051\076\147" +
    "\077\006\100\202\107\216\110\143\111\043\112\206\114" +
    "\062\164\215\165\204\206\210\214\213\233\130\001\002" +
    "\000\002\001\uff79\000\006\011\214\114\062\001\002\000" +
    "\010\106\ufec9\112\220\222\343\001\ufe97\000\156\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\151\345\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\uff73\000\004\223\u01b7\001\002\000\024\011" +
    "\214\013\066\072\u0171\107\u0176\112\u0170\114\062\206\u0172" +
    "\214\213\225\112\001\002\000\066\032\u010c\123\u0104\124" +
    "\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106" +
    "\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157" +
    "\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103" +
    "\166\u010a\167\u0109\170\374\173\u0100\001\002\000\042\122" +
    "\uff71\127\357\130\362\131\360\132\371\133\363\134\370" +
    "\135\365\136\367\137\361\140\356\141\364\142\366\174" +
    "\ufe86\175\ufe86\223\uff71\001\ufe88\000\004\122\352\001\uff74" +
    "\000\006\122\uff72\223\uff72\001\ufe89\000\156\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\151\353\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\002\000\024\011\214\013\066\072\u0171\107\u0176" +
    "\112\u0170\114\062\206\u0172\214\213\225\112\001\002\000" +
    "\042\122\uff6e\127\357\130\362\131\360\132\371\133\363" +
    "\134\370\135\365\136\367\137\361\140\356\141\364\142" +
    "\366\174\ufe86\175\ufe86\223\uff6e\001\ufe88\000\006\122\uff6f" +
    "\223\uff6f\001\ufe89\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\002\000\156\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\151\u016d\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\002\000\154\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\002\000\154\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\002\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\154\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\002\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\154\004\161\006\120\007\011\010\070\011\214" +
    "\012\057\013\066\017\142\033\115\044\250\060\164\061" +
    "\032\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\107\247\110\143\111\043\112\073\114" +
    "\062\115\031\116\077\117\053\120\140\121\117\126\071" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\060\032\u010c\143\u0101\145\375\146\u010d\147\377\150" +
    "\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111" +
    "\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165" +
    "\u0103\166\u010a\167\u0109\170\374\173\u0100\001\uff1c\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\002\000\154\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\002\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\154\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\002\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\156\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\224\u015a\225\112\226\124\227\064\233" +
    "\130\001\002\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\154\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\002\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\154\004\161\006\120\007\011\010\070\011\214" +
    "\012\057\013\066\017\142\033\115\044\250\060\164\061" +
    "\032\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\107\247\110\143\111\043\112\073\114" +
    "\062\115\031\116\077\117\053\120\140\121\117\126\071" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\002\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\002\000\154\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\020" +
    "\011\214\013\066\107\u0125\112\u011f\114\062\214\213\225" +
    "\112\001\002\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\154\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\002\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\154\004\161\006\120\007\011\010\070\011\214" +
    "\012\057\013\066\017\142\033\115\044\250\060\164\061" +
    "\032\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\107\247\110\143\111\043\112\073\114" +
    "\062\115\031\116\077\117\053\120\140\121\117\126\071" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\246\222\165\225\112\226" +
    "\124\227\064\233\130\001\002\000\154\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\002" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\002\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\012\032\u010c\166\u010a\167\u0109\170\374\001\uff06\000\062" +
    "\032\u010c\125\376\143\u0101\145\375\146\u010d\147\377\150" +
    "\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111" +
    "\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165" +
    "\u0103\166\u010a\167\u0109\170\374\173\u0100\001\uff0b\000\034" +
    "\032\u010c\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163" +
    "\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100" +
    "\001\ufef9\000\024\032\u010c\162\u010b\163\u0107\164\u0114\165" +
    "\u0103\166\u010a\167\u0109\170\374\173\u0100\001\ufef6\000\024" +
    "\032\u010c\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\ufef5\000\024\032\u010c\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\ufef4\000\044\032\u010c\152\u0112\153\u0108\154\373" +
    "\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163" +
    "\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100" +
    "\001\uff09\000\052\032\u010c\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\uff0e\000\002\001\ufec3\000\004" +
    "\106\u014d\001\002\000\006\011\214\114\062\001\002\000" +
    "\010\104\u012e\106\ufe76\206\u012f\001\ufe6f\000\004\106\u014a" +
    "\001\ufec4\000\002\001\ufef3\000\004\067\u0134\001\ufec1\000" +
    "\006\013\066\225\u012a\001\002\000\004\112\u0127\001\002" +
    "\000\004\112\220\001\ufeca\000\006\011\214\114\062\001" +
    "\002\000\004\112\220\001\ufec9\000\006\104\u012e\206\u012f" +
    "\001\ufe6e\000\004\104\u012b\001\ufe5d\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\070\032\u010c\105\u012d\123\u0104\124\u0113\125\376" +
    "\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\002\000\002\001\ufe68\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\ufe67\000\004\207" +
    "\u0131\001\002\000\002\001\ufe6c\000\070\032\u010c\105\u0133" +
    "\123\u0104\124\u0113\125\376\143\u0101\145\375\146\u010d\147" +
    "\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105" +
    "\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164" +
    "\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001\002" +
    "\000\002\001\ufe6b\000\014\011\200\013\066\104\u013b\114" +
    "\176\225\112\001\002\000\002\001\ufe60\000\002\001\ufe61" +
    "\000\002\001\ufe64\000\002\001\ufebf\000\006\104\u0140\206" +
    "\u0141\001\ufe65\000\006\013\066\225\u012a\001\002\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\006\104\u012e\206\u012f\001\ufe7a\000" +
    "\070\032\u010c\105\u013e\123\u0104\124\u0113\125\376\143\u0101" +
    "\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153" +
    "\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110" +
    "\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170" +
    "\374\173\u0100\001\002\000\002\001\ufe5f\000\006\104\u012e" +
    "\206\u012f\001\ufe79\000\154\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\002\000\154\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\ufe67\000\004\207\u0143\001\002\000\002\001\ufe63" +
    "\000\070\032\u010c\105\u0145\123\u0104\124\u0113\125\376\143" +
    "\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112" +
    "\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161" +
    "\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109" +
    "\170\374\173\u0100\001\002\000\002\001\ufe62\000\004\067" +
    "\u0148\001\ufec2\000\002\001\ufec0\000\014\011\200\013\066" +
    "\104\u013b\114\176\225\112\001\002\000\002\001\ufebe\000" +
    "\006\013\066\225\112\001\002\000\002\001\ufe78\000\004" +
    "\112\220\001\ufec8\000\006\013\066\225\112\001\002\000" +
    "\002\001\ufe77\000\020\032\u010c\164\u0114\165\u0103\166\u010a" +
    "\167\u0109\170\374\173\u0100\001\uff01\000\004\032\u010c\001" +
    "\uff04\000\004\032\u010c\001\uff03\000\034\032\u010c\156\u0111" +
    "\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165" +
    "\u0103\166\u010a\167\u0109\170\374\173\u0100\001\ufef8\000\020" +
    "\032\u010c\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\uff00\000\046\032\u010c\151\u010e\152\u0112\153\u0108" +
    "\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162" +
    "\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374" +
    "\173\u0100\001\uff08\000\034\032\u010c\156\u0111\157\u010f\160" +
    "\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a" +
    "\167\u0109\170\374\173\u0100\001\ufefa\000\064\032\u010c\124" +
    "\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106" +
    "\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157" +
    "\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103" +
    "\166\u010a\167\u0109\170\374\173\u0100\001\uff0d\000\012\032" +
    "\u010c\166\u010a\167\u0109\170\374\001\uff05\000\024\032\u010c" +
    "\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170" +
    "\374\173\u0100\001\ufef7\000\070\032\u010c\123\u0104\124\u0113" +
    "\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106\151" +
    "\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f" +
    "\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166" +
    "\u010a\167\u0109\170\374\173\u0100\224\u015c\001\002\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\066\032\u010c\123\u0104\124\u0113\125" +
    "\376\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e" +
    "\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160" +
    "\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a" +
    "\167\u0109\170\374\173\u0100\001\ufeed\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\066\032\u010c\123\u0104\124\u0113\125\376\143\u0101" +
    "\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153" +
    "\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110" +
    "\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170" +
    "\374\173\u0100\001\ufeee\000\012\032\u010c\166\u010a\167\u0109" +
    "\170\374\001\uff07\000\050\032\u010c\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\uff0a\000\060\032\u010c\143\u0101" +
    "\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153" +
    "\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110" +
    "\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170" +
    "\374\173\u0100\001\uff0c\000\054\032\u010c\146\u010d\147\377" +
    "\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156" +
    "\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114" +
    "\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001\uff0f\000" +
    "\004\032\u010c\001\uff02\000\034\032\u010c\156\u0111\157\u010f" +
    "\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166" +
    "\u010a\167\u0109\170\374\173\u0100\001\ufefb\000\060\032\u010c" +
    "\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\uff1a\000\060\032\u010c\143\u0101" +
    "\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153" +
    "\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110" +
    "\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170" +
    "\374\173\u0100\001\uff18\000\060\032\u010c\143\u0101\145\375" +
    "\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154" +
    "\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\uff14\000\060\032\u010c\143\u0101\145\375\146\u010d" +
    "\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155" +
    "\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107" +
    "\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001" +
    "\uff19\000\060\032\u010c\143\u0101\145\375\146\u010d\147\377" +
    "\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156" +
    "\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114" +
    "\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001\uff15\000" +
    "\060\032\u010c\143\u0101\145\375\146\u010d\147\377\150\u0106" +
    "\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157" +
    "\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103" +
    "\166\u010a\167\u0109\170\374\173\u0100\001\uff1b\000\060\032" +
    "\u010c\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e" +
    "\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160" +
    "\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a" +
    "\167\u0109\170\374\173\u0100\001\uff1e\000\060\032\u010c\143" +
    "\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112" +
    "\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161" +
    "\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109" +
    "\170\374\173\u0100\001\uff17\000\060\032\u010c\143\u0101\145" +
    "\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108" +
    "\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162" +
    "\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374" +
    "\173\u0100\001\uff1d\000\026\011\214\013\066\072\u0171\107" +
    "\u0176\112\u0170\114\062\206\u0172\210\u0175\214\213\225\112" +
    "\001\002\000\060\032\u010c\143\u0101\145\375\146\u010d\147" +
    "\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105" +
    "\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164" +
    "\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001\uff22" +
    "\000\004\106\u01ab\001\002\000\006\011\214\114\062\001" +
    "\002\000\004\222\u01a3\001\002\000\156\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\151\u018b\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\ufe57\000\004\106\u0182\001\002\000\002\001\uff21\000" +
    "\020\011\214\013\066\107\u0125\112\u011f\114\062\214\213" +
    "\225\112\001\002\000\004\112\u017b\001\002\000\006\112" +
    "\220\222\u0178\001\ufeca\000\156\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\151\345\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\uff73" +
    "\000\004\223\u017a\001\002\000\002\001\ufed3\000\006\011" +
    "\214\114\062\001\002\000\006\112\220\222\343\001\ufec9" +
    "\000\004\222\u017f\001\ufeb7\000\002\001\uff20\000\156\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\151\345\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\uff73\000\004\223\u0181\001\002\000\002" +
    "\001\ufeb6\000\014\011\200\013\066\104\u013b\114\176\225" +
    "\112\001\002\000\004\222\u0188\001\002\000\004\222\u0185" +
    "\001\ufe78\000\156\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\151\345\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\uff73\000\004\223" +
    "\u0187\001\002\000\002\001\ufecf\000\156\004\161\006\120" +
    "\007\011\010\070\011\214\012\057\013\066\017\142\033" +
    "\115\044\250\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\107\247\110" +
    "\143\111\043\112\073\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\151\345\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\uff73\000\004\223\u018a\001\002\000\002\001\ufed0\000" +
    "\024\011\214\013\066\072\u0171\107\u0176\112\u0170\114\062" +
    "\206\u0172\214\213\225\112\001\002\000\070\032\u010c\070" +
    "\u019e\123\u0104\124\u0113\125\376\143\u0101\145\375\146\u010d" +
    "\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155" +
    "\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107" +
    "\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001" +
    "\ufe52\000\004\122\u0194\001\ufe90\000\004\207\u018f\001\002" +
    "\000\004\206\243\001\002\000\004\206\u0191\001\ufeda\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\ufe67\000\004\207\u0193\001\002\000\002" +
    "\001\uff2b\000\156\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\151\u0196\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\225\112\226\124\227\064\233\130\001\ufe8f\000\002\001" +
    "\ufe56\000\024\011\214\013\066\072\u0171\107\u0176\112\u0170" +
    "\114\062\206\u0172\214\213\225\112\001\002\000\070\032" +
    "\u010c\070\u0198\123\u0104\124\u0113\125\376\143\u0101\145\375" +
    "\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154" +
    "\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\ufe54\000\156\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\151\u0199\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\024" +
    "\011\214\013\066\072\u0171\107\u0176\112\u0170\114\062\206" +
    "\u0172\214\213\225\112\001\002\000\066\032\u010c\123\u0104" +
    "\124\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150" +
    "\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111" +
    "\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165" +
    "\u0103\166\u010a\167\u0109\170\374\173\u0100\001\ufe55\000\002" +
    "\001\ufe51\000\002\001\ufe87\000\002\001\ufe50\000\156\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\151\u019f\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\002\000\024\011\214\013\066\072\u0171" +
    "\107\u0176\112\u0170\114\062\206\u0172\214\213\225\112\001" +
    "\002\000\066\032\u010c\123\u0104\124\u0113\125\376\143\u0101" +
    "\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153" +
    "\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110" +
    "\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170" +
    "\374\173\u0100\001\ufe53\000\002\001\ufe4f\000\002\001\ufe4e" +
    "\000\156\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\151" +
    "\u018b\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\ufe57\000\004\223\u01a5\001" +
    "\002\000\004\206\243\001\002\000\004\206\u0191\001\ufedb" +
    "\000\006\112\220\222\u01a8\001\ufec8\000\156\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\151\345\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\uff73\000\004\223\u01aa\001\002\000\002\001\ufed1" +
    "\000\014\011\200\013\066\104\u013b\114\176\225\112\001" +
    "\002\000\004\222\u01b1\001\002\000\004\222\u01ae\001\ufe77" +
    "\000\156\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\151" +
    "\345\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\uff73\000\004\223\u01b0\001" +
    "\002\000\002\001\ufecd\000\156\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\151\345\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\uff73" +
    "\000\004\223\u01b3\001\002\000\002\001\ufece\000\060\032" +
    "\u010c\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e" +
    "\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160" +
    "\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a" +
    "\167\u0109\170\374\173\u0100\001\uff16\000\002\001\uff6d\000" +
    "\002\001\uff70\000\002\001\ufed2\000\004\151\251\001\uffb5" +
    "\000\004\222\u01ba\001\002\000\020\011\214\072\254\107" +
    "\261\112\264\114\062\223\uff7f\232\260\001\uff78\000\004" +
    "\223\u01bc\001\002\000\004\054\267\001\ufed9\000\004\104" +
    "\u01be\001\002\000\002\001\uffea\000\250\003\131\004\161" +
    "\005\172\006\120\007\011\010\070\011\035\012\057\013" +
    "\066\015\104\017\142\020\136\021\132\022\046\024\034" +
    "\026\113\030\173\033\115\035\144\041\061\042\135\043" +
    "\101\044\121\046\153\047\013\050\042\052\170\054\274" +
    "\055\012\057\106\060\164\061\032\062\275\063\033\064" +
    "\157\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\104\072\105\u01c0\107\247\110\143\111" +
    "\043\112\073\113\026\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\144\010\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\044\215\067\216\021\222\165\225\112\226\124" +
    "\227\064\231\133\233\130\001\002\000\002\001\ufedc\000" +
    "\002\001\uff2a\000\056\006\120\007\011\010\070\011\214" +
    "\017\142\072\207\073\022\074\047\075\051\076\147\077" +
    "\006\100\202\107\216\110\143\111\043\112\206\114\062" +
    "\164\215\165\204\206\210\214\213\233\130\001\ufe92\000" +
    "\004\223\u01c4\001\002\000\004\206\243\001\ufea0\000\004" +
    "\206\u0191\001\ufe9f\000\006\106\ufec8\112\220\001\ufea3\000" +
    "\002\001\ufea1\000\002\001\ufea7\000\004\101\u01ca\001\002" +
    "\000\002\001\ufea8\000\234\003\131\004\161\005\172\006" +
    "\120\007\011\010\070\011\035\012\057\013\066\015\104" +
    "\017\142\020\136\021\132\022\046\024\034\026\113\030" +
    "\173\033\115\035\144\041\061\042\135\043\101\044\250" +
    "\046\153\047\013\050\042\052\170\054\274\055\012\057" +
    "\106\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\104\072\107\247\110" +
    "\143\111\043\112\073\113\026\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\144\010\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\044\222\165\224\u01d1\225\112\226\124" +
    "\227\064\233\130\001\002\000\006\011\200\114\176\001" +
    "\002\000\004\127\u01ce\001\002\000\056\006\120\007\011" +
    "\010\070\011\214\017\142\072\207\073\022\074\047\075" +
    "\051\076\147\077\006\100\202\107\216\110\143\111\043" +
    "\112\206\114\062\164\215\165\204\206\210\214\213\233" +
    "\130\001\002\000\002\001\uff94\000\002\001\uffcb\000\002" +
    "\001\uffea\000\002\001\uff97\000\250\003\131\004\161\005" +
    "\172\006\120\007\011\010\070\011\035\012\057\013\066" +
    "\015\104\017\142\020\136\021\132\022\046\024\034\026" +
    "\113\030\173\031\u01d4\033\115\035\144\041\061\042\135" +
    "\043\101\044\121\046\153\047\013\050\042\052\170\054" +
    "\274\055\012\057\106\060\164\061\032\062\275\063\033" +
    "\064\157\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\104\072\107\247\110\143\111\043" +
    "\112\073\113\026\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\144\010\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\044\215\067\216\021\222\165\225\112\226\124\227" +
    "\064\231\133\233\130\001\002\000\002\001\uff96\000\154" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\246\222\165\225\112\226\124\227\064" +
    "\233\130\001\002\000\070\032\u010c\123\u0104\124\u0113\125" +
    "\376\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e" +
    "\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160" +
    "\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a" +
    "\167\u0109\170\374\173\u0100\223\u01d7\001\002\000\234\003" +
    "\131\004\161\005\172\006\120\007\011\010\070\011\035" +
    "\012\057\013\066\015\104\017\142\020\136\021\132\022" +
    "\046\024\034\026\113\030\173\033\115\035\144\041\061" +
    "\042\135\043\101\044\250\046\153\047\013\050\042\052" +
    "\170\054\274\055\012\057\106\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\104\072\107\247\110\143\111\043\112\073\113\026" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\144\010\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\044\222\165" +
    "\224\u01d8\225\112\226\124\227\064\233\130\001\002\000" +
    "\002\001\uffea\000\002\001\uff88\000\006\212\u01dd\213\u01dc" +
    "\001\uff84\000\002\001\uffe2\000\232\003\131\004\161\005" +
    "\172\006\120\007\011\010\070\011\035\012\057\013\066" +
    "\015\104\017\142\020\136\021\132\022\046\024\034\026" +
    "\113\030\173\033\115\035\144\041\061\042\135\043\101" +
    "\044\250\046\153\047\013\050\042\052\170\054\274\055" +
    "\012\057\106\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\104\072\107" +
    "\247\110\143\111\043\112\073\113\026\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\144\010\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\044\222\165\225\112\226\124" +
    "\227\064\233\130\001\002\000\004\222\u01de\001\002\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\002\000\070\032\u010c\123\u0104\124\u0113" +
    "\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106\151" +
    "\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f" +
    "\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166" +
    "\u010a\167\u0109\170\374\173\u0100\223\u01e0\001\002\000\232" +
    "\003\131\004\161\005\172\006\120\007\011\010\070\011" +
    "\035\012\057\013\066\015\104\017\142\020\136\021\132" +
    "\022\046\024\034\026\113\030\173\033\115\035\144\041" +
    "\061\042\135\043\101\044\250\046\153\047\013\050\042" +
    "\052\170\054\274\055\012\057\106\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\104\072\107\247\110\143\111\043\112\073\113" +
    "\026\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\144\010\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\044\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\002" +
    "\001\uff87\000\002\001\uff83\000\246\003\131\004\161\005" +
    "\172\006\120\007\011\010\070\011\035\012\057\013\066" +
    "\015\104\017\142\020\136\021\132\022\046\024\034\026" +
    "\113\030\173\033\115\035\144\041\061\042\135\043\101" +
    "\044\121\046\153\047\013\050\042\052\170\054\274\055" +
    "\012\057\106\060\164\061\032\062\275\063\033\064\157" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\104\072\107\247\110\143\111\043\112\073" +
    "\113\026\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\144\010\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\044" +
    "\215\067\216\021\222\165\225\112\226\124\227\064\231" +
    "\133\233\130\001\uff86\000\006\212\u01e7\213\u01e6\001\uff82" +
    "\000\004\211\u01ef\001\002\000\004\224\u01ed\001\002\000" +
    "\004\222\u01e8\001\002\000\154\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\070" +
    "\032\u010c\123\u0104\124\u0113\125\376\143\u0101\145\375\146" +
    "\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373" +
    "\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163" +
    "\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100" +
    "\223\u01ea\001\002\000\004\224\u01eb\001\002\000\002\001" +
    "\uffea\000\246\003\131\004\161\005\172\006\120\007\011" +
    "\010\070\011\035\012\057\013\066\015\104\017\142\020" +
    "\136\021\132\022\046\024\034\026\113\030\173\033\115" +
    "\035\144\041\061\042\135\043\101\044\121\046\153\047" +
    "\013\050\042\052\170\054\274\055\012\057\106\060\164" +
    "\061\032\062\275\063\033\064\157\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\104\072" +
    "\107\247\110\143\111\043\112\073\113\026\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\144\010" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\044\215\067\216\021\222" +
    "\165\225\112\226\124\227\064\231\133\233\130\001\uff85" +
    "\000\002\001\uffea\000\246\003\131\004\161\005\172\006" +
    "\120\007\011\010\070\011\035\012\057\013\066\015\104" +
    "\017\142\020\136\021\132\022\046\024\034\026\113\030" +
    "\173\033\115\035\144\041\061\042\135\043\101\044\121" +
    "\046\153\047\013\050\042\052\170\054\274\055\012\057" +
    "\106\060\164\061\032\062\275\063\033\064\157\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\104\072\107\247\110\143\111\043\112\073\113\026" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\144\010\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\044\215\067" +
    "\216\021\222\165\225\112\226\124\227\064\231\133\233" +
    "\130\001\uff81\000\004\144\u01f0\001\002\000\002\001\uffe1" +
    "\000\070\032\u010c\123\u0104\124\u0113\125\376\143\u0101\144" +
    "\u01f2\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112" +
    "\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161" +
    "\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109" +
    "\170\374\173\u0100\001\002\000\002\001\uffc8\000\002\001" +
    "\uff10\000\002\001\ufe86\000\026\011\214\013\066\071\u01fa" +
    "\072\u0171\107\u0176\112\u0170\114\062\206\u0172\214\213\225" +
    "\112\001\ufe58\000\002\001\ufe59\000\006\122\u01fe\223\u0200" +
    "\001\002\000\002\001\ufe5b\000\002\001\ufe5a\000\004\222" +
    "\u01fb\001\002\000\026\011\214\013\066\071\u01fa\072\u0171" +
    "\107\u0176\112\u0170\114\062\206\u0172\214\213\225\112\001" +
    "\ufe58\000\006\122\u01fe\223\u01fd\001\002\000\002\001\uffa3" +
    "\000\026\011\214\013\066\071\u01fa\072\u0171\107\u0176\112" +
    "\u0170\114\062\206\u0172\214\213\225\112\001\ufe58\000\002" +
    "\001\ufe5c\000\004\127\u0201\001\002\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\002\000\060\032\u010c\143\u0101\145\375\146\u010d\147\377" +
    "\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156" +
    "\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114" +
    "\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001\uff23\000" +
    "\004\223\u0208\001\ufef1\000\070\032\u010c\123\u0104\124\u0113" +
    "\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106\151" +
    "\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f" +
    "\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166" +
    "\u010a\167\u0109\170\374\173\u0100\223\u0207\001\002\000\004" +
    "\223\u0206\001\002\000\002\001\ufef0\000\002\001\ufef2\000" +
    "\006\067\u020e\206\243\001\uff26\000\006\067\u020e\206\u0191" +
    "\001\uff28\000\004\067\u020e\001\uff27\000\002\001\uff2c\000" +
    "\002\001\uff25\000\002\001\ufeef\000\014\011\200\013\066" +
    "\104\u013b\114\176\225\112\001\002\000\004\222\u0212\001" +
    "\ufe7b\000\004\206\u0219\001\ufe7d\000\002\001\ufe81\000\156" +
    "\004\161\006\120\007\011\010\070\011\214\012\057\013" +
    "\066\017\142\033\115\044\250\060\164\061\032\071\166" +
    "\072\015\073\022\074\047\075\051\076\147\077\006\100" +
    "\036\107\247\110\143\111\043\112\073\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\151\345\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\uff73\000\004\206\u0214\001\ufe7c\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\ufe67\000\004\207\u0216\001\002\000\002" +
    "\001\ufe7e\000\004\223\u0218\001\002\000\002\001\ufe80\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\ufe67\000\004\207\u021b\001\002\000\002" +
    "\001\ufe7f\000\002\001\uff2d\000\004\067\u020e\001\uff29\000" +
    "\024\011\214\013\066\072\u0171\107\u0176\112\u0170\114\062" +
    "\206\u0172\214\213\225\112\001\002\000\002\001\ufe39\000" +
    "\006\122\u0222\223\u0221\001\002\000\002\001\ufe40\000\024" +
    "\011\214\013\066\072\u0171\107\u0176\112\u0170\114\062\206" +
    "\u0172\214\213\225\112\001\002\000\002\001\ufe38\000\004" +
    "\032\u010c\001\ufefd\000\156\004\161\006\120\007\011\010" +
    "\070\011\214\012\057\013\066\017\142\033\115\044\250" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\107\247\110\143\111\043" +
    "\112\073\114\062\115\031\116\077\117\053\120\140\121" +
    "\117\126\071\164\116\165\075\171\162\172\016\174\056" +
    "\175\167\176\030\177\145\200\041\201\141\202\102\203" +
    "\150\204\076\205\037\206\055\210\105\214\246\222\165" +
    "\223\u0228\225\112\226\124\227\064\233\130\001\002\000" +
    "\002\001\ufee4\000\070\032\u010c\123\u0104\124\u0113\125\376" +
    "\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\223\u0229\001\002\000\002\001\ufebc" +
    "\000\002\001\ufebb\000\014\011\u022b\013\066\104\u013b\114" +
    "\176\225\112\001\002\000\004\222\ufe33\001\ufe35\000\002" +
    "\001\uffd8\000\040\127\357\130\362\131\360\132\371\133" +
    "\363\134\370\135\365\136\367\137\361\140\356\141\364" +
    "\142\366\144\u0230\174\ufe86\175\ufe86\001\ufe88\000\004\144" +
    "\u022f\001\ufe89\000\002\001\uffd7\000\002\001\uffd6\000\002" +
    "\001\uffd5\000\004\127\u0233\001\002\000\056\006\120\007" +
    "\011\010\070\011\214\017\142\072\207\073\022\074\047" +
    "\075\051\076\147\077\006\100\202\107\216\110\143\111" +
    "\043\112\206\114\062\164\215\165\204\206\210\214\213" +
    "\233\130\001\002\000\002\001\uff34\000\002\001\ufee6\000" +
    "\002\001\ufeea\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\070\032\u010c" +
    "\123\u0104\124\u0113\125\376\143\u0101\145\375\146\u010d\147" +
    "\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105" +
    "\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164" +
    "\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\223\u0239" +
    "\001\002\000\006\104\u023a\224\u023c\001\002\000\004\144" +
    "\u024c\001\uff8f\000\002\001\uffdd\000\004\144\u023e\001\uff8f" +
    "\000\010\036\u024a\037\u0241\040\u0242\001\002\000\002\001" +
    "\uff8f\000\010\036\u0240\037\u0241\040\u0242\001\002\000\002" +
    "\001\uff90\000\154\004\161\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\017\142\033\115\044\250\060\164" +
    "\061\032\071\166\072\015\073\022\074\047\075\051\076" +
    "\147\077\006\100\036\107\247\110\143\111\043\112\073" +
    "\114\062\115\031\116\077\117\053\120\140\121\117\126" +
    "\071\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\246\222\165\225\112" +
    "\226\124\227\064\233\130\001\002\000\006\144\u0245\224" +
    "\u0244\001\002\000\002\001\uffea\000\002\001\uff8c\000\002" +
    "\001\uff8b\000\246\003\131\004\161\005\172\006\120\007" +
    "\011\010\070\011\035\012\057\013\066\015\104\017\142" +
    "\020\136\021\132\022\046\024\034\026\113\030\173\033" +
    "\115\035\144\041\061\042\135\043\101\044\121\046\153" +
    "\047\013\050\042\052\170\054\274\055\012\057\106\060" +
    "\164\061\032\062\275\063\033\064\157\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\104" +
    "\072\107\247\110\143\111\043\112\073\113\026\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\144" +
    "\010\164\116\165\075\171\162\172\016\174\056\175\167" +
    "\176\030\177\145\200\041\201\141\202\102\203\150\204" +
    "\076\205\037\206\055\210\105\214\044\215\067\216\021" +
    "\222\165\225\112\226\124\227\064\231\133\233\130\001" +
    "\uff8d\000\072\032\u010c\123\u0104\124\u0113\125\376\143\u0101" +
    "\144\u0245\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\224\u0244\001\002\000\002\001\uffea" +
    "\000\246\003\131\004\161\005\172\006\120\007\011\010" +
    "\070\011\035\012\057\013\066\015\104\017\142\020\136" +
    "\021\132\022\046\024\034\026\113\030\173\033\115\035" +
    "\144\041\061\042\135\043\101\044\121\046\153\047\013" +
    "\050\042\052\170\054\274\055\012\057\106\060\164\061" +
    "\032\062\275\063\033\064\157\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\104\072\107" +
    "\247\110\143\111\043\112\073\113\026\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\144\010\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\044\215\067\216\021\222\165" +
    "\225\112\226\124\227\064\231\133\233\130\001\uff8e\000" +
    "\002\001\uff91\000\010\037\u0241\040\u0242\105\u024f\001\002" +
    "\000\002\001\uff8f\000\010\037\u0241\040\u0242\105\u024e\001" +
    "\002\000\002\001\uff92\000\002\001\uff93\000\004\206\u0191" +
    "\001\ufeb1\000\002\001\ufee8\000\066\032\u010c\123\u0104\124" +
    "\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106" +
    "\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157" +
    "\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103" +
    "\166\u010a\167\u0109\170\374\173\u0100\001\ufe3b\000\066\032" +
    "\u010c\123\u0104\124\u0113\125\376\143\u0101\145\375\146\u010d" +
    "\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155" +
    "\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107" +
    "\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001" +
    "\uff32\000\006\122\u0255\144\u0256\001\002\000\154\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\002\000\002\001\uffd2\000\066\032\u010c\123\u0104\124" +
    "\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106" +
    "\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157" +
    "\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103" +
    "\166\u010a\167\u0109\170\374\173\u0100\001\uff33\000\002\001" +
    "\uffda\000\070\032\u010c\123\u0104\124\u0113\125\376\143\u0101" +
    "\144\u025a\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\002\000\002\001\uffd9\000\004" +
    "\022\u025c\001\002\000\004\222\u025d\001\002\000\154\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\246\222\165\225\112\226\124\227\064\233" +
    "\130\001\002\000\070\032\u010c\123\u0104\124\u0113\125\376" +
    "\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\223\u025f\001\002\000\004\144\u0260" +
    "\001\002\000\002\001\uffdf\000\004\011\u0263\001\002\000" +
    "\002\001\ufff2\000\004\127\u0264\001\002\000\056\006\120" +
    "\007\011\010\070\011\214\017\142\072\207\073\022\074" +
    "\047\075\051\076\147\077\006\100\202\107\216\110\143" +
    "\111\043\112\206\114\062\164\215\165\204\206\210\214" +
    "\213\233\130\001\002\000\002\001\uff35\000\004\065\u0268" +
    "\001\uffa9\000\004\104\u026d\001\002\000\012\011\214\107" +
    "\261\112\264\114\062\001\002\000\004\122\u026b\001\uffa8" +
    "\000\002\001\uffa5\000\012\011\214\107\261\112\264\114" +
    "\062\001\002\000\002\001\uffa4\000\002\001\uff62\000\030" +
    "\045\151\054\u027c\056\u027f\105\u0279\113\u0278\214\u027b\215" +
    "\u0272\216\u0273\217\u0276\220\u0271\221\u027a\001\uff43\000\004" +
    "\044\u02ab\001\002\000\002\001\uff5d\000\002\001\uff3e\000" +
    "\002\001\uff3b\000\002\001\uff3a\000\002\001\uff63\000\020" +
    "\044\uff42\214\u027b\215\u0272\216\u0273\217\u0276\220\u0271\221" +
    "\u027a\001\uff45\000\002\001\uff3d\000\002\001\uff41\000\232" +
    "\003\131\004\161\005\172\006\120\007\011\010\070\011" +
    "\214\012\057\013\066\015\104\017\142\020\136\021\132" +
    "\022\046\024\034\026\113\030\173\033\115\035\144\041" +
    "\061\042\135\043\101\044\250\046\153\047\013\050\042" +
    "\052\170\054\274\055\012\057\106\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\104\072\107\247\110\143\111\043\112\073\113" +
    "\026\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\144\010\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\044\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\002" +
    "\001\uffb1\000\002\001\uff3f\000\002\001\uff3c\000\012\011" +
    "\214\107\261\112\264\114\062\001\002\000\004\013\u0281" +
    "\001\002\000\006\122\u0261\144\u0280\001\002\000\002\001" +
    "\uff44\000\002\001\uff60\000\004\127\u0288\001\uff37\000\006" +
    "\122\u0283\144\u0284\001\002\000\004\013\u0285\001\002\000" +
    "\002\001\uff61\000\004\127\u0286\001\uff39\000\056\006\120" +
    "\007\011\010\070\011\214\017\142\072\207\073\022\074" +
    "\047\075\051\076\147\077\006\100\202\107\216\110\143" +
    "\111\043\112\206\114\062\164\215\165\204\206\210\214" +
    "\213\233\130\001\002\000\002\001\uff38\000\056\006\120" +
    "\007\011\010\070\011\214\017\142\072\207\073\022\074" +
    "\047\075\051\076\147\077\006\100\202\107\216\110\143" +
    "\111\043\112\206\114\062\164\215\165\204\206\210\214" +
    "\213\233\130\001\002\000\002\001\uff36\000\010\104\u028d" +
    "\122\u028c\144\u028f\001\002\000\002\001\uff5b\000\012\011" +
    "\214\107\261\112\264\114\062\001\002\000\012\011\u0298" +
    "\107\261\112\264\114\062\001\uff57\000\002\001\uff5c\000" +
    "\002\001\uff59\000\004\034\u02a4\001\002\000\004\144\u02a3" +
    "\001\002\000\012\011\u0298\107\261\112\264\114\062\001" +
    "\uff56\000\004\105\u02a1\001\002\000\004\230\u029c\001\uff4d" +
    "\000\004\106\u029a\001\002\000\002\001\uff55\000\004\144" +
    "\u0299\001\002\000\004\034\uff4e\001\uffff\000\002\001\uff53" +
    "\000\004\011\u029b\001\002\000\002\001\uff4c\000\012\011" +
    "\214\107\261\112\264\114\062\001\002\000\004\122\u029f" +
    "\001\uff51\000\002\001\uff50\000\012\011\214\107\261\112" +
    "\264\114\062\001\002\000\002\001\uff4f\000\002\001\uff58" +
    "\000\002\001\uff54\000\002\001\uff52\000\016\214\u027b\215" +
    "\u0272\216\u0273\217\u0276\220\u0271\221\u027a\001\uff49\000\004" +
    "\011\u02a7\001\002\000\004\144\uff4a\001\uff48\000\002\001" +
    "\uff4b\000\002\001\uff5a\000\002\001\uff5e\000\002\001\uff40" +
    "\000\004\151\251\001\uffb5\000\006\011\200\114\176\001" +
    "\002\000\004\222\u02ae\001\002\000\020\011\214\072\254" +
    "\107\261\112\264\114\062\223\uff7f\232\260\001\uff78\000" +
    "\004\223\u02b0\001\002\000\006\104\u02b2\144\u02b3\001\002" +
    "\000\002\001\uff5f\000\002\001\uffea\000\002\001\uff47\000" +
    "\250\003\131\004\161\005\172\006\120\007\011\010\070" +
    "\011\035\012\057\013\066\015\104\017\142\020\136\021" +
    "\132\022\046\024\034\026\113\030\173\033\115\035\144" +
    "\041\061\042\135\043\101\044\121\046\153\047\013\050" +
    "\042\052\170\054\274\055\012\057\106\060\164\061\032" +
    "\062\275\063\033\064\157\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\104\072\105\u02b5" +
    "\107\247\110\143\111\043\112\073\113\026\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\144\010" +
    "\164\116\165\075\171\162\172\016\174\056\175\167\176" +
    "\030\177\145\200\041\201\141\202\102\203\150\204\076" +
    "\205\037\206\055\210\105\214\044\215\067\216\021\222" +
    "\165\225\112\226\124\227\064\231\133\233\130\001\002" +
    "\000\002\001\uff46\000\006\067\u02ca\206\u02c9\001\ufe49\000" +
    "\014\013\066\016\u02c8\102\u02ba\103\u02b9\226\u02c7\001\002" +
    "\000\002\001\ufe4b\000\024\011\214\013\066\072\u0171\107" +
    "\u0176\112\u0170\114\062\206\u0172\214\213\225\112\001\002" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\u02be\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\002\000\010\013\066\102\u02ba\103" +
    "\u02b9\001\002\000\002\001\ufe4a\000\070\032\u010c\105\u02c3" +
    "\123\u0104\124\u0113\125\376\143\u0101\145\375\146\u010d\147" +
    "\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105" +
    "\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164" +
    "\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\001\002" +
    "\000\004\206\u02bf\001\ufe9a\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\070\032\u010c\123\u0104\124\u0113\125\376\143\u0101\145\375" +
    "\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154" +
    "\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\207\u02c1\001\002\000\004\105\u02c2\001\002\000\002" +
    "\001\ufe45\000\002\001\ufe46\000\004\105\u02c5\001\002\000" +
    "\002\001\ufe44\000\002\001\ufe4d\000\002\001\ufe94\000\002" +
    "\001\ufe4c\000\012\011\200\013\066\014\u02cf\114\176\001" +
    "\002\000\006\011\200\114\176\001\002\000\002\001\ufe47" +
    "\000\002\001\ufe41\000\004\207\u02d0\001\002\000\002\001" +
    "\ufe43\000\002\001\ufe42\000\002\001\ufe48\000\010\011\200" +
    "\114\176\222\253\001\002\000\004\222\u02d3\001\002\000" +
    "\020\011\214\072\254\107\261\112\264\114\062\223\uff7f" +
    "\232\260\001\uff78\000\004\223\u02d5\001\002\000\004\104" +
    "\u02d6\001\002\000\002\001\uffea\000\250\003\131\004\161" +
    "\005\172\006\120\007\011\010\070\011\035\012\057\013" +
    "\066\015\104\017\142\020\136\021\132\022\046\024\034" +
    "\026\113\030\173\033\115\035\144\041\061\042\135\043" +
    "\101\044\121\046\153\047\013\050\042\052\170\054\274" +
    "\055\012\057\106\060\164\061\032\062\275\063\033\064" +
    "\157\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\104\072\105\u02d8\107\247\110\143\111" +
    "\043\112\073\113\026\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\144\010\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\044\215\067\216\021\222\165\225\112\226\124" +
    "\227\064\231\133\233\130\001\002\000\002\001\uffb3\000" +
    "\066\032\u010c\123\u0104\124\u0113\125\376\143\u0101\145\375" +
    "\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154" +
    "\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\ufe3a\000\012\032\u010c\166\u010a\167\u0109\170\374" +
    "\001\ufeff\000\002\001\uff1f\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\040\034\uffa2\127\357\130\362\131\360\132\371\133\363" +
    "\134\370\135\365\136\367\137\361\140\356\141\364\142" +
    "\366\174\ufe86\175\ufe86\001\ufe88\000\004\034\uffa1\001\ufe89" +
    "\000\004\034\u02e0\001\002\000\030\011\214\013\066\071" +
    "\u01fa\072\u0171\107\u0176\112\u0170\114\062\151\u02e5\206\u0172" +
    "\214\213\225\112\001\002\000\002\001\uff9e\000\004\070" +
    "\u02f2\001\uff9f\000\004\223\u02f0\001\002\000\002\001\uff9d" +
    "\000\024\011\214\013\066\072\u0171\107\u0176\112\u0170\114" +
    "\062\206\u0172\214\213\225\112\001\002\000\030\011\214" +
    "\013\066\071\u01fa\072\u0171\107\u0176\112\u0170\114\062\151" +
    "\u02e5\206\u0172\214\213\225\112\001\002\000\002\001\uff9f" +
    "\000\004\223\u02e9\001\002\000\234\003\131\004\161\005" +
    "\172\006\120\007\011\010\070\011\035\012\057\013\066" +
    "\015\104\017\142\020\136\021\132\022\046\024\034\026" +
    "\113\030\173\033\115\035\144\041\061\042\135\043\101" +
    "\044\250\046\153\047\013\050\042\052\170\054\274\055" +
    "\012\057\106\060\164\061\032\071\166\072\015\073\022" +
    "\074\047\075\051\076\147\077\006\100\036\104\072\107" +
    "\247\110\143\111\043\112\073\113\026\114\062\115\031" +
    "\116\077\117\053\120\140\121\117\126\071\144\010\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\044\222\165\224\u02ea\225\112" +
    "\226\124\227\064\233\130\001\002\000\002\001\uffea\000" +
    "\002\001\uff99\000\002\001\uffcc\000\250\003\131\004\161" +
    "\005\172\006\120\007\011\010\070\011\035\012\057\013" +
    "\066\015\104\017\142\020\136\021\132\022\046\024\034" +
    "\026\113\027\u02ee\030\173\033\115\035\144\041\061\042" +
    "\135\043\101\044\121\046\153\047\013\050\042\052\170" +
    "\054\274\055\012\057\106\060\164\061\032\062\275\063" +
    "\033\064\157\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\104\072\107\247\110\143\111" +
    "\043\112\073\113\026\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\144\010\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\044\215\067\216\021\222\165\225\112\226\124" +
    "\227\064\231\133\233\130\001\002\000\002\001\uff98\000" +
    "\002\001\uff9c\000\234\003\131\004\161\005\172\006\120" +
    "\007\011\010\070\011\035\012\057\013\066\015\104\017" +
    "\142\020\136\021\132\022\046\024\034\026\113\030\173" +
    "\033\115\035\144\041\061\042\135\043\101\044\250\046" +
    "\153\047\013\050\042\052\170\054\274\055\012\057\106" +
    "\060\164\061\032\071\166\072\015\073\022\074\047\075" +
    "\051\076\147\077\006\100\036\104\072\107\247\110\143" +
    "\111\043\112\073\113\026\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\144\010\164\116\165\075" +
    "\171\162\172\016\174\056\175\167\176\030\177\145\200" +
    "\041\201\141\202\102\203\150\204\076\205\037\206\055" +
    "\210\105\214\044\222\165\224\u02ea\225\112\226\124\227" +
    "\064\233\130\001\002\000\002\001\uffcd\000\002\001\uffa0" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\ufe67\000\004\207\u02f5\001\002\000" +
    "\002\001\ufe75\000\002\001\uff13\000\002\001\uff11\000\002" +
    "\001\ufffb\000\010\104\u02fa\112\220\144\u02fb\001\002\000" +
    "\002\001\ufffb\000\002\001\ufff6\000\252\003\131\004\161" +
    "\005\172\006\120\007\011\010\070\011\035\012\057\013" +
    "\066\015\104\017\142\020\136\021\132\022\046\024\034" +
    "\026\113\030\173\033\115\035\144\041\061\042\135\043" +
    "\101\044\121\045\151\046\153\047\013\050\042\052\170" +
    "\054\027\055\012\057\106\060\164\061\032\062\063\063" +
    "\033\064\157\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\104\072\105\u02fd\107\107\110" +
    "\143\111\043\112\073\113\026\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\144\010\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\044\215\067\216\021\222\165\225\112" +
    "\226\124\227\064\231\133\233\130\001\002\000\002\001" +
    "\ufff5\000\252\003\131\004\161\005\172\006\120\007\011" +
    "\010\070\011\035\012\057\013\066\015\104\017\142\020" +
    "\136\021\132\022\046\024\034\026\113\030\173\033\115" +
    "\035\144\041\061\042\135\043\101\044\121\045\151\046" +
    "\153\047\013\050\042\052\170\054\027\055\012\057\106" +
    "\060\164\061\032\062\063\063\033\064\157\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\104\072\105\u02ff\107\107\110\143\111\043\112\073\113" +
    "\026\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\144\010\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\044\215" +
    "\067\216\021\222\165\225\112\226\124\227\064\231\133" +
    "\233\130\001\002\000\002\001\ufff4\000\024\011\214\013" +
    "\066\072\u0171\107\u0176\112\u0170\114\062\206\u0172\214\213" +
    "\225\112\001\002\000\002\001\uffbc\000\002\001\uffba\000" +
    "\006\122\u0305\223\u0304\001\002\000\004\144\u0307\001\002" +
    "\000\024\011\214\013\066\072\u0171\107\u0176\112\u0170\114" +
    "\062\206\u0172\214\213\225\112\001\002\000\002\001\uffbb" +
    "\000\002\001\uffce\000\004\222\u017f\001\ufeb7\000\002\001" +
    "\uff24\000\002\001\ufee7\000\004\144\u030c\001\002\000\002" +
    "\001\uffc7\000\010\104\u012e\206\u012f\222\ufe79\001\ufe6e\000" +
    "\066\032\u010c\123\u0104\124\u0113\125\376\143\u0101\145\375" +
    "\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154" +
    "\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\ufe3d\000\002\001\ufee5\000\012\032\u010c\166\u010a" +
    "\167\u0109\170\374\001\ufefe\000\010\106\ufec8\112\220\222" +
    "\u01a8\001\ufe96\000\250\003\131\004\161\005\172\006\120" +
    "\007\011\010\070\011\035\012\057\013\066\015\104\017" +
    "\142\020\136\021\132\022\046\024\034\026\113\030\173" +
    "\033\115\035\144\041\061\042\135\043\101\044\121\046" +
    "\153\047\013\050\042\052\170\054\274\055\012\057\106" +
    "\060\164\061\032\062\275\063\033\064\157\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\104\072\105\u0313\107\247\110\143\111\043\112\073\113" +
    "\026\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\144\010\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\044\215" +
    "\067\216\021\222\165\225\112\226\124\227\064\231\133" +
    "\233\130\001\002\000\002\001\uffe3\000\060\032\u010c\143" +
    "\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112" +
    "\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161" +
    "\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109" +
    "\170\374\173\u0100\001\ufede\000\002\001\uffaf\000\016\011" +
    "\u0318\013\066\063\u0317\104\u013b\114\176\225\112\001\002" +
    "\000\002\001\ufe36\000\004\222\ufe33\001\ufe37\000\004\227" +
    "\u031c\001\002\000\012\013\066\016\u02c8\102\u02ba\103\u02b9" +
    "\001\ufeb8\000\010\013\066\102\u02ba\103\u02b9\001\ufeb9\000" +
    "\002\001\ufedf\000\004\223\u031e\001\002\000\004\144\u031f" +
    "\001\002\000\002\001\ufff7\000\002\001\uffdc\000\070\032" +
    "\u010c\123\u0104\124\u0113\125\376\143\u0101\144\u0322\145\375" +
    "\146\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154" +
    "\373\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b" +
    "\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173" +
    "\u0100\001\002\000\002\001\uffdb\000\002\001\uff12\000\004" +
    "\207\u0325\001\002\000\004\206\243\001\ufee0\000\014\011" +
    "\200\013\066\104\u013b\114\176\225\112\001\002\000\004" +
    "\222\u0212\001\ufe7b\000\002\001\ufe82\000\004\067\u020e\001" +
    "\ufe85\000\002\001\ufe83\000\154\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\002\000\070" +
    "\032\u010c\123\u0104\124\u0113\125\376\143\u0101\145\375\146" +
    "\u010d\147\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373" +
    "\155\u0105\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163" +
    "\u0107\164\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100" +
    "\223\u032d\001\002\000\002\001\ufe3c\000\004\065\u032f\001" +
    "\uffac\000\012\011\214\107\261\112\264\114\062\001\002" +
    "\000\004\066\u0332\001\uffa7\000\004\104\u0334\001\002\000" +
    "\012\011\214\107\261\112\264\114\062\001\002\000\004" +
    "\122\u026b\001\uffa6\000\002\001\uff62\000\030\045\151\054" +
    "\u027c\056\u027f\105\u0336\113\u0278\214\u027b\215\u0272\216\u0273" +
    "\217\u0276\220\u0271\221\u027a\001\uff43\000\002\001\uffb2\000" +
    "\002\001\uffab\000\154\004\161\006\120\007\011\010\070" +
    "\011\214\012\057\013\066\017\142\033\115\044\250\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\107\247\110\143\111\043\112" +
    "\073\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\164\116\165\075\171\162\172\016\174\056\175" +
    "\167\176\030\177\145\200\041\201\141\202\102\203\150" +
    "\204\076\205\037\206\055\210\105\214\246\222\165\225" +
    "\112\226\124\227\064\233\130\001\002\000\070\032\u010c" +
    "\123\u0104\124\u0113\125\376\143\u0101\145\375\146\u010d\147" +
    "\377\150\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105" +
    "\156\u0111\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164" +
    "\u0114\165\u0103\166\u010a\167\u0109\170\374\173\u0100\223\u033a" +
    "\001\002\000\234\003\131\004\161\005\172\006\120\007" +
    "\011\010\070\011\035\012\057\013\066\015\104\017\142" +
    "\020\136\021\132\022\046\024\034\026\113\030\173\033" +
    "\115\035\144\041\061\042\135\043\101\044\250\046\153" +
    "\047\013\050\042\052\170\054\274\055\012\057\106\060" +
    "\164\061\032\071\166\072\015\073\022\074\047\075\051" +
    "\076\147\077\006\100\036\104\072\107\247\110\143\111" +
    "\043\112\073\113\026\114\062\115\031\116\077\117\053" +
    "\120\140\121\117\126\071\144\010\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\044\222\165\224\u033b\225\112\226\124\227\064" +
    "\233\130\001\002\000\002\001\uffea\000\002\001\uffe0\000" +
    "\002\001\uff8a\000\250\003\131\004\161\005\172\006\120" +
    "\007\011\010\070\011\035\012\057\013\066\015\104\017" +
    "\142\020\136\021\132\022\046\023\u033f\024\034\026\113" +
    "\030\173\033\115\035\144\041\061\042\135\043\101\044" +
    "\121\046\153\047\013\050\042\052\170\054\274\055\012" +
    "\057\106\060\164\061\032\062\275\063\033\064\157\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\104\072\107\247\110\143\111\043\112\073\113" +
    "\026\114\062\115\031\116\077\117\053\120\140\121\117" +
    "\126\071\144\010\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\044\215" +
    "\067\216\021\222\165\225\112\226\124\227\064\231\133" +
    "\233\130\001\002\000\002\001\uff89\000\154\004\161\006" +
    "\120\007\011\010\070\011\214\012\057\013\066\017\142" +
    "\033\115\044\250\060\164\061\032\071\166\072\015\073" +
    "\022\074\047\075\051\076\147\077\006\100\036\107\247" +
    "\110\143\111\043\112\073\114\062\115\031\116\077\117" +
    "\053\120\140\121\117\126\071\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\246\222\165\225\112\226\124\227\064\233\130\001" +
    "\ufe67\000\004\207\u0342\001\002\000\002\001\ufe74\000\004" +
    "\127\u034a\001\uff65\000\006\122\u0345\144\u0346\001\002\000" +
    "\004\013\u0347\001\002\000\002\001\uffd3\000\004\127\u0348" +
    "\001\uff67\000\056\006\120\007\011\010\070\011\214\017" +
    "\142\072\207\073\022\074\047\075\051\076\147\077\006" +
    "\100\202\107\216\110\143\111\043\112\206\114\062\164" +
    "\215\165\204\206\210\214\213\233\130\001\002\000\002" +
    "\001\uff66\000\056\006\120\007\011\010\070\011\214\017" +
    "\142\072\207\073\022\074\047\075\051\076\147\077\006" +
    "\100\202\107\216\110\143\111\043\112\206\114\062\164" +
    "\215\165\204\206\210\214\213\233\130\001\002\000\002" +
    "\001\uff64\000\002\001\uffea\000\250\003\131\004\161\005" +
    "\172\006\120\007\011\010\070\011\035\012\057\013\066" +
    "\015\104\017\142\020\136\021\132\022\046\024\034\026" +
    "\113\030\173\033\115\035\144\041\061\042\135\043\101" +
    "\044\121\046\153\047\013\050\042\052\170\054\274\055" +
    "\012\057\106\060\164\061\032\062\275\063\033\064\157" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\104\072\105\u034e\107\247\110\143\111\043" +
    "\112\073\113\026\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\144\010\164\116\165\075\171\162" +
    "\172\016\174\056\175\167\176\030\177\145\200\041\201" +
    "\141\202\102\203\150\204\076\205\037\206\055\210\105" +
    "\214\044\215\067\216\021\222\165\225\112\226\124\227" +
    "\064\231\133\233\130\001\002\000\004\051\u034f\001\uffc3" +
    "\000\004\222\u035a\001\002\000\002\001\uffc2\000\004\053" +
    "\u0356\001\uffbe\000\004\051\u034f\001\uffc4\000\002\001\uffc1" +
    "\000\002\001\uffbf\000\002\001\uffc9\000\004\104\u0357\001" +
    "\002\000\002\001\uffea\000\250\003\131\004\161\005\172" +
    "\006\120\007\011\010\070\011\035\012\057\013\066\015" +
    "\104\017\142\020\136\021\132\022\046\024\034\026\113" +
    "\030\173\033\115\035\144\041\061\042\135\043\101\044" +
    "\121\046\153\047\013\050\042\052\170\054\274\055\012" +
    "\057\106\060\164\061\032\062\275\063\033\064\157\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\104\072\105\u0359\107\247\110\143\111\043\112" +
    "\073\113\026\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\144\010\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\044\215\067\216\021\222\165\225\112\226\124\227\064" +
    "\231\133\233\130\001\002\000\002\001\uffbd\000\012\011" +
    "\214\107\261\112\264\114\062\001\002\000\004\013\u035c" +
    "\001\002\000\004\223\u035d\001\002\000\004\104\u035e\001" +
    "\002\000\002\001\uffea\000\250\003\131\004\161\005\172" +
    "\006\120\007\011\010\070\011\035\012\057\013\066\015" +
    "\104\017\142\020\136\021\132\022\046\024\034\026\113" +
    "\030\173\033\115\035\144\041\061\042\135\043\101\044" +
    "\121\046\153\047\013\050\042\052\170\054\274\055\012" +
    "\057\106\060\164\061\032\062\275\063\033\064\157\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\104\072\105\u0360\107\247\110\143\111\043\112" +
    "\073\113\026\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\144\010\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\044\215\067\216\021\222\165\225\112\226\124\227\064" +
    "\231\133\233\130\001\002\000\002\001\uffc0\000\002\001" +
    "\ufee9\000\002\001\ufee3\000\014\013\066\016\u02c8\101\u0365" +
    "\102\u02ba\103\u02b9\001\002\000\012\013\066\101\u01ca\102" +
    "\u02ba\103\u02b9\001\002\000\002\001\ufe93\000\002\001\uffe4" +
    "\000\154\004\161\006\120\007\011\010\070\011\214\012" +
    "\057\013\066\017\142\033\115\044\250\060\164\061\032" +
    "\071\166\072\015\073\022\074\047\075\051\076\147\077" +
    "\006\100\036\107\247\110\143\111\043\112\073\114\062" +
    "\115\031\116\077\117\053\120\140\121\117\126\071\164" +
    "\116\165\075\171\162\172\016\174\056\175\167\176\030" +
    "\177\145\200\041\201\141\202\102\203\150\204\076\205" +
    "\037\206\055\210\105\214\246\222\165\225\112\226\124" +
    "\227\064\233\130\001\uff31\000\066\032\u010c\123\u0104\124" +
    "\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150\u0106" +
    "\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111\157" +
    "\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103" +
    "\166\u010a\167\u0109\170\374\173\u0100\001\uff2e\000\004\144" +
    "\u036d\001\002\000\004\122\u036b\001\uff30\000\154\004\161" +
    "\006\120\007\011\010\070\011\214\012\057\013\066\017" +
    "\142\033\115\044\250\060\164\061\032\071\166\072\015" +
    "\073\022\074\047\075\051\076\147\077\006\100\036\107" +
    "\247\110\143\111\043\112\073\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\164\116\165\075\171" +
    "\162\172\016\174\056\175\167\176\030\177\145\200\041" +
    "\201\141\202\102\203\150\204\076\205\037\206\055\210" +
    "\105\214\246\222\165\225\112\226\124\227\064\233\130" +
    "\001\002\000\066\032\u010c\123\u0104\124\u0113\125\376\143" +
    "\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152\u0112" +
    "\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102\161" +
    "\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167\u0109" +
    "\170\374\173\u0100\001\uff2f\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\uff31\000" +
    "\004\144\u036f\001\002\000\154\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\164\116\165\075\171\162\172\016\174" +
    "\056\175\167\176\030\177\145\200\041\201\141\202\102" +
    "\203\150\204\076\205\037\206\055\210\105\214\246\222" +
    "\165\225\112\226\124\227\064\233\130\001\uff31\000\004" +
    "\223\u0371\001\002\000\234\003\131\004\161\005\172\006" +
    "\120\007\011\010\070\011\035\012\057\013\066\015\104" +
    "\017\142\020\136\021\132\022\046\024\034\026\113\030" +
    "\173\033\115\035\144\041\061\042\135\043\101\044\250" +
    "\046\153\047\013\050\042\052\170\054\274\055\012\057" +
    "\106\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\104\072\107\247\110" +
    "\143\111\043\112\073\113\026\114\062\115\031\116\077" +
    "\117\053\120\140\121\117\126\071\144\010\164\116\165" +
    "\075\171\162\172\016\174\056\175\167\176\030\177\145" +
    "\200\041\201\141\202\102\203\150\204\076\205\037\206" +
    "\055\210\105\214\044\222\165\224\u0373\225\112\226\124" +
    "\227\064\233\130\001\002\000\002\001\uffde\000\002\001" +
    "\uffea\000\002\001\uff9b\000\250\003\131\004\161\005\172" +
    "\006\120\007\011\010\070\011\035\012\057\013\066\015" +
    "\104\017\142\020\136\021\132\022\046\024\034\025\u0376" +
    "\026\113\030\173\033\115\035\144\041\061\042\135\043" +
    "\101\044\121\046\153\047\013\050\042\052\170\054\274" +
    "\055\012\057\106\060\164\061\032\062\275\063\033\064" +
    "\157\071\166\072\015\073\022\074\047\075\051\076\147" +
    "\077\006\100\036\104\072\107\247\110\143\111\043\112" +
    "\073\113\026\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\144\010\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\044\215\067\216\021\222\165\225\112\226\124\227\064" +
    "\231\133\233\130\001\002\000\002\001\uff9a\000\024\011" +
    "\214\013\066\072\u0171\107\u0176\112\u0170\114\062\206\u0172" +
    "\214\213\225\112\001\002\000\004\223\u0379\001\002\000" +
    "\002\001\ufe3f\000\066\032\u010c\123\u0104\124\u0113\125\376" +
    "\143\u0101\145\375\146\u010d\147\377\150\u0106\151\u010e\152" +
    "\u0112\153\u0108\154\373\155\u0105\156\u0111\157\u010f\160\u0102" +
    "\161\u0110\162\u010b\163\u0107\164\u0114\165\u0103\166\u010a\167" +
    "\u0109\170\374\173\u0100\001\ufe3e\000\002\001\ufeeb\000\006" +
    "\034\u0386\112\220\001\uffef\000\002\001\ufff0\000\006\011" +
    "\214\114\062\001\002\000\006\122\u0380\144\u0381\001\002" +
    "\000\010\011\214\112\u037e\114\062\001\002\000\002\001" +
    "\ufff3\000\002\001\ufff1\000\006\034\u0384\112\220\001\uffed" +
    "\000\004\011\u0385\001\002\000\002\001\uffec\000\004\011" +
    "\u0387\001\002\000\002\001\uffee\000\002\001\uffc5\000\002" +
    "\001\uffae\000\002\001\uffd0\000\002\001\ufefc\000\156\004" +
    "\161\006\120\007\011\010\070\011\214\012\057\013\066" +
    "\017\142\033\115\044\250\060\164\061\032\071\166\072" +
    "\015\073\022\074\047\075\051\076\147\077\006\100\036" +
    "\107\247\110\143\111\043\112\073\114\062\115\031\116" +
    "\077\117\053\120\140\121\117\126\071\151\u018b\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\ufe57\000\004\223\u038e\001\002\000\004" +
    "\206\243\001\ufee1\000\004\070\u0392\001\ufe2e\000\044\070" +
    "\ufe31\127\357\130\362\131\360\132\371\133\363\134\370" +
    "\135\365\136\367\137\361\140\356\141\364\142\366\144" +
    "\ufe31\174\ufe86\175\ufe86\223\ufe31\001\ufe88\000\010\070\ufe30" +
    "\144\ufe30\223\ufe30\001\ufe89\000\154\004\161\006\120\007" +
    "\011\010\070\011\214\012\057\013\066\017\142\033\115" +
    "\044\250\060\164\061\032\071\166\072\015\073\022\074" +
    "\047\075\051\076\147\077\006\100\036\107\247\110\143" +
    "\111\043\112\073\114\062\115\031\116\077\117\053\120" +
    "\140\121\117\126\071\164\116\165\075\171\162\172\016" +
    "\174\056\175\167\176\030\177\145\200\041\201\141\202" +
    "\102\203\150\204\076\205\037\206\055\210\105\214\246" +
    "\222\165\225\112\226\124\227\064\233\130\001\002\000" +
    "\002\001\ufe2d\000\006\122\u039d\144\u039e\001\002\000\002" +
    "\001\uff6a\000\026\011\214\013\066\072\u0171\104\u039a\107" +
    "\u0176\112\u0170\114\062\206\u0172\214\213\225\112\001\002" +
    "\000\002\001\uff6b\000\002\001\uff69\000\002\001\ufe88\000" +
    "\154\004\161\006\120\007\011\010\070\011\214\012\057" +
    "\013\066\017\142\033\115\044\250\060\164\061\032\071" +
    "\166\072\015\073\022\074\047\075\051\076\147\077\006" +
    "\100\036\107\247\110\143\111\043\112\073\114\062\115" +
    "\031\116\077\117\053\120\140\121\117\126\071\164\116" +
    "\165\075\171\162\172\016\174\056\175\167\176\030\177" +
    "\145\200\041\201\141\202\102\203\150\204\076\205\037" +
    "\206\055\210\105\214\246\222\165\225\112\226\124\227" +
    "\064\233\130\001\002\000\070\032\u010c\105\u039c\123\u0104" +
    "\124\u0113\125\376\143\u0101\145\375\146\u010d\147\377\150" +
    "\u0106\151\u010e\152\u0112\153\u0108\154\373\155\u0105\156\u0111" +
    "\157\u010f\160\u0102\161\u0110\162\u010b\163\u0107\164\u0114\165" +
    "\u0103\166\u010a\167\u0109\170\374\173\u0100\001\002\000\002" +
    "\001\uff68\000\006\013\u0395\225\u0396\001\002\000\002\001" +
    "\uffd4\000\002\001\uff6c\000\156\004\161\006\120\007\011" +
    "\010\070\011\214\012\057\013\066\017\142\033\115\044" +
    "\250\060\164\061\032\071\166\072\015\073\022\074\047" +
    "\075\051\076\147\077\006\100\036\107\247\110\143\111" +
    "\043\112\073\114\062\115\031\116\077\117\053\120\140" +
    "\121\117\126\071\151\345\164\116\165\075\171\162\172" +
    "\016\174\056\175\167\176\030\177\145\200\041\201\141" +
    "\202\102\203\150\204\076\205\037\206\055\210\105\214" +
    "\246\222\165\225\112\226\124\227\064\233\130\001\uff73" +
    "\000\004\223\u03a2\001\002\000\002\001\ufecc\000\002\001" +
    "\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03a1\000\006\003\003\007\004\001\001\000\002\001" +
    "\001\000\110\004\157\010\170\011\162\014\122\056\153" +
    "\057\044\062\121\064\016\070\017\071\057\072\154\073" +
    "\133\100\077\111\073\113\125\116\064\121\126\130\113" +
    "\131\136\132\024\136\145\137\023\140\051\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\217\151\220\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u0393\046\u0396\001\001\000\064\004\157\056" +
    "\u0390\057\044\062\121\064\016\070\345\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\u038f\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\216\u038e\220\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\157\056\153\057\044" +
    "\062\121\064\016\070\u038a\071\057\072\154\073\133\100" +
    "\077\111\073\116\064\132\024\145\155\147\107\150\006" +
    "\152\022\154\124\156\102\160\037\164\053\205\013\210" +
    "\110\220\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\004\157\014\u0387" +
    "\056\153\057\044\062\121\064\016\070\017\071\057\072" +
    "\154\073\133\100\077\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\217\151\220\047\001\001\000\012" +
    "\004\u037b\005\u037c\006\u037e\017\304\001\001\000\062\004" +
    "\157\056\153\057\044\062\121\064\016\070\u037a\071\057" +
    "\072\154\073\133\100\077\111\073\116\064\132\024\145" +
    "\155\147\107\150\006\152\022\154\124\156\102\160\037" +
    "\164\053\205\013\210\110\220\047\001\001\000\062\004" +
    "\157\056\153\057\044\062\121\064\016\070\u0379\071\057" +
    "\072\154\073\133\100\077\111\073\116\064\132\024\145" +
    "\155\147\107\150\006\152\022\154\124\156\102\160\037" +
    "\164\053\205\013\210\110\220\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\105\u0362\107\u02b7\154\u02b5\001\001\000\062\004" +
    "\157\056\153\057\044\062\121\064\016\070\u0361\071\057" +
    "\072\154\073\133\100\077\111\073\116\064\132\024\145" +
    "\155\147\107\150\006\152\022\154\124\156\102\160\037" +
    "\164\053\205\013\210\110\220\047\001\001\000\002\001" +
    "\001\000\062\004\157\056\153\057\044\062\121\064\016" +
    "\070\u0360\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u0343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\004\157\056" +
    "\153\057\044\062\121\064\016\070\u018b\071\057\072\154" +
    "\073\133\100\077\103\u0323\104\u018c\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\042\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\116\u0172\132\u01f3\147\u0322\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0320\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\105\u0319\106\u0318\107\u02b7\154\u02b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\157\056\153\057\044\062\121\064\016" +
    "\070\u0313\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\004\012\u0311\001\001\000\004\004\u0310\001\001" +
    "\000\002\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u030f\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u030e\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u030d\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\010\071\u030c\073\133\154\124\001" +
    "\001\000\002\001\001\000\062\004\157\056\153\057\044" +
    "\062\121\064\016\070\u0309\071\057\072\154\073\133\100" +
    "\077\111\073\116\064\132\024\145\155\147\107\150\006" +
    "\152\022\154\124\156\102\160\037\164\053\205\013\210" +
    "\110\220\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\u0125\071\u011f\072\u011d\073\133\100\u0123\116" +
    "\u0120\152\022\154\124\155\u0307\157\u011c\160\u0122\001\001" +
    "\000\002\001\001\000\004\004\u02f8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u02da\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u02d9\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u02d8\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\002\001\001\000\004\052\u02d0\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\105\u02b6" +
    "\107\u02b7\154\u02b5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\004\157\011\u025a\014\122\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\217\151\220\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\157\056\153\057\044\062\121\064\016" +
    "\070\u0258\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\064\004\157\053\u0253\056\153\057\044\062\121" +
    "\064\016\070\u0252\071\057\072\154\073\133\100\077\111" +
    "\073\116\064\132\024\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\220" +
    "\047\001\001\000\002\001\001\000\062\004\157\056\153" +
    "\057\044\062\121\064\016\070\u0251\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\062\004\157\056\153" +
    "\057\044\062\121\064\016\070\u0250\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\004\202\u024f\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0235\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\157\056\153\057\044\062\121" +
    "\064\016\070\u0234\071\057\072\154\073\133\100\077\111" +
    "\073\116\064\132\024\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\220" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\157\056\u022d\057\044\062\121\064\016\070\345\071" +
    "\057\072\154\073\133\100\077\111\073\116\064\132\u022c" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\220\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0225\001\001\000\062" +
    "\004\157\056\153\057\044\062\121\064\016\070\u0223\071" +
    "\057\072\154\073\133\100\077\111\073\116\064\132\024" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\220\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\004\157\056\153\057" +
    "\044\062\121\064\016\070\u0203\071\057\072\154\073\133" +
    "\100\077\111\073\116\064\132\024\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\u0202" +
    "\210\110\217\u0204\220\047\001\001\000\002\001\001\000" +
    "\042\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\116\u0172\132\u01f3\147\u01f2\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\062\004\157" +
    "\056\153\057\044\062\121\064\016\070\u01f0\071\057\072" +
    "\154\073\133\100\077\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\174\112" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\216\062\202\063" +
    "\211\116\210\163\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\216\062\202\063\u01c6\116\210\163" +
    "\204\001\001\000\002\001\001\000\004\004\u01c5\001\001" +
    "\000\002\001\001\000\020\004\216\062\202\063\230\065" +
    "\226\067\227\116\210\163\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\216\062\202\063\223\116\210\163\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\234\001\001\000\002\001\001" +
    "\000\014\004\216\062\202\063\232\116\210\163\204\001" +
    "\001\000\002\001\001\000\014\004\216\062\202\063\235" +
    "\116\210\163\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\216\062\202\063\237\116\210\163\204" +
    "\001\001\000\002\001\001\000\004\202\241\001\001\000" +
    "\002\001\001\000\064\004\157\056\153\057\044\062\121" +
    "\064\016\070\243\071\057\072\154\073\133\074\244\100" +
    "\077\111\073\116\064\132\024\145\155\147\107\150\006" +
    "\152\022\154\124\156\102\160\037\164\053\205\013\210" +
    "\110\220\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\254" +
    "\036\264\041\256\042\262\117\261\144\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\324\001\001\000\002" +
    "\001\001\000\004\037\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\271\001\001\000\106\004\157" +
    "\011\300\013\272\014\122\056\153\057\044\062\121\064" +
    "\016\070\017\071\057\072\154\073\133\100\077\111\073" +
    "\113\125\116\064\130\275\131\277\132\024\136\145\137" +
    "\023\140\051\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\217\151\220" +
    "\047\001\001\000\002\001\001\000\004\017\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\326\001\001\000\002\001\001\000\012\004\254\042" +
    "\330\117\261\144\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\216\062\202\063" +
    "\334\116\210\163\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\216\062\202\063\337\116\210\163" +
    "\204\001\001\000\002\001\001\000\004\004\341\001\001" +
    "\000\002\001\001\000\066\004\157\043\343\044\347\056" +
    "\350\057\044\062\121\064\016\070\345\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\346\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\042\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\115\u01b5\116\u0172\132\u019b\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\157\056\354\057\044\062\121\064\016\070\345" +
    "\071\057\072\154\073\133\100\077\111\073\116\064\132" +
    "\353\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\042\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\115\u01b4\116\u0172\132\u019b\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u01b3\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u016d\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u016b\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u016a\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0169\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0168\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0167\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0166\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0165\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0164\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u0163\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\371\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\002\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0162\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0161\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0160\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u015f\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u015e\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u015d\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0158\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0157\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0156\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0155\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0154\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0153\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0152\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0151\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0150\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u014f\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u014e\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\030\004\u0125\071" +
    "\u011f\072\u011d\073\133\100\u0123\116\u0120\152\022\154\124" +
    "\155\u0121\157\u011c\160\u0122\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u011b\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u011a\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0119\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0118\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0117\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0116\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0115\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0114\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\071\u0128\073\133\154\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\004\157\056\153\057\044\062\121\064" +
    "\016\070\u012b\071\057\072\154\073\133\100\077\111\073" +
    "\116\064\132\024\145\155\147\107\150\006\152\022\154" +
    "\124\156\102\160\037\164\053\205\013\210\110\220\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\004" +
    "\157\056\153\057\044\062\121\064\016\070\u0131\071\057" +
    "\072\154\073\133\100\077\111\073\116\064\132\024\145" +
    "\155\147\107\150\006\152\022\154\124\156\102\160\037" +
    "\164\053\205\013\210\110\220\047\001\001\000\064\004" +
    "\157\056\153\057\044\062\121\064\016\070\243\071\057" +
    "\072\154\073\133\074\u012f\100\077\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\071\u013b\073\133\075\u0137\076\u0138\077" +
    "\u0135\100\u0139\112\u0134\150\u0136\154\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\161" +
    "\u0145\001\001\000\002\001\001\000\010\071\u013e\073\133" +
    "\154\124\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u013c\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\157\056\153" +
    "\057\044\062\121\064\016\070\u0143\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\064\004\157\056\153" +
    "\057\044\062\121\064\016\070\243\071\057\072\154\073" +
    "\133\074\u0141\100\077\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\162\u0146\001\001\000\002\001\001\000\024\071\u013b" +
    "\073\133\075\u0148\076\u0138\077\u0135\100\u0139\112\u0134\150" +
    "\u0136\154\124\001\001\000\002\001\001\000\014\071\u013b" +
    "\073\133\100\u0139\150\u014a\154\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\071\u013b\073\133\100\u0139" +
    "\150\u014d\154\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\004\157\056\153\057\044\062\121\064" +
    "\016\070\u015a\071\057\072\154\073\133\100\077\111\073" +
    "\116\064\132\024\145\155\147\107\150\006\152\022\154" +
    "\124\156\102\160\037\164\053\205\013\210\110\220\047" +
    "\001\001\000\002\001\001\000\062\004\157\056\153\057" +
    "\044\062\121\064\016\070\u015c\071\057\072\154\073\133" +
    "\100\077\111\073\116\064\132\024\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\013" +
    "\210\110\220\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\u0176\057\044\071\057" +
    "\072\u016e\073\133\100\077\116\u0172\132\u0173\150\006\152" +
    "\022\154\124\160\037\164\053\210\110\220\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u01a6\001" +
    "\001\000\002\001\001\000\066\004\157\056\153\057\044" +
    "\062\121\064\016\070\u018b\071\057\072\154\073\133\100" +
    "\077\103\u018d\104\u018c\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\u0125\071\u011f\072\u011d\073" +
    "\133\100\u0123\116\u0120\152\022\154\124\155\u017c\157\u011c" +
    "\160\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\004\157\043\u0178\044\347\056\350\057\044\062\121" +
    "\064\016\070\345\071\057\072\154\073\133\100\077\111" +
    "\073\116\064\132\346\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\220" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u017b\001\001\000\002\001\001\000\004\061\u017d\001" +
    "\001\000\002\001\001\000\066\004\157\043\u017f\044\347" +
    "\056\350\057\044\062\121\064\016\070\345\071\057\072" +
    "\154\073\133\100\077\111\073\116\064\132\346\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\071\u013b\073\133\077\u0182\100" +
    "\u0139\112\u0134\150\u0183\154\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\004\157\043\u0185\044\347\056" +
    "\350\057\044\062\121\064\016\070\345\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\346\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\004\157\043\u0188\044\347\056\350" +
    "\057\044\062\121\064\016\070\345\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\346\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\u0176\057\044\071\057\072\u016e\073" +
    "\133\100\077\115\u01a1\116\u0172\132\u019b\150\006\152\022" +
    "\154\124\160\037\164\053\210\110\220\047\001\001\000" +
    "\002\001\001\000\004\066\u0194\001\001\000\002\001\001" +
    "\000\004\202\u018f\001\001\000\002\001\001\000\064\004" +
    "\157\056\153\057\044\062\121\064\016\070\243\071\057" +
    "\072\154\073\133\074\u0191\100\077\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\157\056\153" +
    "\057\044\062\121\064\016\070\u0196\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\002\001\001\000\042" +
    "\004\u0176\057\044\071\057\072\u016e\073\133\100\077\115" +
    "\u019c\116\u0172\132\u019b\150\006\152\022\154\124\160\037" +
    "\164\053\210\110\220\047\001\001\000\002\001\001\000" +
    "\062\004\157\056\153\057\044\062\121\064\016\070\u0199" +
    "\071\057\072\154\073\133\100\077\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\042\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\115\u019a\116\u0172\132\u019b\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\157\056\153\057\044\062\121\064\016\070\u019f" +
    "\071\057\072\154\073\133\100\077\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\042\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\115\u01a0\116\u0172\132\u019b\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\004\157\056" +
    "\153\057\044\062\121\064\016\070\u018b\071\057\072\154" +
    "\073\133\100\077\103\u01a3\104\u018c\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\002\001\001\000\004\202\u01a5\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\004\157\043\u01a8\044\347\056" +
    "\350\057\044\062\121\064\016\070\345\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\346\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\071\u013b\073\133\077\u01ab\100\u0139" +
    "\112\u0134\150\u01ac\154\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\004\157\043\u01ae\044\347\056\350" +
    "\057\044\062\121\064\016\070\345\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\346\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\004\157\043\u01b1\044\347\056\350\057" +
    "\044\062\121\064\016\070\345\071\057\072\154\073\133" +
    "\100\077\111\073\116\064\132\346\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\013" +
    "\210\110\220\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u01b8\001\001\000\002\001" +
    "\001\000\016\004\254\036\u01ba\041\256\042\262\117\261" +
    "\144\255\001\001\000\002\001\001\000\004\037\u01bc\001" +
    "\001\000\002\001\001\000\004\012\u01be\001\001\000\106" +
    "\004\157\011\300\013\272\014\122\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\113\125\116\064\130\275\131\277\132\024\136" +
    "\145\137\023\140\051\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\217" +
    "\151\220\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\216\062\202\063\230\065\u01c2\067\227\116" +
    "\210\163\204\001\001\000\002\001\001\000\004\202\u01c4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\004\157\011\u01d1\014\122\024\u01cf\056\153\057" +
    "\044\062\121\064\016\070\017\071\057\072\154\073\133" +
    "\100\077\111\073\116\064\132\024\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\013" +
    "\210\110\217\151\220\047\001\001\000\004\112\u01cc\001" +
    "\001\000\002\001\001\000\014\004\216\062\202\063\u01ce" +
    "\116\210\163\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u01d2\001\001\000\002\001\001\000\106" +
    "\004\157\011\300\013\272\014\122\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\113\125\116\064\130\275\131\277\132\024\136" +
    "\145\137\023\140\051\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\217" +
    "\151\220\047\001\001\000\002\001\001\000\062\004\157" +
    "\056\153\057\044\062\121\064\016\070\u01d5\071\057\072" +
    "\154\073\133\100\077\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\070\004\157\011\u01d8\014\122\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\217\151\220\047\001\001\000\004\012\u01e2\001\001\000" +
    "\004\032\u01d9\001\001\000\004\034\u01da\001\001\000\002" +
    "\001\001\000\070\004\157\011\u01e1\014\122\056\153\057" +
    "\044\062\121\064\016\070\017\071\057\072\154\073\133" +
    "\100\077\111\073\116\064\132\024\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\013" +
    "\210\110\217\151\220\047\001\001\000\002\001\001\000" +
    "\062\004\157\056\153\057\044\062\121\064\016\070\u01de" +
    "\071\057\072\154\073\133\100\077\111\073\116\064\132" +
    "\024\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\220\047\001\001\000" +
    "\002\001\001\000\070\004\157\011\u01e0\014\122\056\153" +
    "\057\044\062\121\064\016\070\017\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\217\151\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\110\004\157\011\300\013\272\014" +
    "\122\033\u01e3\056\153\057\044\062\121\064\016\070\017" +
    "\071\057\072\154\073\133\100\077\111\073\113\125\116" +
    "\064\130\275\131\277\132\024\136\145\137\023\140\051" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\217\151\220\047\001\001" +
    "\000\004\035\u01e4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\157\056\153\057\044" +
    "\062\121\064\016\070\u01e8\071\057\072\154\073\133\100" +
    "\077\111\073\116\064\132\024\145\155\147\107\150\006" +
    "\152\022\154\124\156\102\160\037\164\053\205\013\210" +
    "\110\220\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u01eb\001\001\000\106\004\157\011\300\013" +
    "\272\014\122\056\153\057\044\062\121\064\016\070\017" +
    "\071\057\072\154\073\133\100\077\111\073\113\125\116" +
    "\064\130\275\131\277\132\024\136\145\137\023\140\051" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\217\151\220\047\001\001" +
    "\000\004\012\u01ed\001\001\000\106\004\157\011\300\013" +
    "\272\014\122\056\153\057\044\062\121\064\016\070\017" +
    "\071\057\072\154\073\133\100\077\111\073\113\125\116" +
    "\064\130\275\131\277\132\024\136\145\137\023\140\051" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\217\151\220\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\004\u0176\057\044\071\057\072\u016e\073\133\100\077\101" +
    "\u01f6\102\u01f7\116\u0172\132\u01f8\150\006\152\022\154\124" +
    "\160\037\164\053\210\110\213\u01f5\220\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\u0176\057\044\071" +
    "\057\072\u016e\073\133\100\077\101\u01fb\102\u01f7\116\u0172" +
    "\132\u01f8\150\006\152\022\154\124\160\037\164\053\210" +
    "\110\213\u01f5\220\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\u0176\057\044\071\057\072\u016e\073" +
    "\133\100\077\102\u01fe\116\u0172\132\u01f8\150\006\152\022" +
    "\154\124\160\037\164\053\210\110\213\u01f5\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\157" +
    "\056\153\057\044\062\121\064\016\070\u0201\071\057\072" +
    "\154\073\133\100\077\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\151\u020a\201\u0209" +
    "\202\u0208\203\u020b\204\u020c\001\001\000\006\151\u020a\201" +
    "\u021c\001\001\000\004\151\u021b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\071\u013b\073" +
    "\133\075\u020e\076\u0138\077\u0135\100\u0139\112\u0134\150\u0136" +
    "\154\124\001\001\000\010\126\u0210\206\u0212\207\u020f\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\004\157" +
    "\043\u0216\044\347\056\350\057\044\062\121\064\016\070" +
    "\345\071\057\072\154\073\133\100\077\111\073\116\064" +
    "\132\346\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\220\047\001\001" +
    "\000\002\001\001\000\064\004\157\056\153\057\044\062" +
    "\121\064\016\070\243\071\057\072\154\073\133\074\u0214" +
    "\100\077\111\073\116\064\132\024\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\013" +
    "\210\110\220\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\004\157" +
    "\056\153\057\044\062\121\064\016\070\243\071\057\072" +
    "\154\073\133\074\u0219\100\077\111\073\116\064\132\024" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\220\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\151" +
    "\u021b\001\001\000\042\004\u0176\057\044\071\057\072\u016e" +
    "\073\133\100\077\116\u0172\132\u021e\150\006\152\022\153" +
    "\u021f\154\124\160\037\164\053\210\110\220\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\u0176\057\044\071\057\072\u016e\073\133\100\077" +
    "\116\u0172\132\u0222\150\006\152\022\154\124\160\037\164" +
    "\053\210\110\220\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\004\157\056\153\057\044\062\121\064" +
    "\016\070\u0226\071\057\072\154\073\133\100\077\111\073" +
    "\116\064\132\024\145\155\147\107\150\006\152\022\154" +
    "\124\156\102\160\037\164\053\205\013\210\110\220\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\071\u013b\073\133\077\u01ab" +
    "\100\u0139\112\u0134\150\u01ac\154\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\216\062\202\063\u0233\116\210" +
    "\163\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\157\056\153\057\044\062\121" +
    "\064\016\070\u0237\071\057\072\154\073\133\100\077\111" +
    "\073\116\064\132\024\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\220" +
    "\047\001\001\000\002\001\001\000\004\026\u023a\001\001" +
    "\000\004\027\u024a\001\001\000\002\001\001\000\004\027" +
    "\u023c\001\001\000\002\001\001\000\004\027\u023e\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\157\056" +
    "\153\057\044\062\121\064\016\070\u0246\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\004\030\u0242\001" +
    "\001\000\004\012\u0245\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\004\157\011\300\013\272\014\122\056" +
    "\153\057\044\062\121\064\016\070\017\071\057\072\154" +
    "\073\133\100\077\111\073\113\125\116\064\130\275\131" +
    "\277\132\024\136\145\137\023\140\051\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\217\151\220\047\001\001\000\004\030\u0247" +
    "\001\001\000\004\012\u0248\001\001\000\106\004\157\011" +
    "\300\013\272\014\122\056\153\057\044\062\121\064\016" +
    "\070\017\071\057\072\154\073\133\100\077\111\073\113" +
    "\125\116\064\130\275\131\277\132\024\136\145\137\023" +
    "\140\051\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\217\151\220\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u024c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\157" +
    "\056\153\057\044\062\121\064\016\070\u0256\071\057\072" +
    "\154\073\133\100\077\111\073\116\064\132\024\145\155" +
    "\147\107\150\006\152\022\154\124\156\102\160\037\164" +
    "\053\205\013\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\157\056\153\057\044\062\121\064\016\070\u025d\071" +
    "\057\072\154\073\133\100\077\111\073\116\064\132\024" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\220\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\216" +
    "\062\202\063\u0264\116\210\163\204\001\001\000\002\001" +
    "\001\000\004\114\u0266\001\001\000\002\001\001\000\010" +
    "\004\254\117\u0269\143\u0268\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\254\117\u026b\001\001\000\002" +
    "\001\001\000\004\050\u026d\001\001\000\020\051\u0273\121" +
    "\u027d\122\u026e\124\u0274\125\u0276\146\u027c\165\u026f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u02a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\004\157\014\u02a8\056\153\057\044\062\121\064\016" +
    "\070\017\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\217\151\220" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\254\117\u028a\166\u0289\001\001\000" +
    "\004\120\u0281\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\216\062\202\063\u0286\116\210\163\204\001\001\000" +
    "\002\001\001\000\014\004\216\062\202\063\u0288\116\210" +
    "\163\204\001\001\000\002\001\001\000\004\167\u028d\001" +
    "\001\000\002\001\001\000\006\004\254\117\u02a7\001\001" +
    "\000\024\004\254\117\u0294\170\u0292\171\u0291\172\u0295\173" +
    "\u0296\175\u028f\176\u0293\177\u0290\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\254\117\u0294\172\u02a1\173\u0296\175\u028f\176\u0293" +
    "\177\u0290\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\254\117\u029d\174\u029c\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\254\117\u029f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\125\u02a5\200\u02a4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u02ab\001\001\000\004\112\u02ac\001\001\000\002\001\001" +
    "\000\016\004\254\036\u02ae\041\256\042\262\117\261\144" +
    "\255\001\001\000\002\001\001\000\004\123\u02b0\001\001" +
    "\000\002\001\001\000\004\012\u02b3\001\001\000\002\001" +
    "\001\000\106\004\157\011\300\013\272\014\122\056\153" +
    "\057\044\062\121\064\016\070\017\071\057\072\154\073" +
    "\133\100\077\111\073\113\125\116\064\130\275\131\277" +
    "\132\024\136\145\137\023\140\051\145\155\147\107\150" +
    "\006\152\022\154\124\156\102\160\037\164\053\205\013" +
    "\210\110\217\151\220\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u02c5\154\u02b5\001\001\000\002" +
    "\001\001\000\040\004\u0176\057\044\071\057\072\u016e\073" +
    "\133\100\077\116\u0172\132\u02c3\150\006\152\022\154\124" +
    "\160\037\164\053\210\110\220\047\001\001\000\062\004" +
    "\157\056\153\057\044\062\121\064\016\070\u02bc\071\057" +
    "\072\154\073\133\100\077\111\073\116\064\132\024\145" +
    "\155\147\107\150\006\152\022\154\124\156\102\160\037" +
    "\164\053\205\013\210\110\220\047\001\001\000\006\107" +
    "\u02bb\154\u02b5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\004\157\056\153\057\044\062" +
    "\121\064\016\070\u02bf\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\220\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\110\u02cc\112\u02cd\154\u02cb\001\001\000\004" +
    "\112\u02ca\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\112\u02d1\001\001\000\002\001\001\000" +
    "\016\004\254\036\u02d3\041\256\042\262\117\261\144\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u02d6\001\001\000\106\004\157\011\300\013\272\014\122" +
    "\056\153\057\044\062\121\064\016\070\017\071\057\072" +
    "\154\073\133\100\077\111\073\113\125\116\064\130\275" +
    "\131\277\132\024\136\145\137\023\140\051\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\217\151\220\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\004\157\056\u02dd\057\044\062\121\064\016\070" +
    "\345\071\057\072\154\073\133\100\077\111\073\116\064" +
    "\132\u02dc\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\214\u02de\220\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\004\u0176\020\u02e5\021\u02e1\057\044\071\057" +
    "\072\u016e\073\133\100\077\116\u0172\132\u02e3\150\006\152" +
    "\022\154\124\160\037\164\053\210\110\213\u02e0\215\u02e2" +
    "\220\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\u0176\057\044" +
    "\071\057\072\u016e\073\133\100\077\116\u0172\132\u02ee\150" +
    "\006\152\022\154\124\160\037\164\053\210\110\220\047" +
    "\001\001\000\046\004\u0176\021\u02e6\057\044\071\057\072" +
    "\u016e\073\133\100\077\116\u0172\132\u02e3\150\006\152\022" +
    "\154\124\160\037\164\053\210\110\213\u02e0\215\u02e7\220" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\004\157\011\u02ea\014\122\023\u02eb\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\217\151\220\047\001\001\000\004\012\u02ec\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\004\157\011\300" +
    "\013\272\014\122\056\153\057\044\062\121\064\016\070" +
    "\017\071\057\072\154\073\133\100\077\111\073\113\125" +
    "\116\064\130\275\131\277\132\024\136\145\137\023\140" +
    "\051\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\217\151\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\004\157" +
    "\011\u02ea\014\122\023\u02f0\056\153\057\044\062\121\064" +
    "\016\070\017\071\057\072\154\073\133\100\077\111\073" +
    "\116\064\132\024\145\155\147\107\150\006\152\022\154" +
    "\124\156\102\160\037\164\053\205\013\210\110\217\151" +
    "\220\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\004\157\056\153\057\044\062\121\064\016\070\243" +
    "\071\057\072\154\073\133\074\u02f3\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u02fd\001\001\000\002\001" +
    "\001\000\004\007\u02fb\001\001\000\002\001\001\000\110" +
    "\004\157\010\170\011\162\014\122\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\113\125\116\064\121\126\130\113\131\136\132" +
    "\024\136\145\137\023\140\051\145\155\147\107\150\006" +
    "\152\022\154\124\156\102\160\037\164\053\205\013\210" +
    "\110\217\151\220\047\001\001\000\002\001\001\000\110" +
    "\004\157\010\170\011\162\014\122\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\113\125\116\064\121\126\130\113\131\136\132" +
    "\024\136\145\137\023\140\051\145\155\147\107\150\006" +
    "\152\022\154\124\156\102\160\037\164\053\205\013\210" +
    "\110\217\151\220\047\001\001\000\002\001\001\000\044" +
    "\004\u0176\015\u0302\016\u0300\057\044\071\057\072\u016e\073" +
    "\133\100\077\116\u0172\132\u0301\150\006\152\022\154\124" +
    "\160\037\164\053\210\110\220\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\u0176\016\u0305\057\044\071\057\072\u016e\073" +
    "\133\100\077\116\u0172\132\u0301\150\006\152\022\154\124" +
    "\160\037\164\053\210\110\220\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0308\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\004\157\011" +
    "\300\013\272\014\122\056\153\057\044\062\121\064\016" +
    "\070\017\071\057\072\154\073\133\100\077\111\073\113" +
    "\125\116\064\130\275\131\277\132\024\136\145\137\023" +
    "\140\051\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\217\151\220\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\071\u013b\073\133\077\u0182\100\u0139\112\u0134" +
    "\150\u0183\154\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\107\u02c5\154\u02b5\001\001" +
    "\000\006\107\u02bb\154\u02b5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\202\u018f\001\001\000\024" +
    "\071\u013b\073\133\075\u0326\076\u0138\077\u0135\100\u0139\112" +
    "\u0134\150\u0136\154\124\001\001\000\010\126\u0327\206\u0212" +
    "\207\u020f\001\001\000\004\127\u0328\001\001\000\004\151" +
    "\u0329\001\001\000\002\001\001\000\062\004\157\056\153" +
    "\057\044\062\121\064\016\070\u032b\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\u032f\001\001\000\006\004\254\117" +
    "\u0336\001\001\000\004\142\u0330\001\001\000\002\001\001" +
    "\000\010\004\254\117\u0269\143\u0332\001\001\000\002\001" +
    "\001\000\004\050\u0334\001\001\000\020\051\u0273\121\u027d" +
    "\122\u026e\124\u0274\125\u0276\146\u027c\165\u026f\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\157\056\153" +
    "\057\044\062\121\064\016\070\u0338\071\057\072\154\073" +
    "\133\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\002\001\001\000\072" +
    "\004\157\011\u033c\014\122\031\u033b\056\153\057\044\062" +
    "\121\064\016\070\017\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\024\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\217\151\220\047\001\001\000\004\012\u033d\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\004\157\011\300" +
    "\013\272\014\122\056\153\057\044\062\121\064\016\070" +
    "\017\071\057\072\154\073\133\100\077\111\073\113\125" +
    "\116\064\130\275\131\277\132\024\136\145\137\023\140" +
    "\051\145\155\147\107\150\006\152\022\154\124\156\102" +
    "\160\037\164\053\205\013\210\110\217\151\220\047\001" +
    "\001\000\002\001\001\000\064\004\157\056\153\057\044" +
    "\062\121\064\016\070\243\071\057\072\154\073\133\074" +
    "\u0340\100\077\111\073\116\064\132\024\145\155\147\107" +
    "\150\006\152\022\154\124\156\102\160\037\164\053\205" +
    "\013\210\110\220\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\216" +
    "\062\202\063\u0348\116\210\163\204\001\001\000\002\001" +
    "\001\000\014\004\216\062\202\063\u034a\116\210\163\204" +
    "\001\001\000\002\001\001\000\004\012\u034c\001\001\000" +
    "\106\004\157\011\300\013\272\014\122\056\153\057\044" +
    "\062\121\064\016\070\017\071\057\072\154\073\133\100" +
    "\077\111\073\113\125\116\064\130\275\131\277\132\024" +
    "\136\145\137\023\140\051\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\217\151\220\047\001\001\000\010\133\u0350\134\u0351\135" +
    "\u034f\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\211\u0354\212\u0353\001\001\000\004\135\u0352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0357\001\001\000\106\004\157\011" +
    "\300\013\272\014\122\056\153\057\044\062\121\064\016" +
    "\070\017\071\057\072\154\073\133\100\077\111\073\113" +
    "\125\116\064\130\275\131\277\132\024\136\145\137\023" +
    "\140\051\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\217\151\220\047" +
    "\001\001\000\002\001\001\000\006\004\254\117\u035a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u035e\001\001\000\106\004\157\011\300\013" +
    "\272\014\122\056\153\057\044\062\121\064\016\070\017" +
    "\071\057\072\154\073\133\100\077\111\073\113\125\116" +
    "\064\130\275\131\277\132\024\136\145\137\023\140\051" +
    "\145\155\147\107\150\006\152\022\154\124\156\102\160" +
    "\037\164\053\205\013\210\110\217\151\220\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\107\u02c5\154\u02b5\001\001\000\006\107\u02bb\154\u02b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\004" +
    "\157\054\u0368\055\u0369\056\153\057\044\062\121\064\016" +
    "\070\u0367\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\157\056\153\057\044\062\121\064\016\070" +
    "\u036b\071\057\072\154\073\133\100\077\111\073\116\064" +
    "\132\024\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\220\047\001\001" +
    "\000\002\001\001\000\066\004\157\054\u036d\055\u0369\056" +
    "\153\057\044\062\121\064\016\070\u0367\071\057\072\154" +
    "\073\133\100\077\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\066\004\157\054\u036f\055\u0369\056\153\057\044\062\121" +
    "\064\016\070\u0367\071\057\072\154\073\133\100\077\111" +
    "\073\116\064\132\024\145\155\147\107\150\006\152\022" +
    "\154\124\156\102\160\037\164\053\205\013\210\110\220" +
    "\047\001\001\000\002\001\001\000\072\004\157\011\u0373" +
    "\014\122\022\u0371\056\153\057\044\062\121\064\016\070" +
    "\017\071\057\072\154\073\133\100\077\111\073\116\064" +
    "\132\024\145\155\147\107\150\006\152\022\154\124\156" +
    "\102\160\037\164\053\205\013\210\110\217\151\220\047" +
    "\001\001\000\002\001\001\000\004\012\u0374\001\001\000" +
    "\002\001\001\000\106\004\157\011\300\013\272\014\122" +
    "\056\153\057\044\062\121\064\016\070\017\071\057\072" +
    "\154\073\133\100\077\111\073\113\125\116\064\130\275" +
    "\131\277\132\024\136\145\137\023\140\051\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\217\151\220\047\001\001\000\002\001" +
    "\001\000\040\004\u0176\057\044\071\057\072\u016e\073\133" +
    "\100\077\116\u0172\132\u0377\150\006\152\022\154\124\160" +
    "\037\164\053\210\110\220\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u0382\001\001" +
    "\000\002\001\001\000\006\004\u037b\005\u0381\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\004\157\056\153\057\044\062" +
    "\121\064\016\070\u018b\071\057\072\154\073\133\100\077" +
    "\103\u038c\104\u018c\111\073\116\064\132\024\145\155\147" +
    "\107\150\006\152\022\154\124\156\102\160\037\164\053" +
    "\205\013\210\110\220\047\001\001\000\002\001\001\000" +
    "\004\202\u01a5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\004\157\056\u0390\057\044\062" +
    "\121\064\016\070\345\071\057\072\154\073\133\100\077" +
    "\111\073\116\064\132\u038f\145\155\147\107\150\006\152" +
    "\022\154\124\156\102\160\037\164\053\205\013\210\110" +
    "\216\u0392\220\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\u0176\057\044\071\057" +
    "\072\u016e\073\133\100\077\116\u0172\132\u0398\145\u0397\150" +
    "\006\152\022\154\124\160\037\164\053\210\110\220\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\157\056\153\057\044\062\121\064\016" +
    "\070\u039a\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\024\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u039e" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\004" +
    "\157\043\u03a0\044\347\056\350\057\044\062\121\064\016" +
    "\070\345\071\057\072\154\073\133\100\077\111\073\116" +
    "\064\132\346\145\155\147\107\150\006\152\022\154\124" +
    "\156\102\160\037\164\053\205\013\210\110\220\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhpAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhpAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhpAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(Modifiers.AccPublic);
	protected final static Integer PRIVATE = new Integer(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = new Integer(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = new Integer(Modifiers.AccAbstract);
	protected final static Integer FINAL = new Integer(Modifiers.AccFinal);
	protected final static Integer STATIC = new Integer(Modifiers.AccStatic);

	AST ast;

	public final void setAST (AST ast) {
		this.ast = ast;
	}

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else
	   	//	System.err.println("");
    }


	public void report_fatal_error(
    String   message,
    Object   info)
    throws java.lang.Exception
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);

      /* throw an exception */
     // throw new Exception("Can't recover from previous error(s)");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PhpAstParser$actions {
  private final PhpAstParser parser;

  /** Constructor */
  CUP$PhpAstParser$actions(PhpAstParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      if (CUP$PhpAstParser$act_num < 100) {
        return CUP$PhpAstParser$do_action1(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 200) {
        return CUP$PhpAstParser$do_action2(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 300) {
        return CUP$PhpAstParser$do_action3(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 400) {
        return CUP$PhpAstParser$do_action4(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else  {
        return CUP$PhpAstParser$do_action5(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action1(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	RESULT = new Program(sListleft, sListright, parser.ast, sList, commentList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PhpAstParser$parser.done_parsing();
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= T_STRING 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= T_DEFINE 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if(statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			//EmptyStatement length equals to 2,means it is "?>",equals to 1,means it is ";"
			if (!(statement instanceof EmptyStatement && statement.getLength() == 2) && lastStatement instanceof NamespaceDeclaration && !((NamespaceDeclaration)lastStatement).isBracketed()) {
				((NamespaceDeclaration)lastStatement).addStatement(statement);
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(5/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(5/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, null,
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UseStatement(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(useDecl);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(4/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // use_declarations ::= use_declaration 
            {
              List RESULT = null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(4/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_declaration ::= namespace_name 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, true, false), null);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, true, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		sList.add(statement);
	}
	RESULT = sList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(8/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inner_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(8/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new GotoLabel(labelleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(tokenleft, eright, parser.ast, sList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int s = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int s = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List conds = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ForStatement(tokenleft, statementright, parser.ast, initializations, conds, increasements, statement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= yield_expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		YieldExpression expr = (YieldExpression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new GlobalStatement(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticStatement(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new EchoStatement(sleft, eright, parser.ast, exprList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(expr);
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, exprright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "use")), list));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, closeParright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "unset")), list));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_key foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, key, var, statement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new DeclareStatement(sleft, statementright, parser.ast, lists[0], lists[1], statement);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int finallyClauseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int finallyClauseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FinallyClause finallyClause = (FinallyClause)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	TryStatement s = new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright, parser.ast, new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList), catchesList, finallyClause);

	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new GotoStatement(sleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // catches_list ::= non_empty_catches_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(89/*catches_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // catches_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(89/*catches_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // non_empty_catches_list ::= catch_clause 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(90/*non_empty_catches_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_empty_catches_list ::= non_empty_catches_list catch_clause 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(90/*non_empty_catches_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className,
		new Variable(varleft, varright, parser.ast, var),
		new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(91/*catch_clause*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // finally_clause ::= non_empty_finally_clause 
            {
              FinallyClause RESULT = null;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FinallyClause clause = (FinallyClause)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = clause;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(135/*finally_clause*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // finally_clause ::= 
            {
              FinallyClause RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(135/*finally_clause*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FinallyClause RESULT = null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object finally_word = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, parser.ast, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, parser.ast, finallyBlock);
	RESULT = finallyClause;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(136/*non_empty_finally_clause*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unset_variables ::= unset_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(11/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(11/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unset_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(12/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(13/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(13/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(86/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(87/*class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(fnleft, fnright, parser.ast, fn), paramList,
		new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(92/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if(modifier.intValue()==ClassDeclaration.MODIFIER_TRAIT){
		RESULT = new TraitDeclaration(modifierleft ,blockEndright, parser.ast, ClassDeclaration.MODIFIER_NONE,
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}else{
		RESULT = new ClassDeclaration(modifierleft ,blockEndright, parser.ast, modifier.intValue(),
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(93/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InterfaceDeclaration(sleft ,blockEndright, parser.ast,
		new Identifier(classNameleft, classNameright, parser.ast, className), interfaces,
		new Block(blockStartleft, blockEndright, parser.ast, sList));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(93/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // class_entry_type ::= T_TRAIT 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_TRAIT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // extends_from ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(73/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(74/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(74/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(96/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(96/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(97/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(97/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // list_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              ListVariable RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ListVariable(sleft, eright, parser.ast, varList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(137/*list_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // foreach_expr ::= variable 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(138/*foreach_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // foreach_expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(138/*foreach_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // foreach_key ::= foreach_variable T_DOUBLE_ARROW 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(14/*foreach_key*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // foreach_value ::= foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(139/*foreach_value*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // foreach_value ::= list_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ListVariable var = (ListVariable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(139/*foreach_value*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action2(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(15/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Reference (sleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(15/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
	listValues.add(value);

	RESULT = new List[] { listKeys, listValues };

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(19/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
	lists[1].add(value);
	RESULT = lists;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(19/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(22/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(22/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(23/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(23/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(24/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	((LinkedList)elseifList[0]).addFirst(cond);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));
	RESULT = elseifList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(24/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(25/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(colonleft, sListright, parser.ast, sList, false);
	((LinkedList)elseifList[0]).addFirst(cond);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));
	RESULT = elseifList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(25/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(26/*else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(26/*else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Block(colonleft, listright, parser.ast, list, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(28/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(28/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, v, scalar);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, ref_var, scalar);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optional_class_type ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optional_class_type ::= fully_qualified_class_name 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // optional_class_type ::= T_ARRAY 
            {
              Expression RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // optional_class_type ::= T_CALLABLE 
            {
              Expression RESULT = null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object callable = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(callableleft, callableright, parser.ast, "callable");

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // function_call_parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(35/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(35/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(38/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // class_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(38/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	modifier = modifier == null ? PhpAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	RESULT = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // class_statement ::= trait_use_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft,adaptationsright,parser.ast,list,adaptations);
	RESULT = traitUseStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(115/*trait_use_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List<NamespaceName> traitList = new LinkedList<NamespaceName>();
	traitList.add(name);
	RESULT = traitList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(116/*trait_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(116/*trait_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(117/*trait_adaptations*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(117/*trait_adaptations*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // trait_adaptation_list ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(118/*trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(118/*trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(119/*non_empty_trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT = null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(119/*non_empty_trait_adaptation_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT = null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft,endright,parser.ast,precedence);
	RESULT = traitPrecedenceStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(120/*trait_adaptation_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT = null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft,endright,parser.ast,alias);
	RESULT = traitAliasStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(120/*trait_adaptation_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT = null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft,trListright,parser.ast,methodReference,trList);
	RESULT = traitPrecedence;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(121/*trait_precedence*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List<NamespaceName> trList = new LinkedList<NamespaceName>();
	trList.add(className);
	RESULT = trList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(122/*trait_reference_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(122/*trait_reference_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	//FunctionName name = new FunctionName(sleft, sright, parser.ast,
	//		new Identifier(sleft, sright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new Identifier(sleft, sright, parser.ast, s);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(123/*trait_method_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(123/*trait_method_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	//FunctionName name = new FunctionName(functionNameleft, functionNameright, parser.ast,
	//		new Identifier(functionNameleft, functionNameright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, parser.ast, className, name);
	RESULT = methodReference;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(124/*trait_method_reference_fully_qualified*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING 
            {
              TraitAlias RESULT = null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? functionNameleft : modifierleft;
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	TraitAlias alias = new TraitAlias(referenceleft, functionNameright, parser.ast,reference,modifierValue,modifierOffset,name);
	RESULT = alias;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(125/*trait_alias*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // trait_alias ::= trait_method_reference T_AS member_modifier 
            {
              TraitAlias RESULT = null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? asright + 1 : modifierleft;
	TraitAlias alias = new TraitAlias(referenceleft, modifierright, parser.ast,reference,modifierValue,modifierOffset,null);
	RESULT = alias;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(125/*trait_alias*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // trait_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(126/*trait_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // trait_modifiers ::= member_modifier 
            {
              Integer RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = modifier;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(126/*trait_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // method_body ::= T_SEMICOLON 
            {
              Block RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(81/*method_body*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(sleft, eright, parser.ast, list);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(81/*method_body*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(100/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PUBLIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(100/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // method_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(80/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(80/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(82/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(82/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PUBLIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PROTECTED;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PRIVATE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // member_modifier ::= T_STATIC 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.STATIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.ABSTRACT;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // member_modifier ::= T_FINAL 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.FINAL;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action3(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(42/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(42/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // chaining_method_or_property ::= chaining_method_or_property variable_property 
            {
              List RESULT = null;
		int chaining_method_or_propertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int chaining_method_or_propertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List chaining_method_or_property = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase vp = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	chaining_method_or_property.add(vp);
	RESULT = chaining_method_or_property;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(127/*chaining_method_or_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // chaining_method_or_property ::= variable_property 
            {
              List RESULT = null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase vp = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List<VariableBase> chaining_method_or_property = new LinkedList<VariableBase>();
	chaining_method_or_property.add(vp);
	RESULT = chaining_method_or_property;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(127/*chaining_method_or_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // chaining_dereference ::= chaining_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              PHPArrayDereferenceList RESULT = null;
		int arrayDereferenceListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int arrayDereferenceListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		PHPArrayDereferenceList arrayDereferenceList = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	DereferenceNode var = new DereferenceNode(startleft, endright,parser.ast,index);
	arrayDereferenceList.getDereferences().add(var);
	RESULT = arrayDereferenceList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(128/*chaining_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // chaining_dereference ::= T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              PHPArrayDereferenceList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList(parser.ast);
	DereferenceNode var = new DereferenceNode(startleft, endright,parser.ast,index);
	arrayDereferenceList.getDereferences().add(var);
	RESULT = arrayDereferenceList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(128/*chaining_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // chaining_instance_call ::= chaining_dereference chaining_method_or_property 
            {
              ChainingInstanceCall RESULT = null;
		int arrayDereferenceListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int arrayDereferenceListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		PHPArrayDereferenceList arrayDereferenceList = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int chaining_method_or_propertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int chaining_method_or_propertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List chaining_method_or_property = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ChainingInstanceCall call = new ChainingInstanceCall(arrayDereferenceListleft, chaining_method_or_propertyright,parser.ast,arrayDereferenceList,chaining_method_or_property);
	RESULT = call;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(129/*chaining_instance_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // chaining_instance_call ::= chaining_dereference 
            {
              ChainingInstanceCall RESULT = null;
		int arrayDereferenceListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int arrayDereferenceListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		PHPArrayDereferenceList arrayDereferenceList = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ChainingInstanceCall call = new ChainingInstanceCall(arrayDereferenceListleft, arrayDereferenceListright,parser.ast,arrayDereferenceList,null);
	RESULT = call;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(129/*chaining_instance_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // chaining_instance_call ::= chaining_method_or_property 
            {
              ChainingInstanceCall RESULT = null;
		int chaining_method_or_propertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int chaining_method_or_propertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List chaining_method_or_property = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ChainingInstanceCall call = new ChainingInstanceCall(chaining_method_or_propertyleft, chaining_method_or_propertyright,parser.ast,null,chaining_method_or_property);
	RESULT = call;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(129/*chaining_instance_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // instance_call ::= 
            {
              ChainingInstanceCall RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(130/*instance_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // instance_call ::= chaining_instance_call 
            {
              ChainingInstanceCall RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ChainingInstanceCall call = (ChainingInstanceCall)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = call;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(130/*instance_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(131/*new_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
	RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL,
		new Reference(reftokenleft, ctorright, parser.ast,
			new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor)));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_PLUS_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MINUS_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MUL_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_DIV_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_CONCAT_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MOD_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_AND_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_OR_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_XOR_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SL_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SR_EQUAL, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_INC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_INC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_DEC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_DEC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_OR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_AND, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_OR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_AND, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_OR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_AND, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_XOR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_CONCAT, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_PLUS, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MINUS, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MUL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_DIV, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MOD, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_PLUS);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_MINUS);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_NOT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_TILDA);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_EQUAL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_RGREATER, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_LGREATER, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr , className);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= new_expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= T_OPEN_PARENTHESE yield_expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		YieldExpression expr = (YieldExpression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE instance_call 
            {
              Expression RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ChainingInstanceCall call = (ChainingInstanceCall)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	expr = expr.cloneWithNewStart(openleft);
	expr.setChainingInstanceCall(call);

	if (call!=null && !call.getChainingMethodOrProperty().isEmpty()) {
		// then get the aggregated list of properties (->...->...->...)
		List list = call.getChainingMethodOrProperty();

		// now create the dispatch(es) nodes
		Dispatch dispatch = null;
		VariableBase dispatcher = expr;

		Iterator listIt = list.iterator();
		while (listIt.hasNext()) {
			VariableBase property = (VariableBase)listIt.next();
			dispatch = parser.createDispatch(dispatcher, property);
			dispatcher = dispatch;
		}
		RESULT = dispatcher;
	}else{
		RESULT = expr;
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond , ifTrue, ifFalse);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond , null, ifFalse);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_INT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_REAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_OBJECT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_BOOL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_UNSET);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, s)), expList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(startleft, endright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list,false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "print")), expList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue(),true,stleft);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // array_creation_dereference ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE chaining_dereference 
            {
              ArrayCreation RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		PHPArrayDereferenceList dereference = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(startleft, dereferenceright, parser.ast, list, true, dereference);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(142/*array_creation_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // array_creation_dereference ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT chaining_dereference 
            {
              ArrayCreation RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		PHPArrayDereferenceList dereference = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, dereferenceright, parser.ast, list,false, dereference);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(142/*array_creation_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // lexical_vars ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action4(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Variable(varleft, varright, parser.ast, var));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(listleft, eright, parser.ast,
		new FunctionName(listleft, listright, parser.ast,
			new NamespaceName(listleft, listright, parser.ast, list, false, false)), parameters);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, listright, parser.ast,
			new NamespaceName(sleft, listright, parser.ast, list, false, true)), parameters);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, listright, parser.ast,
			new NamespaceName(sleft, listright, parser.ast, list, true, false)), parameters);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase fn = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast,
				fn), parameters));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase fn = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast,
				fn), parameters));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(reflectionNameleft, eright, parser.ast,
		new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // class_name ::= T_STATIC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "static");

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // class_name ::= namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, true, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // fully_qualified_class_name ::= namespace_name 
            {
              NamespaceName RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // class_name_reference ::= class_name 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(107/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(107/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);

	// now create the dispatch(es) nodes
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}

	// create class name from the dispatch
	RESULT = new ClassName(varleft, propertyListright, parser.ast, dispatch);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(109/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	 RESULT = new ClassName(varleft, varright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(109/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(112/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // backticks_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // backticks_expr ::= encaps_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ctor_arguments ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // common_scalar ::= T_BNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_BIN);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING chaining_dereference 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		PHPArrayDereferenceList dereference = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, dereferenceright, parser.ast, scalar, Scalar.TYPE_STRING, dereference);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // common_scalar ::= T_LINE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // common_scalar ::= T_FILE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // common_scalar ::= T_DIR 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // common_scalar ::= T_TRAIT_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__TRAIT__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // common_scalar ::= T_NS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, parser.ast, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Quote(labelleft, eright, parser.ast, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // static_scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier)list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE chaining_dereference 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		PHPArrayDereferenceList dereference = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, dereferenceright, parser.ast, list, true, dereference);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // static_scalar ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list,false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // static_scalar ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT chaining_dereference 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		PHPArrayDereferenceList dereference = (PHPArrayDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, dereferenceright, parser.ast, list,false, dereference);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(113/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // scalar ::= class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier)list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_HEREDOC);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(51/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(51/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(52/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(52/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // r_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(99/*r_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // w_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*w_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // rw_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(101/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ParameterAndDereferenceList paramsList = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// get the last property
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName fn = new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty);
		//if(paramsList.arrayDereferenceList!=null&&!paramsList.arrayDereferenceList.getDereferences().isEmpty()){
		//	firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsList.arrayDereferenceList.getDereferences().get(paramsList.arrayDereferenceList.getDereferences().size()-1).getEnd(), parser.ast, fn, paramsList.parameterList,paramsList.arrayDereferenceList);
		//}else{
			firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, fn, paramsList.parameterList,paramsList.arrayDereferenceList);
		//}

	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);

	// now create the dispatch(es) nodes
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}
	RESULT = dispatch;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(88/*variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(88/*variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ParameterAndDereferenceList paramsList = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if (paramsList == null) {
		RESULT = memberProperty;
	} else {
		//if(paramsList.arrayDereferenceList!=null&&!paramsList.arrayDereferenceList.getDereferences().isEmpty()){
		//	RESULT = new FunctionInvocation(memberPropertyleft, paramsList.arrayDereferenceList.getDereferences().get(paramsList.arrayDereferenceList.getDereferences().size()-1).getEnd(), parser.ast,
		//		new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList.parameterList,paramsList.arrayDereferenceList);
		//}else{
			RESULT = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList.parameterList,paramsList.arrayDereferenceList);
		//}
	}

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(103/*variable_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // method ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              ParameterAndDereferenceList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ParameterAndDereferenceList list = new ParameterAndDereferenceList();
	list.parameterList = paramsList;
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(132/*method*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // array_method_dereference ::= array_method_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ParameterAndDereferenceList RESULT = null;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		ParameterAndDereferenceList dereference = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	DereferenceNode var = new DereferenceNode(startleft, endright,parser.ast, index);
	dereference.arrayDereferenceList.getDereferences().add(var);
	RESULT = dereference;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(133/*array_method_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // array_method_dereference ::= method T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ParameterAndDereferenceList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		ParameterAndDereferenceList method = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList(parser.ast);
	method.arrayDereferenceList = arrayDereferenceList;
	DereferenceNode var = new DereferenceNode(startleft, endright,parser.ast, index);
	arrayDereferenceList.getDereferences().add(var);
	RESULT = method;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(133/*array_method_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // method_or_not ::= array_method_dereference 
            {
              ParameterAndDereferenceList RESULT = null;
		int dereferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int dereferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ParameterAndDereferenceList dereference = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	//RESULT = (PHPCallArgumentsList)dereference.getParent();
	RESULT = dereference;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // method_or_not ::= method 
            {
              ParameterAndDereferenceList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ParameterAndDereferenceList method = (ParameterAndDereferenceList)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = method;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // method_or_not ::= 
            {
              ParameterAndDereferenceList RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(102/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(102/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(104/*static_member*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(104/*static_member*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // variable_class_name ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(56/*variable_class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // array_function_dereference ::= array_function_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase method = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	FunctionInvocation fi = null;
	if(method instanceof FunctionInvocation){
		fi = (FunctionInvocation)method;
	}else if(method instanceof StaticMethodInvocation){
		fi = ((StaticMethodInvocation)method).getMethod();

	}
	if(fi != null){
		DereferenceNode var = new DereferenceNode(startleft, endright, parser.ast, index);
		fi.getArrayDereferenceList().getDereferences().add(var);
	}
	RESULT = method;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(134/*array_function_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // array_function_dereference ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase method = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	FunctionInvocation fi = null;
	if(method instanceof FunctionInvocation){
		fi = (FunctionInvocation)method;
	}else if(method instanceof StaticMethodInvocation){
		fi = ((StaticMethodInvocation)method).getMethod();

	}
	if(fi != null){
		PHPArrayDereferenceList arrayDereferenceList = new PHPArrayDereferenceList(parser.ast);
		DereferenceNode var = new DereferenceNode(startleft, endright, parser.ast, index);
		arrayDereferenceList.getDereferences().add(var);
		fi.setArrayDereferenceList(arrayDereferenceList);
	}
	RESULT = method;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(134/*array_function_dereference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action5(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // base_variable_with_function_calls ::= array_function_dereference 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // base_variable_with_function_calls ::= array_creation_dereference 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ArrayCreation var = (ArrayCreation)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // base_variable ::= reference_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // base_variable ::= static_member 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(55/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(55/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // reference_variable ::= compound_variable 
            {
              Variable RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(55/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // compound_variable ::= tracked_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(57/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(sleft, eright, parser.ast, expr);
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(57/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // dim_offset ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(58/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(58/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // object_property ::= object_dim_list 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(59/*object_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(59/*object_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varleft, eright, parser.ast, var, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varleft, eright, parser.ast, var, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // variable_name ::= string_st 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;
	;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // assignment_list_element ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // assignment_list_element ::= list_variable 
            {
              VariableBase RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ListVariable list = (ListVariable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // assignment_list_element ::= 
            {
              VariableBase RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // array_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // encaps_list ::= encaps_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = parser.createDispatch(var, new Variable(stringleft, stringright, parser.ast, string));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(sleft, eright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Identifier(stringleft, stringright, parser.ast, string);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Scalar(numleft,numright, parser.ast, num, Scalar.TYPE_REAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "isset")), varList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	LinkedList varList = new LinkedList();
	varList.add(var);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "empty")), varList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "eval")), exprList);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // isset_variables ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(105/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(105/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(108/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, "class"));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(108/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(108/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(106/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = value; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*string_st*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = value; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*string_st*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // yield_arg ::= variable 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(140/*yield_arg*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // yield_arg ::= expr_without_variable 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(140/*yield_arg*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // yield_expr ::= T_YIELD 
            {
              YieldExpression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new YieldExpression(tokenleft, tokenright, parser.ast);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(141/*yield_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // yield_expr ::= T_YIELD yield_arg 
            {
              YieldExpression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(141/*yield_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // yield_expr ::= T_YIELD yield_arg T_DOUBLE_ARROW yield_arg 
            {
              YieldExpression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, key, expr);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(141/*yield_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

