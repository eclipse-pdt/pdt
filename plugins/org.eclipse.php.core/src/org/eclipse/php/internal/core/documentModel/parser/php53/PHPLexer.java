/* The following code was generated by JFlex 1.6.1 */

/*******************************************************************************
 * Copyright (c) 2006, 2017 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser.php53;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.php.core.compiler.ast.nodes.PHPDocTag.TagKind;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>highlighting_scanner.jflex</tt>
 */
public class PHPLexer extends org.eclipse.php.internal.core.documentModel.parser.AbstractPHPLexer {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_SINGLE_QUOTE = 6;
  public static final int ST_PHP_BACKQUOTE = 8;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 10;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_PHP_NOWDOC = 14;
  public static final int ST_PHP_START_HEREDOC = 16;
  public static final int ST_PHP_START_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 20;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 22;
  public static final int ST_PHP_VAR_OFFSET = 24;
  public static final int ST_PHP_COMMENT = 26;
  public static final int ST_PHP_DOC_COMMENT = 28;
  public static final int ST_PHP_LINE_COMMENT = 30;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 32;
  public static final int ST_PHP_END_NOWDOC = 34;
  public static final int ST_PHP_DOLLAR_CURLY_OPEN = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\2\0\1\15\22\0\1\12\1\26\1\17\1\74"+
    "\1\16\1\32\1\33\1\73\1\63\1\64\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\61\1\14\1\27\1\23\1\24\1\75"+
    "\1\76\1\40\1\7\1\47\1\42\1\3\1\45\1\56\1\52\1\100"+
    "\1\65\1\102\1\54\1\60\1\41\1\36\1\57\1\67\1\37\1\101"+
    "\1\44\1\46\1\62\1\53\1\6\1\51\1\77\1\71\1\20\1\72"+
    "\1\35\1\66\1\21\1\40\1\7\1\47\1\42\1\3\1\45\1\56"+
    "\1\52\1\100\1\65\1\102\1\54\1\60\1\41\1\36\1\57\1\67"+
    "\1\37\1\101\1\44\1\46\1\62\1\53\1\6\1\51\1\77\1\22"+
    "\1\34\1\70\1\13\261\10\2\43\115\10\1\50\u1faa\10\1\55\uded5\10"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\20\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\13\0\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\3\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\17\6\1\5\1\6\1\5"+
    "\1\6\1\15\1\16\1\17\1\5\1\1\1\2\1\20"+
    "\4\2\1\1\3\2\3\21\2\1\3\3\1\2\2\22"+
    "\2\23\2\3\1\0\1\3\1\24\1\25\1\24\1\26"+
    "\1\27\1\26\1\30\1\27\1\6\1\31\2\32\4\33"+
    "\3\34\3\35\1\36\1\37\1\0\1\3\1\40\1\41"+
    "\2\4\1\42\6\6\1\43\2\0\1\6\2\44\2\0"+
    "\1\2\2\0\2\42\1\45\1\46\1\42\4\6\1\47"+
    "\4\6\1\50\2\6\1\51\30\6\1\52\1\6\12\0"+
    "\1\6\2\0\1\53\3\0\1\54\2\55\1\56\1\57"+
    "\1\55\4\0\2\55\1\60\3\0\1\1\2\55\1\2"+
    "\1\0\1\61\2\0\1\62\6\0\1\63\4\0\1\64"+
    "\1\4\1\54\1\65\1\0\1\66\1\67\1\70\1\71"+
    "\1\0\1\72\1\41\7\6\1\4\1\0\1\6\1\44"+
    "\1\0\1\73\4\6\1\74\4\6\1\75\6\6\1\76"+
    "\1\6\1\77\5\6\1\100\20\6\1\101\12\0\7\6"+
    "\1\102\1\103\1\1\1\104\1\2\3\0\1\105\4\0"+
    "\1\63\5\0\2\106\1\107\1\0\1\110\6\6\1\111"+
    "\1\112\1\6\1\113\1\6\1\44\3\0\1\114\5\6"+
    "\1\115\7\6\1\116\2\6\1\117\7\6\1\120\2\6"+
    "\1\121\3\6\1\122\1\123\6\6\12\0\10\6\3\0"+
    "\1\105\2\0\1\124\2\6\1\125\4\6\1\126\1\127"+
    "\1\130\2\131\2\0\3\6\1\132\6\6\1\133\1\6"+
    "\1\134\1\6\1\135\1\136\1\6\1\137\1\6\1\140"+
    "\1\141\1\142\1\143\2\6\1\144\2\6\1\145\3\6"+
    "\7\0\1\146\2\0\10\6\1\0\2\6\1\147\2\6"+
    "\1\150\1\0\1\151\14\6\1\152\1\153\1\154\2\6"+
    "\1\155\1\156\4\0\10\6\2\0\1\157\4\6\1\160"+
    "\2\6\1\161\1\162\1\6\1\163\2\6\1\164\3\6"+
    "\1\165\2\0\1\6\1\166\6\6\1\0\3\6\1\167"+
    "\1\6\1\170\5\6\1\171\1\172\2\6\1\173\3\6"+
    "\1\174\3\6\1\175\1\6\1\176\1\177\3\6\1\200"+
    "\2\6\1\201\2\6\1\202\1\203\2\6\1\204\1\205"+
    "\3\6\1\206\5\6\1\207\1\210\1\6\1\211\1\6"+
    "\1\212\2\6\1\213";

  private static int [] zzUnpackAction() {
    int [] result = new int[626];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\0\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\0\0\0\0\u0754"+
    "\0\u0797\0\0\0\0\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\0\0\u103a\0\u107d\0\u10c0\0\0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\0\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\0\0\u1533\0\0\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u163f\0\0\0\u1682\0\u16c5\0\u1708\0\0\0\u174b\0\0"+
    "\0\u178e\0\u17d1\0\0\0\u1814\0\u1857\0\0\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\0\0\u19a6\0\0\0\u19e9\0\u103a\0\0"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\0"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\0\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u0797\0\u1ee2\0\0\0\u1f25"+
    "\0\u1f68\0\u096c\0\u1fab\0\u1fee\0\0\0\u06ce\0\u2031\0\u2074"+
    "\0\u20b7\0\u20fa\0\u06ce\0\u213d\0\u2180\0\u21c3\0\u2206\0\u06ce"+
    "\0\u2249\0\u228c\0\u06ce\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3"+
    "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\0\0\u2917\0\u295a\0\u0f2e\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u0ff7\0\u2bf8\0\0\0\u2c3b\0\u1103\0\u2c7e\0\u2cc1\0\u2c3b"+
    "\0\0\0\0\0\0\0\u2c7e\0\u2d04\0\u2d47\0\u1295\0\u2d8a"+
    "\0\u2d47\0\u2d8a\0\0\0\u2dcd\0\u146a\0\u2e10\0\u2e53\0\u2dcd"+
    "\0\u2e10\0\u2e96\0\u1533\0\0\0\u2ed9\0\u1576\0\0\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\0\0\u30ae\0\u30f1"+
    "\0\u3134\0\u15b9\0\0\0\u3177\0\u31ba\0\0\0\u31fd\0\0"+
    "\0\u1920\0\0\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u1d93\0\u3521\0\u3564"+
    "\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u06ce"+
    "\0\u377c\0\u37bf\0\u3802\0\u3845\0\u06ce\0\u3888\0\u38cb\0\u390e"+
    "\0\u3951\0\u3994\0\u39d7\0\u06ce\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3"+
    "\0\u3b26\0\u3b69\0\u3bac\0\u06ce\0\u3bef\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0"+
    "\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u06ce\0\u401f\0\u4062\0\u40a5"+
    "\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd"+
    "\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\0\0\0"+
    "\0\u4492\0\0\0\u44d5\0\u4518\0\u455b\0\u459e\0\u455b\0\u45e1"+
    "\0\u4624\0\u4667\0\u15fc\0\u455b\0\u46aa\0\u46ed\0\u4730\0\u4773"+
    "\0\u47b6\0\0\0\u47f9\0\0\0\u483c\0\u06ce\0\u487f\0\u48c2"+
    "\0\u4905\0\u4948\0\u498b\0\u49ce\0\u06ce\0\u4a11\0\u4a54\0\u06ce"+
    "\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\0\0\u4be6\0\u4c29"+
    "\0\u4c6c\0\u4caf\0\u4cf2\0\u06ce\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe"+
    "\0\u4e41\0\u4e84\0\u4ec7\0\u06ce\0\u4f0a\0\u4f4d\0\u06ce\0\u4f90"+
    "\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122\0\u06ce\0\u5165"+
    "\0\u51a8\0\u06ce\0\u51eb\0\u522e\0\u5271\0\u06ce\0\u06ce\0\u52b4"+
    "\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc"+
    "\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4"+
    "\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc"+
    "\0\u593f\0\u5982\0\0\0\u59c5\0\u5a08\0\0\0\u5a4b\0\u5a8e"+
    "\0\u06ce\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u06ce\0\u06ce\0\u1e5c"+
    "\0\0\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u06ce"+
    "\0\u5d6f\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u06ce\0\u5f01"+
    "\0\u06ce\0\u5f44\0\u06ce\0\u06ce\0\u5f87\0\u06ce\0\u5fca\0\u06ce"+
    "\0\u06ce\0\u06ce\0\u06ce\0\u600d\0\u6050\0\u06ce\0\u6093\0\u60d6"+
    "\0\u06ce\0\u6119\0\u615c\0\u619f\0\u61e2\0\u6225\0\u6268\0\u62ab"+
    "\0\u62ee\0\u6331\0\u6374\0\0\0\u63b7\0\u63fa\0\u643d\0\u6480"+
    "\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612\0\u6655\0\u6698"+
    "\0\u66db\0\u671e\0\u6761\0\u67a4\0\u06ce\0\u67e7\0\u06ce\0\u682a"+
    "\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff\0\u6a42"+
    "\0\u6a85\0\u6ac8\0\u6b0b\0\u06ce\0\u06ce\0\u06ce\0\u6b4e\0\u6b91"+
    "\0\u06ce\0\u06ce\0\u6bd4\0\u6c17\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23"+
    "\0\u6d66\0\u6da9\0\u6dec\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b"+
    "\0\u06ce\0\u6f7e\0\u6fc1\0\u7004\0\u7047\0\u708a\0\u70cd\0\u7110"+
    "\0\u06ce\0\u06ce\0\u7153\0\u7196\0\u71d9\0\u721c\0\u06ce\0\u725f"+
    "\0\u72a2\0\u72e5\0\u06ce\0\u7328\0\u736b\0\u73ae\0\u06ce\0\u73f1"+
    "\0\u7434\0\u7477\0\u74ba\0\u74fd\0\u7540\0\u7583\0\u75c6\0\u7609"+
    "\0\u764c\0\u06ce\0\u768f\0\u06ce\0\u76d2\0\u7715\0\u7758\0\u779b"+
    "\0\u77de\0\u06ce\0\u06ce\0\u7821\0\u7864\0\u06ce\0\u78a7\0\u78ea"+
    "\0\u792d\0\u06ce\0\u7970\0\u79b3\0\u79f6\0\u06ce\0\u7a39\0\u06ce"+
    "\0\u06ce\0\u7a7c\0\u7abf\0\u7b02\0\u06ce\0\u7b45\0\u7b88\0\u06ce"+
    "\0\u7bcb\0\u7c0e\0\u06ce\0\u06ce\0\u7c51\0\u7c94\0\u06ce\0\u06ce"+
    "\0\u7cd7\0\u7d1a\0\u7d5d\0\u06ce\0\u7da0\0\u7de3\0\u7e26\0\u7e69"+
    "\0\u7eac\0\u06ce\0\u06ce\0\u7eef\0\u06ce\0\u7f32\0\u06ce\0\u7f75"+
    "\0\u7fb8\0\u06ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[626];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\103\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\35\1\36\1\37\1\35\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\52\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\2\34\1\72\1\73\1\34\1\74\1\75\1\34"+
    "\1\76\1\77\1\100\1\36\1\34\1\101\1\34\1\102"+
    "\2\36\1\103\1\104\1\105\1\36\1\34\1\64\1\71"+
    "\1\34\16\106\1\107\1\110\1\111\1\106\1\112\60\106"+
    "\20\113\1\114\52\113\1\110\7\113\16\115\1\116\1\115"+
    "\1\117\1\110\1\120\60\115\4\121\1\122\15\121\1\123"+
    "\60\121\11\124\1\125\3\124\1\125\1\126\1\124\1\127"+
    "\1\124\1\130\60\124\11\10\1\131\3\10\1\131\65\10"+
    "\3\132\1\133\2\132\3\133\25\132\23\133\1\132\1\133"+
    "\2\132\3\133\7\132\4\133\3\134\1\135\2\134\3\135"+
    "\25\134\23\135\1\134\1\135\2\134\3\135\7\134\4\135"+
    "\3\136\1\137\2\136\3\137\1\140\3\136\1\141\20\136"+
    "\23\137\1\136\1\137\2\136\3\137\7\136\4\137\3\142"+
    "\1\143\1\144\1\142\3\143\2\35\2\142\1\35\20\142"+
    "\23\143\1\142\1\143\2\142\3\143\7\142\4\143\1\24"+
    "\1\145\1\146\1\34\1\146\1\147\3\34\2\150\2\146"+
    "\1\150\1\151\1\146\1\150\15\146\3\34\1\152\17\34"+
    "\1\146\1\34\2\146\3\34\1\146\1\36\1\153\2\150"+
    "\2\146\4\34\30\154\1\155\52\154\22\156\1\157\5\156"+
    "\1\160\45\156\1\161\4\156\11\162\1\163\3\162\1\164"+
    "\6\162\1\165\5\162\1\166\42\162\1\167\5\162\11\170"+
    "\2\171\2\170\1\171\65\170\11\24\1\172\3\24\1\173"+
    "\70\24\1\174\2\24\3\174\1\0\10\24\1\175\13\24"+
    "\23\174\1\24\1\174\2\24\3\174\7\24\4\174\1\0"+
    "\1\25\1\176\1\177\1\0\1\25\76\0\1\176\3\0"+
    "\1\176\15\0\1\200\60\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\201\2\34\25\0\3\34\1\202\5\34\1\203"+
    "\4\34\1\204\3\34\1\205\1\0\1\206\2\0\3\34"+
    "\7\0\4\34\4\0\1\200\16\0\1\200\1\207\57\0"+
    "\1\25\1\176\1\177\1\0\1\25\1\210\75\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\57\22\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\6\0\1\41\7\0\1\211\6\0"+
    "\1\34\1\212\21\34\1\0\1\34\2\0\3\34\3\0"+
    "\1\103\3\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\11\0\2\35\2\0\1\35\70\0\1\213\2\0"+
    "\3\213\25\0\6\213\1\214\14\213\1\0\1\213\2\0"+
    "\3\213\7\0\4\213\16\215\1\216\1\217\1\220\1\215"+
    "\1\221\60\215\11\0\2\44\2\0\1\44\110\0\1\222"+
    "\1\200\101\0\1\200\1\222\101\0\1\200\1\0\1\200"+
    "\100\0\1\222\102\0\2\200\2\0\1\223\76\0\1\200"+
    "\102\0\1\200\4\0\1\224\1\104\74\0\1\200\1\225"+
    "\101\0\1\200\7\0\1\200\72\0\1\200\10\0\1\200"+
    "\47\0\1\34\1\0\1\34\1\0\4\34\25\0\1\34"+
    "\1\226\21\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\227\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\2\34\1\230\1\34\25\0\1\34"+
    "\1\231\1\34\1\232\6\34\1\233\10\34\1\0\1\34"+
    "\2\0\3\34\7\0\2\34\1\233\1\34\1\0\1\34"+
    "\1\0\1\234\1\0\4\34\25\0\2\34\1\235\5\34"+
    "\1\236\12\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\237\1\0\4\34\25\0\1\240"+
    "\4\34\1\241\15\34\1\0\1\34\2\0\3\34\7\0"+
    "\1\34\1\241\2\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\3\34\1\242\3\34\1\243\2\34\1\244"+
    "\7\34\1\245\1\0\1\34\2\0\3\34\7\0\2\34"+
    "\1\244\1\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\34\1\246\12\34\1\247\6\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\250\1\251\1\252\2\34\1\253"+
    "\2\34\1\254\12\34\1\0\1\34\2\0\3\34\7\0"+
    "\1\34\1\253\2\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\3\34\1\255\6\34\1\256\10\34\1\0"+
    "\1\34\2\0\3\34\7\0\2\34\1\256\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\257\1\34"+
    "\1\260\13\34\1\261\4\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\262\1\0\4\34"+
    "\25\0\6\34\1\263\6\34\1\264\5\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\14\34\1\265\6\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\266\15\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\266\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\267\15\34\1\270"+
    "\4\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\34\1\271"+
    "\1\272\5\34\1\273\12\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\61\0\1\274\22\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\275\20\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\7\0\1\276\2\0\1\277"+
    "\23\0\1\300\1\301\1\302\1\0\1\303\1\304\1\0"+
    "\1\305\1\306\1\0\1\307\27\0\1\304\1\307\2\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\23\34\1\0"+
    "\1\34\2\0\1\34\1\310\1\34\7\0\4\34\11\0"+
    "\2\102\2\0\1\102\65\0\20\311\1\312\52\311\1\217"+
    "\7\311\24\0\1\313\56\0\16\106\1\314\1\0\1\315"+
    "\1\106\1\316\63\106\1\317\2\106\3\317\5\106\1\320"+
    "\1\321\1\315\1\106\1\322\13\106\23\317\1\106\1\317"+
    "\2\106\3\317\7\106\4\317\121\106\1\323\1\321\1\315"+
    "\1\106\1\324\60\106\20\113\1\325\52\113\1\0\27\113"+
    "\1\217\52\113\1\217\7\113\16\115\1\326\1\115\1\327"+
    "\1\0\1\330\63\115\1\317\2\115\3\317\5\115\1\331"+
    "\1\115\1\327\1\321\1\322\13\115\23\317\1\115\1\317"+
    "\2\115\3\317\7\115\4\317\121\115\1\323\1\115\1\327"+
    "\1\321\1\332\60\115\24\0\1\333\74\0\1\323\64\0"+
    "\11\124\1\125\3\124\1\125\1\334\1\124\1\335\1\124"+
    "\1\336\63\124\1\337\2\124\3\337\1\125\3\124\1\125"+
    "\1\334\1\124\1\335\1\124\1\336\13\124\23\337\1\124"+
    "\1\337\2\124\3\337\7\124\4\337\3\124\1\317\2\124"+
    "\3\317\1\125\3\124\1\125\1\340\1\124\1\335\1\124"+
    "\1\322\13\124\23\317\1\124\1\317\2\124\3\317\7\124"+
    "\4\317\11\124\1\125\3\124\1\125\76\124\1\125\3\124"+
    "\1\125\1\323\1\124\1\335\1\124\1\341\60\124\3\10"+
    "\1\342\2\10\3\342\1\131\3\10\1\131\20\10\23\342"+
    "\1\10\1\342\2\10\3\342\7\10\4\342\1\0\1\343"+
    "\1\0\1\343\1\0\4\343\1\344\2\0\1\345\1\344"+
    "\20\0\23\343\1\0\1\343\2\0\3\343\7\0\4\343"+
    "\1\0\1\346\1\0\1\346\1\0\4\346\1\347\2\0"+
    "\1\350\1\347\20\0\23\346\1\0\1\346\2\0\3\346"+
    "\7\0\4\346\3\351\1\352\2\351\3\352\1\0\2\351"+
    "\1\353\1\0\20\351\23\352\1\351\1\352\2\351\3\352"+
    "\7\351\4\352\1\354\1\355\1\354\1\355\1\354\4\355"+
    "\1\356\2\354\1\357\1\356\20\354\23\355\1\354\1\355"+
    "\2\354\3\355\7\354\4\355\3\360\1\361\2\360\3\361"+
    "\1\140\2\360\1\362\1\140\20\360\23\361\1\360\1\361"+
    "\2\360\3\361\7\360\4\361\1\0\1\143\1\0\1\143"+
    "\1\0\4\143\25\0\23\143\1\0\1\143\2\0\3\143"+
    "\7\0\4\143\24\0\1\363\57\0\1\145\3\0\1\145"+
    "\76\0\1\364\3\0\1\364\1\210\77\0\1\365\2\0"+
    "\3\365\25\0\23\365\1\0\1\365\2\0\3\365\7\0"+
    "\4\365\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\10\34\1\236\12\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\30\154\1\0\52\154\31\0\1\366\147\0\1\367"+
    "\35\0\1\370\54\0\2\371\1\0\2\371\26\0\5\371"+
    "\1\0\4\371\1\0\4\371\1\0\3\371\1\0\1\371"+
    "\2\0\1\371\1\0\1\371\7\0\4\371\11\162\1\163"+
    "\3\162\1\163\6\162\1\163\5\162\1\163\42\162\1\163"+
    "\5\162\11\0\1\372\115\0\1\373\67\0\2\171\2\0"+
    "\1\171\70\0\1\374\2\0\3\374\25\0\23\374\1\0"+
    "\1\374\2\0\3\374\7\0\4\374\3\0\1\374\2\0"+
    "\3\374\1\172\24\0\23\374\1\0\1\374\2\0\3\374"+
    "\7\0\4\374\1\0\1\174\1\0\1\174\1\0\4\174"+
    "\25\0\23\174\1\0\1\174\2\0\3\174\7\0\4\174"+
    "\3\0\1\375\2\0\3\375\2\376\2\0\1\376\20\0"+
    "\23\375\1\0\1\375\2\0\3\375\7\0\4\375\1\0"+
    "\1\176\1\0\1\177\1\0\1\176\76\0\1\364\2\0"+
    "\2\364\17\0\1\364\56\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\5\34\1\377\1\u0100\14\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\377\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\4\34\1\u0101\16\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\14\34\1\u0102\6\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\12\34\1\u0103\10\34"+
    "\1\0\1\34\2\0\3\34\7\0\2\34\1\u0103\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\21\34"+
    "\1\u0104\1\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u0105\20\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0\1\u0106"+
    "\30\0\1\u0106\1\0\1\u0106\2\0\1\u0106\1\0\1\u0106"+
    "\62\0\1\u0107\54\0\1\34\1\0\1\u0108\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\213\1\0\1\213\1\0\4\213\25\0\23\213"+
    "\1\0\1\213\2\0\3\213\7\0\4\213\1\0\1\213"+
    "\1\0\1\213\1\0\4\213\25\0\14\213\1\u0109\6\213"+
    "\1\0\1\213\2\0\3\213\7\0\4\213\3\215\1\0"+
    "\2\215\3\0\5\215\1\216\1\217\1\220\1\215\1\0"+
    "\13\215\23\0\1\215\1\0\2\215\3\0\7\215\4\0"+
    "\121\215\1\0\1\217\1\220\1\215\1\221\60\215\23\0"+
    "\1\200\3\0\1\u010a\103\0\1\u010b\53\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u010c\14\34\1\0"+
    "\1\34\2\0\2\34\1\u010d\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\12\34\1\u010e\10\34"+
    "\1\0\1\34\2\0\3\34\7\0\2\34\1\u010e\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\1\34"+
    "\1\u010f\21\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\4\34"+
    "\1\226\16\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\15\34"+
    "\1\u0110\5\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\22\34"+
    "\1\u0111\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\16\34\1\u0112"+
    "\4\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\u0113"+
    "\1\34\1\u0114\11\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\u0115\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u0116"+
    "\2\34\1\u0117\1\u0118\10\34\1\0\1\34\2\0\3\34"+
    "\7\0\2\34\1\u0118\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\12\34\1\u0119\10\34\1\0\1\34"+
    "\2\0\3\34\7\0\2\34\1\u0119\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\21\34\1\u011a\1\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\10\34\1\u011b\2\34"+
    "\1\u011c\7\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\1\34"+
    "\1\u011d\21\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\1\34"+
    "\1\u011e\21\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\1\u011f"+
    "\22\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\16\34\1\u0120"+
    "\4\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u0121"+
    "\17\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u0122"+
    "\17\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\12\34\1\u0123"+
    "\10\34\1\0\1\34\2\0\3\34\7\0\2\34\1\u0123"+
    "\1\34\1\0\1\34\1\0\1\u0124\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u0125"+
    "\17\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u0126"+
    "\3\34\1\u0127\10\34\1\0\1\34\2\0\3\34\7\0"+
    "\2\34\1\u0127\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\1\u0128\1\34\1\u0129\20\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\16\34\1\u012a\4\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\u012b\20\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u012c\15\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\u012c\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u012d\15\34"+
    "\1\0\1\34\2\0\3\34\7\0\1\34\1\u012d\2\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\12\34"+
    "\1\u012e\10\34\1\0\1\34\2\0\3\34\7\0\2\34"+
    "\1\u012e\1\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u012f\14\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\u0130\22\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\u0131\4\34\1\u0132\15\34\1\0\1\34\2\0\3\34"+
    "\7\0\1\34\1\u0132\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u0133\21\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\2\34\1\u0134\1\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u0135\21\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\36\0\1\u0136\4\0\1\u0137"+
    "\34\0\1\u0137\11\0\1\u0138\76\0\1\u0139\136\0\1\u013a"+
    "\101\0\1\u013b\105\0\1\u013c\115\0\1\u013d\67\0\1\u013e"+
    "\105\0\1\u013f\37\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\3\34\1\u0140\1\u0141\2\34\1\u0142\1\34\1\u0143"+
    "\2\34\1\u0144\1\34\1\u0145\3\34\1\u0146\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\103\311\3\106\1\0\2\106"+
    "\3\0\5\106\1\320\1\321\1\315\1\106\1\0\13\106"+
    "\23\0\1\106\1\0\2\106\3\0\7\106\4\0\16\106"+
    "\1\0\1\321\1\315\1\106\1\324\60\106\1\0\1\317"+
    "\1\0\1\317\1\0\4\317\25\0\23\317\1\0\1\317"+
    "\2\0\3\317\1\0\1\u0147\5\0\4\317\20\113\1\0"+
    "\52\113\1\0\7\113\3\115\1\0\2\115\3\0\5\115"+
    "\1\331\1\115\1\327\1\321\1\0\13\115\23\0\1\115"+
    "\1\0\2\115\3\0\7\115\4\0\16\115\1\0\1\115"+
    "\1\327\1\321\1\332\60\115\3\124\1\0\2\124\3\0"+
    "\1\125\3\124\1\125\1\340\1\124\1\335\1\124\1\0"+
    "\13\124\23\0\1\124\1\0\2\124\3\0\7\124\4\0"+
    "\11\124\1\125\3\124\1\125\1\0\1\124\1\335\1\124"+
    "\1\341\61\124\1\337\1\124\1\337\1\124\4\337\1\u0148"+
    "\2\124\1\u0149\1\u0148\1\334\1\124\1\335\1\124\1\336"+
    "\13\124\23\337\1\124\1\337\2\124\3\337\7\124\4\337"+
    "\1\10\1\342\1\10\1\342\1\10\4\342\1\u014a\2\10"+
    "\1\u014b\1\u014a\20\10\23\342\1\10\1\342\2\10\3\342"+
    "\7\10\4\342\11\0\1\344\3\0\1\344\76\0\1\347"+
    "\3\0\1\347\65\0\3\362\1\u014c\2\362\3\u014c\1\u014d"+
    "\3\362\1\u014d\20\362\23\u014c\1\362\1\u014c\2\362\3\u014c"+
    "\7\362\4\u014c\1\362\1\u014e\1\362\1\u014c\1\362\1\u014e"+
    "\3\u014c\1\u014f\2\362\1\u0150\1\u014f\20\362\23\u014c\1\362"+
    "\1\u014c\2\362\3\u014c\7\362\4\u014c\3\353\1\u0151\2\353"+
    "\3\u0151\1\0\3\353\1\0\20\353\23\u0151\1\353\1\u0151"+
    "\2\353\3\u0151\7\353\4\u0151\3\u0152\1\u0153\2\u0152\3\u0153"+
    "\1\u014f\3\u0152\1\u014f\20\u0152\23\u0153\1\u0152\1\u0153\2\u0152"+
    "\3\u0153\7\u0152\4\u0153\1\u0152\1\u0153\1\u0152\1\u0153\1\u0152"+
    "\4\u0153\1\u0154\2\u0152\1\u0155\1\u0154\20\u0152\23\u0153\1\u0152"+
    "\1\u0153\2\u0152\3\u0153\7\u0152\4\u0153\11\u0156\1\356\3\u0156"+
    "\1\356\65\u0156\3\360\1\u0157\2\360\3\u0157\1\u014d\2\360"+
    "\1\362\1\u014d\20\360\23\u0157\1\360\1\u0157\2\360\3\u0157"+
    "\7\360\4\u0157\1\u0158\1\361\1\u0158\1\361\1\u0158\4\361"+
    "\1\u0154\2\u0158\1\u0155\1\u0154\20\u0158\23\361\1\u0158\1\361"+
    "\2\u0158\3\361\7\u0158\4\361\1\0\1\364\3\0\1\364"+
    "\76\0\1\365\1\0\1\365\1\0\4\365\25\0\23\365"+
    "\1\0\1\365\2\0\3\365\7\0\4\365\3\0\2\u0159"+
    "\1\0\2\u0159\26\0\5\u0159\1\0\4\u0159\1\0\4\u0159"+
    "\1\0\3\u0159\1\0\1\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\7\0\4\u0159\11\0\1\u015a\3\0\1\u015b\66\0\1\374"+
    "\1\0\1\374\1\0\4\374\1\u015c\2\0\1\u015d\1\u015c"+
    "\20\0\23\374\1\0\1\374\2\0\3\374\7\0\4\374"+
    "\1\0\1\375\1\0\1\375\1\0\4\375\25\0\23\375"+
    "\1\0\1\375\2\0\3\375\7\0\4\375\11\0\2\376"+
    "\2\0\1\376\66\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u015e\14\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\u015f\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\4\34"+
    "\1\u0160\1\u0161\1\34\1\u0162\2\34\1\u0163\2\34\1\u0164"+
    "\5\34\1\0\1\34\2\0\3\34\7\0\1\34\1\u0161"+
    "\1\u0163\1\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\u0165\22\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\u0166\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u0167"+
    "\14\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\16\34\1\u0168"+
    "\4\34\1\0\1\34\2\0\3\34\7\0\4\34\27\0"+
    "\1\u010a\54\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\2\34\1\u0169\20\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\213\1\0\1\213\1\0\4\213\25\0"+
    "\5\213\1\u016a\15\213\1\0\1\213\2\0\3\213\7\0"+
    "\1\213\1\u016a\2\213\3\0\1\u016b\2\0\3\u016b\1\0"+
    "\1\u010a\4\0\1\u016c\16\0\23\u016b\1\0\1\u016b\2\0"+
    "\3\u016b\3\0\1\u016d\3\0\4\u016b\31\0\1\u016e\52\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\10\34\1\u016f"+
    "\12\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\10\34\1\u0170"+
    "\12\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u0171"+
    "\14\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\2\34\1\u0172"+
    "\20\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\u0173\1\0\4\34\25\0\23\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\16\34\1\u0174\4\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u0175\20\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\16\34\1\u0176\4\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\u0177\1\0\4\34\25\0\23\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\16\34\1\u0178\4\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\6\34\1\u0179\14\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\u017a\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\16\34\1\u017b\4\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\u017c\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\u017d\22\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u017e\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\22\34\1\u017f\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\12\34\1\u0180\10\34\1\0\1\34\2\0"+
    "\3\34\7\0\2\34\1\u0180\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u0181\20\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\11\34\1\u0182\11\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\u0183\1\0\4\34\25\0\23\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\6\34\1\u0184\3\34\1\u0185\10\34\1\0"+
    "\1\34\2\0\3\34\7\0\2\34\1\u0185\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\11\34\1\u0186"+
    "\11\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\u0187\1\0\4\34\25\0\23\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u0188\17\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\12\34\1\u0189\10\34\1\0"+
    "\1\34\2\0\3\34\7\0\2\34\1\u0189\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\u018a"+
    "\13\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u018b"+
    "\14\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u018c"+
    "\14\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\16\34\1\u018d"+
    "\4\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u018e"+
    "\14\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\u018f\22\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\2\34\1\u0190\1\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u0191\14\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\3\34\1\u0192\17\34"+
    "\1\0\1\u0193\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u0194\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\16\34\1\u0195\4\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\36\0\1\u0196\105\0\1\u0197"+
    "\126\0\1\u0198\55\0\1\u0199\101\0\1\u019a\111\0\1\u019b"+
    "\100\0\1\u019c\74\0\1\u019d\114\0\1\u019e\30\0\1\u019e"+
    "\40\0\1\u019f\44\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\2\34\1\u01a0\20\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\5\34\1\u01a1\15\34\1\0\1\34\2\0\3\34"+
    "\7\0\1\34\1\u01a1\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u01a2\2\34\1\u01a3\12\34"+
    "\1\0\1\34\2\0\3\34\7\0\1\34\1\u01a2\2\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\16\34"+
    "\1\u01a4\4\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u01a5\20\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\5\34"+
    "\1\u01a6\15\34\1\0\1\34\2\0\3\34\7\0\1\34"+
    "\1\u01a6\2\34\1\0\1\34\1\0\1\u01a7\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\11\124\1\u0148\3\124\1\u0148\1\334\1\124\1\335\1\124"+
    "\1\336\60\124\11\10\1\u014a\3\10\1\u014a\65\10\1\351"+
    "\1\u01a8\1\351\1\u01a8\1\351\4\u01a8\1\356\2\351\1\u01a9"+
    "\1\356\20\351\23\u01a8\1\351\1\u01a8\2\351\3\u01a8\7\351"+
    "\4\u01a8\11\u01aa\1\0\2\u01aa\2\0\65\u01aa\1\351\1\352"+
    "\1\351\1\352\1\351\4\352\1\u01ab\2\351\1\u01ac\1\u01ab"+
    "\20\351\23\352\1\351\1\352\2\351\3\352\7\351\4\352"+
    "\3\351\1\352\2\351\3\352\1\u01ab\2\351\1\353\1\u01ab"+
    "\20\351\23\352\1\351\1\352\2\351\3\352\7\351\4\352"+
    "\1\353\1\u0151\1\353\1\u0151\1\353\4\u0151\1\u01ab\2\353"+
    "\1\u01ac\1\u01ab\20\353\23\u0151\1\353\1\u0151\2\353\3\u0151"+
    "\7\353\4\u0151\11\354\1\u01ab\2\354\1\u0156\1\u01ab\76\354"+
    "\1\356\2\354\1\u0156\1\356\65\354\11\u0156\1\u01ab\3\u0156"+
    "\1\u01ab\65\u0156\1\360\1\u0157\1\360\1\u0157\1\360\4\u0157"+
    "\1\u0154\2\360\1\u01ad\1\u0154\20\360\23\u0157\1\360\1\u0157"+
    "\2\360\3\u0157\7\360\4\u0157\3\u0158\1\361\2\u0158\3\361"+
    "\1\u014f\2\u0158\1\u0152\1\u014f\20\u0158\23\361\1\u0158\1\361"+
    "\2\u0158\3\361\7\u0158\4\361\3\0\2\u0159\1\0\2\u0159"+
    "\26\0\5\u0159\1\0\4\u0159\1\0\4\u0159\1\0\3\u0159"+
    "\1\0\1\u0159\2\0\1\u0159\1\0\1\u0159\1\u01ae\6\0"+
    "\4\u0159\11\0\1\u015a\102\0\1\u015c\3\0\1\u015c\66\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u01af"+
    "\17\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\u01b0\1\0\4\34\25\0\23\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\u01b1\13\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\1\u01b2\22\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\15\34\1\u01b3\5\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\14\34\1\u01b4\6\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u01b5\15\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\u01b5\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\13\34\1\u01b6\7\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\17\34\1\u01b7\3\34"+
    "\1\0\1\34\2\0\3\34\7\0\3\34\1\u01b7\1\0"+
    "\1\213\1\0\1\213\1\0\4\213\25\0\12\213\1\u01b8"+
    "\10\213\1\0\1\213\2\0\3\213\7\0\2\213\1\u01b8"+
    "\1\213\1\0\1\u016b\1\0\1\u016b\1\0\4\u016b\1\u01b9"+
    "\3\0\1\u01ba\20\0\23\u016b\1\0\1\u016b\2\0\3\u016b"+
    "\7\0\4\u016b\3\0\1\u01bb\2\0\3\u01bb\25\0\23\u01bb"+
    "\1\0\1\u01bb\2\0\3\u01bb\7\0\4\u01bb\3\0\1\u01bc"+
    "\2\0\3\u01bc\25\0\23\u01bc\1\0\1\u01bc\2\0\3\u01bc"+
    "\7\0\4\u01bc\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\34\1\u01bd\21\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\5\34\1\u01be\15\34\1\0\1\34\2\0\3\34"+
    "\7\0\1\34\1\u01be\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u01bf\21\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\13\34\1\u01c0\7\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\12\34\1\u01c1\10\34\1\0\1\34"+
    "\2\0\3\34\7\0\2\34\1\u01c1\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\10\34\1\u01c2\12\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\2\34\1\u01c3\20\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\34\1\u01c4\21\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\10\34\1\u01c5\12\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\2\34\1\u01c6\20\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u01c7\14\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u01c8\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\15\34\1\u01c9\5\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\u01ca\20\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\u01cb"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\16\34\1\u01cc\4\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u01cd\14\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u01ce\14\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\5\34\1\u01cf\15\34\1\0\1\34\2\0\3\34"+
    "\7\0\1\34\1\u01cf\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u01d0\14\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\14\34\1\u01d1\6\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\u01d2"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\12\34\1\u01d3\10\34\1\0\1\34\2\0\3\34"+
    "\7\0\2\34\1\u01d3\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u01d4\15\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\u01d4\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\11\34\1\u01d5\11\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u01d6\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\u01d7\20\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\u01d8"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u01d9\14\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\2\34\1\u01da\20\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\3\34\1\u01db\17\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\5\34\1\u01dc\15\34\1\0\1\34\2\0\3\34"+
    "\7\0\1\34\1\u01dc\2\34\54\0\1\u01dd\66\0\1\u01de"+
    "\45\0\1\u01df\153\0\1\u01e0\66\0\1\u01e1\51\0\1\u01e2"+
    "\76\0\1\u01e3\6\0\1\u01e0\51\0\1\u01e4\56\0\1\u01e5"+
    "\45\0\1\u01e5\142\0\1\u01e6\34\0\1\u01e6\3\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\22\34\1\u01e7\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\1\34\1\u01e8\21\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\16\34\1\u01e9\4\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u01ea\17\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u01eb\20\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\16\34\1\u01ec\4\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u01ed\17\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u01ee\14\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\362\1\u014c\1\362"+
    "\1\u014c\1\362\4\u014c\1\u0154\2\362\1\u01ad\1\u0154\20\362"+
    "\23\u014c\1\362\1\u014c\2\362\3\u014c\7\362\4\u014c\3\353"+
    "\1\u0151\2\353\3\u0151\1\356\3\353\1\356\20\353\23\u0151"+
    "\1\353\1\u0151\2\353\3\u0151\7\353\4\u0151\3\u014d\1\u01ef"+
    "\2\u014d\3\u01ef\25\u014d\23\u01ef\1\u014d\1\u01ef\2\u014d\3\u01ef"+
    "\7\u014d\4\u01ef\3\353\1\u0151\2\353\3\u0151\1\u01ab\3\353"+
    "\1\u01ab\20\353\23\u0151\1\353\1\u0151\2\353\3\u0151\7\353"+
    "\4\u0151\3\351\1\352\2\351\3\352\1\356\2\351\1\353"+
    "\1\356\20\351\23\352\1\351\1\352\2\351\3\352\7\351"+
    "\4\352\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\4\34\1\u01f0\16\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\11\34\1\u01f1\11\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\34\1\u01f2\21\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\5\34\1\u01f3\15\34\1\0\1\34\2\0\3\34\7\0"+
    "\1\34\1\u01f3\2\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\5\34\1\u01f4\15\34\1\0\1\34\2\0"+
    "\3\34\7\0\1\34\1\u01f4\2\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\u01f5\13\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\11\0\1\u01b9\72\0"+
    "\1\u01bb\1\0\1\u01bb\1\0\4\u01bb\6\0\1\u01f6\16\0"+
    "\23\u01bb\1\0\1\u01bb\2\0\3\u01bb\7\0\4\u01bb\1\0"+
    "\1\u01bc\1\0\1\u01bc\1\0\4\u01bc\25\0\23\u01bc\1\0"+
    "\1\u01bc\2\0\3\u01bc\3\0\1\u01f6\3\0\4\u01bc\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u01f7"+
    "\17\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\34\1\u01f8"+
    "\21\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\2\34\1\u01f9"+
    "\20\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\21\34\1\u01fa"+
    "\1\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\16\34\1\u01fb"+
    "\4\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\34\1\u01fc"+
    "\21\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\u01fd"+
    "\13\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\4\34\1\u01fe"+
    "\16\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u01ff"+
    "\17\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\22\34\1\u0200"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\11\34\1\u0201\11\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u0202\15\34"+
    "\1\0\1\34\2\0\3\34\7\0\1\34\1\u0202\2\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\3\34"+
    "\1\u0203\17\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\11\34"+
    "\1\u0204\11\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\14\34"+
    "\1\u0205\6\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\16\34"+
    "\1\u0206\4\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\11\34"+
    "\1\u0207\11\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\6\34"+
    "\1\u0208\14\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\6\34"+
    "\1\u0209\14\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\11\34"+
    "\1\u020a\11\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\3\0\1\u020b\6\0\1\u01e0\51\0\1\u01e4\55\0\1\u01e1"+
    "\112\0\1\u01e5\45\0\1\u01e0\51\0\1\u01e4\67\0\1\u01e0"+
    "\105\0\1\u020c\104\0\1\u020d\70\0\1\u01e0\77\0\1\u020e"+
    "\42\0\1\34\1\0\1\u020f\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\1\34\1\u0210\1\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u0211\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\11\34\1\u0212\11\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\12\34\1\u0213\10\34\1\0\1\34"+
    "\2\0\3\34\7\0\2\34\1\u0213\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u0214\14\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u0215\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\14\34\1\u0216\6\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\u01aa\1\u0217\1\u01aa\1\u0217"+
    "\1\u01aa\4\u0217\1\356\2\u01aa\1\u0218\1\356\20\u01aa\23\u0217"+
    "\1\u01aa\1\u0217\2\u01aa\3\u0217\7\u01aa\4\u0217\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\12\34\1\u0219\10\34"+
    "\1\0\1\34\2\0\3\34\7\0\2\34\1\u0219\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\16\34"+
    "\1\u021a\4\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\u021b\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u021c\14\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\16\34\1\u021d\4\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\11\0\1\u01b9"+
    "\3\0\1\u01ba\66\0\1\34\1\0\1\u021e\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\11\34"+
    "\1\u021f\11\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u0220\20\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\6\34"+
    "\1\u0221\14\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\u0222\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\2\34\1\u0223\20\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u0224\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\11\34\1\u0225\11\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\u0226"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\14\34\1\u0227\6\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\u0228\22\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\10\34\1\u0229\12\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u022a\14\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\u022b\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\3\34\7\0\4\34\40\0"+
    "\1\u022c\45\0\1\u01e0\102\0\1\u022d\155\0\1\u01e0\25\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\12\34\1\u022e"+
    "\10\34\1\0\1\34\2\0\3\34\7\0\2\34\1\u022e"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\1\34\1\u022f\1\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\1\34\1\u0230\1\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u0231\14\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\12\34\1\u0232\10\34\1\0\1\34\2\0\3\34\7\0"+
    "\2\34\1\u0232\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\1\34\1\u0233"+
    "\1\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\1\34\1\u0234"+
    "\1\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\1\u0235\22\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\u014d\1\u01ef\1\u014d\1\u01ef\1\u014d\4\u01ef"+
    "\1\u0154\2\u014d\1\u0236\1\u0154\20\u014d\23\u01ef\1\u014d\1\u01ef"+
    "\2\u014d\3\u01ef\7\u014d\4\u01ef\11\0\1\356\3\0\1\356"+
    "\66\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u0237\20\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u0238\20\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\11\34"+
    "\1\u0239\11\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\u023a\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\1\34\1\u023b\1\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u023c\14\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\11\34\1\u023d\11\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\11\34\1\u023e\11\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\1\34\1\u023f\1\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u0240\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\3\34\1\u0241\17\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\3\34\1\u0242\17\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\u0243"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\u0244\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\41\0\1\u01e0\100\0\1\u01e0\44\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\21\34\1\u0245\1\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\1\34"+
    "\1\u0246\1\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u0247\15\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\u0247\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\1\34\1\u0248\1\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\11\34\1\u0249\11\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\1\34\1\u024a\1\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\4\34\1\u024b\16\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\11\u01aa\1\356"+
    "\2\u01aa\1\0\1\356\65\u01aa\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u024c\21\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\11\34\1\u024d\11\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\14\34\1\u024e\6\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\u024f\22\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\u0250\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\u0251\1\0\4\34\25\0"+
    "\23\34\1\0\1\34\2\0\3\34\7\0\4\34\1\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\u0252\22\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\u0253\22\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u0254\14\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\4\34\1\u0255\16\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u0256\20\34\1\0"+
    "\1\34\2\0\3\34\7\0\4\34\1\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\1\u0257\22\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\1\34"+
    "\1\u0258\1\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\u0259\22\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\1\34\1\u025a"+
    "\1\34\7\0\4\34\1\0\1\34\1\0\1\u025b\1\0"+
    "\4\34\25\0\23\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\14\34\1\u025c\6\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\3\34\1\u025d\17\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\3\34\1\u025e\17\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\u025f\13\34\1\0\1\34\2\0\3\34\7\0"+
    "\4\34\1\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\12\34\1\u0260\10\34\1\0\1\34\2\0\3\34\7\0"+
    "\2\34\1\u0260\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\11\34\1\u0261\11\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\3\34\1\u0262\17\34\1\0\1\34\2\0"+
    "\3\34\7\0\4\34\1\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\22\34\1\u0263\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\1\34\1\u0264\1\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\11\34\1\u0265\11\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\11\34\1\u0266\11\34\1\0\1\34\2\0\3\34"+
    "\7\0\4\34\1\0\1\34\1\0\1\u0267\1\0\4\34"+
    "\25\0\23\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\1\34\1\u0268\1\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\34\1\0\4\34\25\0\21\34"+
    "\1\u0269\1\34\1\0\1\34\2\0\3\34\7\0\4\34"+
    "\1\0\1\34\1\0\1\u026a\1\0\4\34\25\0\23\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u026b\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\1\34"+
    "\1\u026c\1\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\23\34\1\0\1\34\2\0\1\34"+
    "\1\u026d\1\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u026e\15\34\1\0\1\34"+
    "\2\0\3\34\7\0\1\34\1\u026e\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\1\34\1\u026f\1\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\16\34\1\u0270\4\34"+
    "\1\0\1\34\2\0\3\34\7\0\4\34\1\0\1\34"+
    "\1\0\1\u0271\1\0\4\34\25\0\23\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u0272\21\34\1\0\1\34"+
    "\2\0\3\34\7\0\4\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32763];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unknown internal scanner error",		//$NON-NLS-1$
		"Error: could not match input",			//$NON-NLS-1$
		"Error: pushback value was too large"	//$NON-NLS-1$
	};

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\5\0\2\1\13\0\1\11\11\1\2\11\2\1"+
    "\2\11\40\1\1\11\3\1\1\11\10\1\1\11\10\1"+
    "\1\11\1\1\1\11\3\1\1\0\1\1\1\11\3\1"+
    "\1\11\1\1\1\11\2\1\1\11\2\1\1\11\4\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\0\5\1"+
    "\1\11\6\1\1\11\2\0\3\1\2\0\1\11\2\0"+
    "\3\1\1\11\46\1\1\11\1\1\12\0\1\1\2\0"+
    "\1\11\3\0\2\1\3\11\1\1\4\0\2\1\1\11"+
    "\3\0\4\1\1\0\1\11\2\0\1\11\6\0\1\11"+
    "\4\0\1\11\2\1\1\11\1\0\1\11\1\1\1\11"+
    "\1\1\1\0\12\1\1\0\2\1\1\0\53\1\12\0"+
    "\7\1\2\11\1\1\1\11\1\1\3\0\1\1\4\0"+
    "\1\1\5\0\1\11\1\1\1\11\1\0\15\1\3\0"+
    "\1\11\47\1\12\0\10\1\3\0\1\11\2\0\1\11"+
    "\12\1\1\11\1\1\2\0\40\1\7\0\1\11\2\0"+
    "\10\1\1\0\6\1\1\0\24\1\4\0\10\1\2\0"+
    "\23\1\2\0\10\1\1\0\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[626];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/** this buffer contains the current text to be matched and is
		the source of the yytext() string */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** endRead marks the last character in the buffer, that has been read
		from input */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead.
	 * When a lead/high surrogate has been read from the input stream
	 * into the final zzBuffer position, this will have a value of 1;
	 * otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

  /* user code: */
	public PHPLexer(int state) {
		initialize(state);
	}

	// NB: this method resets the lexer only partially
	protected void reset(java.io.Reader reader, char[] buffer, int[] parameters) {
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzFinalHighSurrogate = 0;
		this.zzMarkedPos = parameters[0];
		this._zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];
		initialize(parameters[6]);
	}

	public int getInScriptingState() {
		return ST_PHP_IN_SCRIPTING;
	}

	private static final int[] heredocStates = new int[] { ST_PHP_HEREDOC, ST_PHP_NOWDOC, ST_PHP_START_HEREDOC, ST_PHP_START_NOWDOC, ST_PHP_END_HEREDOC, ST_PHP_END_NOWDOC };

	public int[] getHeredocStates() {
		return heredocStates;
	}

	private static final int[] phpQuotesStates = new int[] { ST_PHP_DOUBLE_QUOTES, ST_PHP_SINGLE_QUOTE, ST_PHP_BACKQUOTE, ST_PHP_HEREDOC, ST_PHP_NOWDOC, ST_PHP_START_HEREDOC, ST_PHP_START_NOWDOC, ST_PHP_END_HEREDOC, ST_PHP_END_NOWDOC };

	public int[] getPHPQuotesStates() {
		return phpQuotesStates;
	}

	public int[] getParameters() {
		return new int[]{zzMarkedPos, _zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
	}

	protected int getZZLexicalState() {
		return zzLexicalState;
	}

	protected int getZZMarkedPos() {
		return zzMarkedPos;
	}

	protected int getZZEndRead() {
		return zzEndRead;
	}

	public char[] getZZBuffer() {
		return zzBuffer;
	}

	protected int getZZStartRead() {
		return this.zzStartRead;
	}

	protected int getZZPushBackPosition() {
		return this._zzPushbackPos;
	}

	protected void pushBack(int i) {
		yypushback(i);
	}

	public int getScriptingState() {
		return ST_PHP_IN_SCRIPTING;
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final Map<LexerState, LexerState> lexerStates = new HashMap<>();

	protected Map<LexerState, LexerState> getLexerStates() {
		return lexerStates;
	}

	// End user code


	/** the textposition at the last state to be included in yytext */
	private int _zzPushbackPos;

	/* The following fields are added in order to support the change in zzRefill */
	private String oldString = null;
	private boolean useOldString = false;
	private int startPos = 0;

	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 *
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		if (useOldString) {
			String saveOldString = oldString;
			oldString = new String(zzBuffer, startPos, zzMarkedPos - startPos);
			if (saveOldString != null) {
				oldString = saveOldString + oldString;
			}
		}

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
							zzBuffer, 0,
							zzEndRead-zzStartRead);

			/* translate stored positions */
			zzEndRead-= zzStartRead;
			zzCurrentPos-= zzStartRead;
			zzMarkedPos-= zzStartRead;
			_zzPushbackPos-= zzStartRead;
			startPos = 0;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length*2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters.");
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			/* If numRead == requested, we might have requested to few chars to
			   encode a full Unicode character. We assume that a Reader would
			   otherwise never return half characters. */
			if (numRead == requested) {
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Gets the next input character.
	 *
	 * @return      the next character of the input stream, EOF if the
	 *              end of the stream is reached.
	 * @exception   IOException  if any I/O-Error occurs
	 */
	private int yy_advance() throws java.io.IOException {

		/* standard case */
		if (zzCurrentPos < zzEndRead) return zzBuffer[zzCurrentPos++];

		/* if the eof is reached, we don't need to work hard */
		if (zzAtEOF) return YYEOF;

		/* otherwise: need to refill the buffer */

		String saveOldString = oldString;
		oldString = null;

		/* first: make room (if you can) */
		if (zzRefill()) {
			oldString = saveOldString;
			return YYEOF;
		}

		oldString = saveOldString;

		return zzBuffer[zzCurrentPos++];
	}


	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true;            /* indicate end of file */
		zzEndRead = zzStartRead;  /* invalidate buffer    */

		if (zzReader != null)
			zzReader.close();
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = _zzPushbackPos = startPos = 0;
		zzFinalHighSurrogate = 0;
		oldString = null;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead+pos];
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos-zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param   errorCode  the code of the errormessage to display
	 */
  private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

    throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number  the number of characters to be read again.
	 *                This number must not be greater than yylength()!
	 */
  public void yypushback(int number)  {
		if ( number > yylength() )
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * user method - common.sse
	 */
	private void updateStartPos() {
		updateStartPos(zzMarkedPos);
	}


	/**
	 * user method - common.sse
	 */
	private void updateStartPos(int position) {
		startPos = position;
		oldString = null;
	}


	/**
	 * user method - common.sse
	 */
	public final boolean isEOF() {
		return zzAtEOF;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return      the next token
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
  public String yylex() throws java.io.IOException {
	int zzInput;
	int zzAction;

	// cached fields:
	int zzCurrentPosL;
	int zzMarkedPosL;
	int zzEndReadL = zzEndRead;
	char [] zzBufferL = zzBuffer;
	char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

	while (true) {
		zzMarkedPosL = zzMarkedPos;

		zzAction = -1;

		zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


		zzForAction: {
			while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
				zzAction = zzState;
				zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
				}

			}
		}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
        return null;
			}
			else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return PHP_ENCAPSED_AND_WHITESPACE;
            }
          case 140: break;
          case 2: 
            { return PHP_CONSTANT_ENCAPSED_STRING;
            }
          case 141: break;
          case 3: 
            { yypushback(1);
	pushState(ST_PHP_HIGHLIGHTING_ERROR);
            }
          case 142: break;
          case 4: 
            { return PHP_NUMBER;
            }
          case 143: break;
          case 5: 
            { return PHP_TOKEN;
            }
          case 144: break;
          case 6: 
            { return PHP_LABEL;
            }
          case 145: break;
          case 7: 
            { return WHITESPACE;
            }
          case 146: break;
          case 8: 
            { return PHP_SEMICOLON;
            }
          case 147: break;
          case 9: 
            { pushState(ST_PHP_DOUBLE_QUOTES);
	return PHP_CONSTANT_ENCAPSED_STRING;
            }
          case 148: break;
          case 10: 
            { return PHP_NS_SEPARATOR;
            }
          case 149: break;
          case 11: 
            { pushState(ST_PHP_BACKQUOTE);
	return PHP_CONSTANT_ENCAPSED_STRING;
            }
          case 150: break;
          case 12: 
            { // Whitespaces are directly appended to the curly before pushState()
	// is effective or whitespaces would be stored in a separate ContextRegion.
	// Method PhpTokenContainer#addLast() will correct the curlies length...
	if (!phpStack.isEmpty()) {
		// Only push the state when stack is not empty, it's useless otherwise
		// (and it pollutes the stack).
		pushState(ST_PHP_IN_SCRIPTING);
	}
	return PHP_CURLY_OPEN;
            }
          case 151: break;
          case 13: 
            { // Whitespaces are directly appended to the curly before pushState()
	// is effective or whitespaces would be stored in a separate ContextRegion.
	// Method PhpTokenContainer#addLast() will correct the curlies length...
	if (!phpStack.isEmpty()) {
		popState();
		// If new state is not ST_PHP_IN_SCRIPTING then some blanks are signifiant (like newlines
		// after the closing curly and before an ending heredoc tag), so don't append them...
		// See rule <ST_PHP_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?
		if (getZZLexicalState() != ST_PHP_IN_SCRIPTING) {
			yypushback(yylength() - 1);
		}
	}
	return PHP_CURLY_CLOSE;
            }
          case 152: break;
          case 14: 
            { pushState(ST_PHP_SINGLE_QUOTE);
	return PHP_CONSTANT_ENCAPSED_STRING;
            }
          case 153: break;
          case 15: 
            { pushState(ST_PHP_LINE_COMMENT);
	return PHP_LINE_COMMENT;
            }
          case 154: break;
          case 16: 
            { popState();
	return PHP_CONSTANT_ENCAPSED_STRING;
            }
          case 155: break;
          case 17: 
            { yypushback(1);
		popState();
            }
          case 156: break;
          case 18: 
            { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
            }
          case 157: break;
          case 19: 
            { yypushback(1);
	yybegin(ST_PHP_NOWDOC);
            }
          case 158: break;
          case 20: 
            { yypushback(1);
	popState();
            }
          case 159: break;
          case 21: 
            { popState();
	return PHP_LABEL;
            }
          case 160: break;
          case 22: 
            { /* Offset could be treated as a long */
	return PHP_NUMBER;
            }
          case 161: break;
          case 23: 
            { //the difference from the original rules comes from the fact that we took ';' out of tokens
	return UNKNOWN_TOKEN;
            }
          case 162: break;
          case 24: 
            { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
            }
          case 163: break;
          case 25: 
            { popState();
	return PHP_TOKEN;
            }
          case 164: break;
          case 26: 
            { return PHP_COMMENT;
            }
          case 165: break;
          case 27: 
            { return PHPDOC_COMMENT;
            }
          case 166: break;
          case 28: 
            { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			if (yylength() > 0) {
				return PHP_LINE_COMMENT;
			}
			break;
		default:
			popState();
			return PHP_LINE_COMMENT;
	}
            }
          case 167: break;
          case 29: 
            { return PHP_LINE_COMMENT;
            }
          case 168: break;
          case 30: 
            { return UNKNOWN_TOKEN;
            }
          case 169: break;
          case 31: 
            { popState();return WHITESPACE;
            }
          case 170: break;
          case 32: 
            { yybegin(ST_PHP_IN_SCRIPTING);
	return PHP_ENCAPSED_VARIABLE;
            }
          case 171: break;
          case 33: 
            { yybegin(ST_PHP_IN_SCRIPTING);
	return PHP_CURLY_OPEN;
            }
          case 172: break;
          case 34: 
            { return PHP_OPERATOR;
            }
          case 173: break;
          case 35: 
            { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
	return PHP_OBJECT_OPERATOR;
            }
          case 174: break;
          case 36: 
            { return PHP_VARIABLE;
            }
          case 175: break;
          case 37: 
            { pushState(ST_PHP_COMMENT);
	return PHP_COMMENT_START;
            }
          case 176: break;
          case 38: 
            { if (asp_tags) {
		return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
            }
          case 177: break;
          case 39: 
            { return PHP_AS;
            }
          case 178: break;
          case 40: 
            { return PHP_DO;
            }
          case 179: break;
          case 41: 
            { return PHP_IF;
            }
          case 180: break;
          case 42: 
            { return PHP_PAAMAYIM_NEKUDOTAYIM;
            }
          case 181: break;
          case 43: 
            { return PHP_CLOSETAG;
            }
          case 182: break;
          case 44: 
            { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
	return PHP_VARIABLE;
            }
          case 183: break;
          case 45: 
            { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
            }
          case 184: break;
          case 46: 
            { // We can have nested curlies after applying this rule,
	// so we have to count all curlies...
	yypushback(1);
	pushState(ST_PHP_DOLLAR_CURLY_OPEN);
	return PHP_TOKEN;
            }
          case 185: break;
          case 47: 
            { // We can have nested curlies after applying rule below for "${",
	// so we have to count all curlies...
	yypushback(1);
	pushState(ST_PHP_IN_SCRIPTING);
	return PHP_CURLY_OPEN;
            }
          case 186: break;
          case 48: 
            { popState();
	pushState(ST_PHP_LOOKING_FOR_PROPERTY);
	return PHP_OBJECT_OPERATOR;
            }
          case 187: break;
          case 49: 
            { String yytext = yytext();
	int label_len = yylength() - 1;

	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}

	String heredoc = getHeredocId();
	int heredoc_len = heredoc.length();
	if (label_len == heredoc_len && yytext.substring(0, label_len).equals(heredoc)) {
		// we must (at least) push the newline character back
		yypushback(1);
		popHeredocId();
		popState();
		return PHP_HEREDOC_CLOSE_TAG;
	} else {
		// we must (at least) push the newline character back
		yypushback(1);
		return PHP_ENCAPSED_AND_WHITESPACE;
	}
            }
          case 188: break;
          case 50: 
            { String yytext = yytext();
	int label_len = yylength() - 1;

	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}

	String nowdoc = getHeredocId();
	int nowdoc_len = nowdoc.length();
	if (label_len == nowdoc_len && yytext.substring(0, label_len).equals(nowdoc)) {
		// we must (at least) push the newline character back
		yypushback(1);
		popHeredocId();
		popState();
		return PHP_NOWDOC_CLOSE_TAG;
	} else {
		// we must (at least) push the newline character back
		yypushback(1);
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
            }
          case 189: break;
          case 51: 
            { String yytext = yytext();
	int label_len = yylength() - 1;
	int startIndex = 0;
	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	while (yytext.charAt(startIndex) == '\r'
			|| yytext.charAt(startIndex) == '\n') {
		startIndex++;
	}

	String heredoc = getHeredocId();
	int heredoc_len = heredoc.length();
	if (label_len > heredoc_len
			&& yytext.substring(startIndex, label_len).equals(
					heredoc)) {
		// we must (at least) push the newline character back
		yypushback(1);
		popHeredocId();
		popState();
		return PHP_HEREDOC_CLOSE_TAG;
	} else {
		// we must (at least) push the newline character back
		yypushback(1);
		yybegin(ST_PHP_HEREDOC);
		return PHP_ENCAPSED_AND_WHITESPACE;
	}
            }
          case 190: break;
          case 52: 
            { return PHP_OBJECT_OPERATOR;
            }
          case 191: break;
          case 53: 
            { popState();
	return PHP_COMMENT_END;
            }
          case 192: break;
          case 54: 
            { popState();
	return PHPDOC_COMMENT_END;
            }
          case 193: break;
          case 55: 
            { TagKind tagkind = TagKind.getTagKindFromValue(yytext());
		if (tagkind != null /* ignore @todo tag */
			&& !"@todo".equalsIgnoreCase(tagkind.getValue())) {
				return PHPDOC_GENERIC_TAG;
		}
		return PHPDOC_COMMENT;
            }
          case 194: break;
          case 56: 
            { popState();
	return PHP_LINE_COMMENT;
            }
          case 195: break;
          case 57: 
            { if (asp_tags) {
		return PHP_CLOSETAG;
	}
	return PHP_LINE_COMMENT;
            }
          case 196: break;
          case 58: 
            { yypushback(yylength() - 1);
	return PHP_CURLY_OPEN;
            }
          case 197: break;
          case 59: 
            { pushState(ST_PHP_DOC_COMMENT);
	return PHPDOC_COMMENT_START;
            }
          case 198: break;
          case 60: 
            { return PHP_NEW;
            }
          case 199: break;
          case 61: 
            { return PHP_DIE;
            }
          case 200: break;
          case 62: 
            { return PHP_TRY;
            }
          case 201: break;
          case 63: 
            { return PHP_FOR;
            }
          case 202: break;
          case 64: 
            { return PHP_USE;
            }
          case 203: break;
          case 65: 
            { return PHP_VAR;
            }
          case 204: break;
          case 66: 
            { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
            }
          case 205: break;
          case 67: 
            { String yytext = yytext();
	int label_len = yylength() - 1;

	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	String heredoc = getHeredocId();
	int heredoc_len = heredoc.length();
	int startIndex = label_len - heredoc_len;
	if (startIndex > 0 && yytext.substring(startIndex, label_len).equals(heredoc)) {

		if (startIndex - 2 >= 0
			&& yytext.charAt(startIndex - 2) == '\r'
			&& yytext.charAt(startIndex - 1) == '\n') {
			startIndex-= 2;
		} else {
			startIndex--;
		}
		yypushback(yylength() - startIndex);

		yybegin(ST_PHP_END_HEREDOC);
	} else {
		// we must (at least) push the newline character back
		yypushback(1);
	}
	// In some cases, all text is pushed back (using yypushback()),
	// especially when the parsed document has Windows newlines.
	// In those cases, ignore this rule and try next one...
	if (yylength() > 0) {
		return PHP_ENCAPSED_AND_WHITESPACE;
	}
            }
          case 206: break;
          case 68: 
            { String yytext = yytext();
	int label_len = yylength() - 1;

	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	String nowdoc = getHeredocId();
	int nowdoc_len = nowdoc.length();
	int startIndex = label_len - nowdoc_len;
	if (startIndex > 0 && yytext.substring(startIndex, label_len).equals(nowdoc)) {

		if (startIndex - 2 >= 0
			&& yytext.charAt(startIndex - 2) == '\r'
			&& yytext.charAt(startIndex - 1) == '\n') {
			startIndex-= 2;
		} else {
			startIndex--;
		}
		yypushback(yylength() - startIndex);

		yybegin(ST_PHP_END_NOWDOC);
	} else {
		// we must (at least) push the newline character back
		yypushback(1);
	}
	// In some cases, all text is pushed back (using yypushback()),
	// especially when the parsed document has Windows newlines.
	// In those cases, ignore this rule and try next one...
	if (yylength() > 0) {
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
            }
          case 207: break;
          case 69: 
            { // we must (at least) push the newline character back
	yypushback(1);
	yybegin(ST_PHP_HEREDOC);
	return PHP_ENCAPSED_AND_WHITESPACE;
            }
          case 208: break;
          case 70: 
            { yypushback(yylength() - 2);
	if (asp_tags) {
		return PHP_CLOSETAG;
	}
	popState();
	return PHP_LINE_COMMENT;
            }
          case 209: break;
          case 71: 
            { // we must (at least) push the newline character back
	yypushback(1);
	popHeredocId();
	popState();
	return PHP_NOWDOC_CLOSE_TAG;
            }
          case 210: break;
          case 72: 
            { return PHP_EXIT;
            }
          case 211: break;
          case 73: 
            { return PHP_ECHO;
            }
          case 212: break;
          case 74: 
            { return PHP_ELSE;
            }
          case 213: break;
          case 75: 
            { return PHP_EVAL;
            }
          case 214: break;
          case 76: 
            { yypushback(2);
	pushState(ST_PHP_COMMENT);
	return PHP_COMMENT_START;
            }
          case 215: break;
          case 77: 
            { return PHP_KEYWORD;
            }
          case 216: break;
          case 78: 
            { return PHP_TRUE;
            }
          case 217: break;
          case 79: 
            { return PHP_FROM;
            }
          case 218: break;
          case 80: 
            { return PHP_CASE;
            }
          case 219: break;
          case 81: 
            { return PHP_SELF;
            }
          case 220: break;
          case 82: 
            { return PHP_LIST;
            }
          case 221: break;
          case 83: 
            { return PHP_GOTO;
            }
          case 222: break;
          case 84: 
            { if (TagKind.getTagKindFromValue(yytext()) != null) {
			return PHPDOC_GENERIC_TAG;
		}
		return PHPDOC_COMMENT;
            }
          case 223: break;
          case 85: 
            { return PHP_ENDIF;
            }
          case 224: break;
          case 86: 
            { return PHP_EMPTY;
            }
          case 225: break;
          case 87: 
            { return PHP_BREAK;
            }
          case 226: break;
          case 88: 
            { return PHP_THIS;
            }
          case 227: break;
          case 89: 
            { String yytext = yytext();
	int bprefix = (yytext.charAt(0) != '<') ? 1 : 0;
	int startString = 3 + bprefix;

	int hereOrNowDoc_len = yylength() - bprefix - 3 - 1 - (yytext.charAt(yylength() - 2) == '\r' ? 1 : 0);
	while ((yytext.charAt(startString) == ' ') || (yytext.charAt(startString) == '\t')) {
		startString++;
		hereOrNowDoc_len--;
	}
	String hereOrNowDoc = yytext.substring(startString, hereOrNowDoc_len + startString);
	if (hereOrNowDoc.charAt(0) == '\'') {
		pushHeredocId(hereOrNowDoc.substring(1, hereOrNowDoc_len - 1));
		pushState(ST_PHP_START_NOWDOC);
		return PHP_NOWDOC_START_TAG;
	} else if (hereOrNowDoc.charAt(0) == '"') {
		pushHeredocId(hereOrNowDoc.substring(1, hereOrNowDoc_len - 1));
		pushState(ST_PHP_START_HEREDOC);
		return PHP_HEREDOC_START_TAG;
	} else {
		pushHeredocId(hereOrNowDoc);
		pushState(ST_PHP_START_HEREDOC);
		return PHP_HEREDOC_START_TAG;
	}
            }
          case 228: break;
          case 90: 
            { return PHP_ARRAY;
            }
          case 229: break;
          case 91: 
            { return PHP_ISSET;
            }
          case 230: break;
          case 92: 
            { return PHP_THROW;
            }
          case 231: break;
          case 93: 
            { return PHP_FALSE;
            }
          case 232: break;
          case 94: 
            { return PHP_FINAL;
            }
          case 233: break;
          case 95: 
            { return PHP_UNSET;
            }
          case 234: break;
          case 96: 
            { return PHP_CONST;
            }
          case 235: break;
          case 97: 
            { return PHP_CATCH;
            }
          case 236: break;
          case 98: 
            { return PHP_CLONE;
            }
          case 237: break;
          case 99: 
            { return PHP_CLASS;
            }
          case 238: break;
          case 100: 
            { return PHP_WHILE;
            }
          case 239: break;
          case 101: 
            { return PHP_PRINT;
            }
          case 240: break;
          case 102: 
            { return PHP_CASTING;
            }
          case 241: break;
          case 103: 
            { return PHP_ENDFOR;
            }
          case 242: break;
          case 104: 
            { return PHP_ELSEIF;
            }
          case 243: break;
          case 105: 
            { return PHP_RETURN;
            }
          case 244: break;
          case 106: 
            { return PHP_STATIC;
            }
          case 245: break;
          case 107: 
            { return PHP_SWITCH;
            }
          case 246: break;
          case 108: 
            { return PHP_GLOBAL;
            }
          case 247: break;
          case 109: 
            { return PHP_PARENT;
            }
          case 248: break;
          case 110: 
            { return PHP_PUBLIC;
            }
          case 249: break;
          case 111: 
            { return PHP_EXTENDS;
            }
          case 250: break;
          case 112: 
            { return PHP_REQUIRE;
            }
          case 251: break;
          case 113: 
            { return PHP_DEFAULT;
            }
          case 252: break;
          case 114: 
            { return PHP_DECLARE;
            }
          case 253: break;
          case 115: 
            { return PHP_INCLUDE;
            }
          case 254: break;
          case 116: 
            { return PHP_FOREACH;
            }
          case 255: break;
          case 117: 
            { return PHP_PRIVATE;
            }
          case 256: break;
          case 118: 
            { return PHP__DIR__;
            }
          case 257: break;
          case 119: 
            { return PHP_ENDWHILE;
            }
          case 258: break;
          case 120: 
            { return PHP_ABSTRACT;
            }
          case 259: break;
          case 121: 
            { return PHP_FUNCTION;
            }
          case 260: break;
          case 122: 
            { return PHP_CONTINUE;
            }
          case 261: break;
          case 123: 
            { return PHP__FILE__;
            }
          case 262: break;
          case 124: 
            { return PHP__LINE__;
            }
          case 263: break;
          case 125: 
            { return PHP_ENDSWITCH;
            }
          case 264: break;
          case 126: 
            { return PHP_NAMESPACE;
            }
          case 265: break;
          case 127: 
            { return PHP_INTERFACE;
            }
          case 266: break;
          case 128: 
            { return PHP_PROTECTED;
            }
          case 267: break;
          case 129: 
            { return PHP__CLASS__;
            }
          case 268: break;
          case 130: 
            { return PHP_ENDDECLARE;
            }
          case 269: break;
          case 131: 
            { return PHP_ENDFOREACH;
            }
          case 270: break;
          case 132: 
            { return PHP_INSTANCEOF;
            }
          case 271: break;
          case 133: 
            { return PHP_IMPLEMENTS;
            }
          case 272: break;
          case 134: 
            { return PHP__METHOD__;
            }
          case 273: break;
          case 135: 
            { return PHP_REQUIRE_ONCE;
            }
          case 274: break;
          case 136: 
            { return PHP_INCLUDE_ONCE;
            }
          case 275: break;
          case 137: 
            { return PHP__FUNCTION__;
            }
          case 276: break;
          case 138: 
            { return PHP__NAMESPACE__;
            }
          case 277: break;
          case 139: 
            { return PHP_HALT_COMPILER;
            }
          case 278: break;
		default:
            zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
