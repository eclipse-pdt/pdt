
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package org.eclipse.php.internal.core.ast.scanner.php5;

import java.util.*;
import org.eclipse.dltk.core.DLTKCore;
import org.eclipse.php.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PHPAstParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public PHPAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PHPAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\006\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\006\000\002\005\003\000\002\010" +
    "\005\000\002\010\011\000\002\010\014\000\002\010\007" +
    "\000\002\010\011\000\002\010\013\000\002\010\007\000" +
    "\002\010\004\000\002\010\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\010\004\000\002\010\005\000" +
    "\002\010\007\000\002\010\012\000\002\010\012\000\002" +
    "\010\007\000\002\010\003\000\002\010\017\000\002\010" +
    "\005\000\002\010\003\000\002\010\004\000\002\010\005" +
    "\000\002\120\003\000\002\120\002\000\002\121\003\000" +
    "\002\121\004\000\002\122\012\000\002\011\003\000\002" +
    "\011\005\000\002\012\003\000\002\013\003\000\002\013" +
    "\005\000\002\115\003\000\002\116\003\000\002\044\002" +
    "\000\002\044\003\000\002\123\013\000\002\124\011\000" +
    "\002\124\010\000\002\125\003\000\002\125\004\000\002" +
    "\125\004\000\002\126\002\000\002\126\004\000\002\103" +
    "\003\000\002\104\002\000\002\104\004\000\002\127\002" +
    "\000\002\127\004\000\002\130\003\000\002\130\005\000" +
    "\002\014\002\000\002\014\004\000\002\015\003\000\002" +
    "\015\004\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\021\005\000\002\021\007\000\002\022\005\000" +
    "\002\022\006\000\002\022\005\000\002\022\006\000\002" +
    "\023\002\000\002\023\007\000\002\023\006\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\005" +
    "\000\002\026\002\000\002\026\010\000\002\027\002\000" +
    "\002\027\011\000\002\030\002\000\002\030\004\000\002" +
    "\031\002\000\002\031\005\000\002\032\003\000\002\032" +
    "\002\000\002\033\003\000\002\033\005\000\002\034\004" +
    "\000\002\034\005\000\002\034\006\000\002\034\007\000" +
    "\002\131\002\000\002\131\003\000\002\131\003\000\002" +
    "\035\003\000\002\035\002\000\002\036\003\000\002\036" +
    "\003\000\002\036\004\000\002\036\005\000\002\036\005" +
    "\000\002\036\006\000\002\037\005\000\002\037\003\000" +
    "\002\040\003\000\002\040\004\000\002\040\006\000\002" +
    "\041\005\000\002\041\007\000\002\041\003\000\002\041" +
    "\005\000\002\042\004\000\002\042\002\000\002\043\005" +
    "\000\002\043\004\000\002\043\012\000\002\043\004\000" +
    "\002\112\003\000\002\112\005\000\002\133\003\000\002" +
    "\133\003\000\002\111\002\000\002\111\003\000\002\113" +
    "\003\000\002\113\004\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\107\005\000\002\107\007\000\002" +
    "\107\003\000\002\107\005\000\002\110\007\000\002\110" +
    "\006\000\002\045\005\000\002\045\003\000\002\046\002" +
    "\000\002\046\003\000\002\047\005\000\002\047\003\000" +
    "\002\050\010\000\002\050\005\000\002\050\006\000\002" +
    "\050\010\000\002\050\005\000\002\050\004\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\007\000" +
    "\002\050\003\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\003\000\002\050\006\000\002\050\005\000" +
    "\002\050\004\000\002\051\006\000\002\051\010\000\002" +
    "\051\010\000\002\051\006\000\002\106\003\000\002\141" +
    "\003\000\002\141\003\000\002\143\003\000\002\145\003" +
    "\000\002\145\005\000\002\145\005\000\002\052\002\000" +
    "\002\052\004\000\002\052\005\000\002\053\002\000\002" +
    "\053\005\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\004\000\002\055\004\000\002" +
    "\055\006\000\002\055\003\000\002\146\005\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\057\002\000" +
    "\002\057\004\000\002\060\002\000\002\060\003\000\002" +
    "\061\007\000\002\061\005\000\002\061\005\000\002\061" +
    "\003\000\002\062\003\000\002\062\003\000\002\132\003" +
    "\000\002\105\003\000\002\134\003\000\002\117\003\000" +
    "\002\117\005\000\002\117\005\000\002\117\010\000\002" +
    "\117\010\000\002\135\003\000\002\135\004\000\002\067" +
    "\006\000\002\067\006\000\002\067\003\000\002\136\006" +
    "\000\002\136\005\000\002\147\003\000\002\147\003\000" +
    "\002\144\003\000\002\144\004\000\002\144\003\000\002" +
    "\063\006\000\002\063\006\000\002\063\003\000\002\064" +
    "\003\000\002\064\006\000\002\065\002\000\002\065\003" +
    "\000\002\066\006\000\002\066\006\000\002\066\003\000" +
    "\002\070\003\000\002\070\005\000\002\071\003\000\002" +
    "\071\004\000\002\072\005\000\002\072\003\000\002\073" +
    "\003\000\002\073\006\000\002\073\002\000\002\074\002" +
    "\000\002\074\004\000\002\075\007\000\002\075\005\000" +
    "\002\075\005\000\002\075\003\000\002\075\010\000\002" +
    "\075\006\000\002\075\006\000\002\075\004\000\002\076" +
    "\004\000\002\076\004\000\002\076\004\000\002\076\002" +
    "\000\002\077\003\000\002\077\006\000\002\077\005\000" +
    "\002\077\005\000\002\077\010\000\002\077\005\000\002" +
    "\077\005\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\101\006\000\002\101\006\000\002\101\004" +
    "\000\002\101\004\000\002\101\006\000\002\101\004\000" +
    "\002\101\004\000\002\137\003\000\002\137\005\000\002" +
    "\142\005\000\002\140\003\000\002\102\003\000\002\102" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02d0\000\002\001\ufffe\000\004\002\u02d2\001\002\000" +
    "\224\003\116\004\141\005\152\006\110\007\011\010\035" +
    "\012\061\014\074\017\127\020\021\021\122\022\120\023" +
    "\045\025\034\027\102\031\153\034\103\036\130\042\055" +
    "\043\121\044\107\046\135\047\042\051\150\052\026\053" +
    "\012\055\076\056\144\057\031\060\057\061\033\062\140" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\102\064\105\024\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\136\010\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\206\043\207\062\210\016\214\145\217\101\220\113" +
    "\221\060\222\077\001\001\000\002\001\uff06\000\004\214" +
    "\u02cf\001\002\000\002\001\uffda\000\002\001\uff09\000\006" +
    "\012\u02c4\217\u02c5\001\002\000\004\214\u02af\001\002\000" +
    "\002\001\uff1e\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\004\061\u02ad\001\002\000\070\033" +
    "\257\115\246\116\267\117\240\135\243\136\u02ac\137\237" +
    "\140\261\141\241\142\250\143\260\144\265\145\252\146" +
    "\235\147\247\150\264\151\263\152\244\153\262\154\256" +
    "\155\251\156\266\157\245\160\255\161\253\162\236\165" +
    "\242\001\002\000\002\001\uff05\000\132\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\002\001\ufed8\000" +
    "\040\065\u0130\121\u013b\122\u013e\123\u013c\124\u0144\125\u013f" +
    "\126\u0145\127\u0141\130\u0143\131\u013d\132\u013a\133\u0140\134" +
    "\u0142\166\ufee9\167\ufee9\001\ufeeb\000\210\003\116\004\141" +
    "\005\152\006\110\007\011\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\045\025\034\027\102" +
    "\031\153\034\103\036\130\042\055\043\121\046\135\047" +
    "\042\051\150\052\026\053\012\055\076\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\102\064\105\024\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\136\010\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\206\043\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\002\001\uffc9\000\006\017\u02a5\214\u02a4\001" +
    "\002\000\132\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\132\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\004\214\u029e\001\002\000\004\104\u029c" +
    "\001\002\000\002\001\uffc3\000\004\214\u028c\001\002\000" +
    "\004\104\uff16\001\ufea1\000\002\001\ufeb7\000\002\001\ufedc" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\132\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\004\102\u0271\001\002\000\004\012\u0268\001" +
    "\002\000\002\001\ufedb\000\004\214\u0260\001\002\000\002" +
    "\001\uff04\000\002\001\uff03\000\004\010\u0256\001\002\000" +
    "\004\214\u0253\001\002\000\002\001\ufee8\000\012\010\035" +
    "\012\061\106\056\217\101\001\002\000\010\102\310\200" +
    "\311\214\ufee3\001\ufeda\000\134\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\136\u024f\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\002\001\ufea0\000" +
    "\004\214\u024c\001\002\000\002\001\ufeb7\000\002\001\ufea2" +
    "\000\004\061\u0249\001\002\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\002\001\ufff8\000\002" +
    "\001\uff28\000\132\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\006\012\061\217\324\001\002\000" +
    "\132\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\002\001\ufefa\000\002\001\uffe1\000\010\010\306" +
    "\012\061\217\101\001\002\000\004\214\u0237\001\002\000" +
    "\002\001\ufeb7\000\006\166\u0233\167\u0234\001\002\000\004" +
    "\102\325\001\ufecb\000\004\214\u021d\001\002\000\132\004" +
    "\141\006\110\007\011\010\035\012\061\017\127\034\103" +
    "\056\144\057\031\067\146\070\013\071\020\072\046\073" +
    "\047\074\132\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\214" +
    "\145\217\101\220\113\221\060\222\077\001\002\000\002" +
    "\001\ufffc\000\132\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\004\143\u01cd\001\uffc8\000\002\001" +
    "\uff0a\000\002\001\ufef9\000\002\001\ufff3\000\002\001\ufeb7" +
    "\000\002\001\ufed4\000\004\010\u01b1\001\002\000\002\001" +
    "\uffd7\000\002\001\ufed5\000\210\003\116\004\141\005\152" +
    "\006\110\007\011\010\035\012\061\014\074\017\127\020" +
    "\021\021\122\022\120\023\045\025\034\027\102\031\153" +
    "\034\103\036\130\042\055\043\121\046\135\047\042\051" +
    "\150\052\026\053\012\055\076\056\144\057\031\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\102\064\105\024\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\136\010\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\206" +
    "\043\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\134\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\u01a8" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\002\001\ufffb\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\004\214\u0163" +
    "\001\ufefb\000\132\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\002\001\uff08\000\004\214\u0188\001\002" +
    "\000\002\001\uffca\000\002\001\uff07\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\134\004" +
    "\141\006\110\007\011\010\035\012\061\017\127\034\103" +
    "\056\144\057\031\067\146\070\013\071\020\072\046\073" +
    "\047\074\132\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\136\u0181\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\002\001\ufeec\000\002\001\ufeed\000\002\001\uffbe\000" +
    "\004\214\u017c\001\uff0f\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\002\000\002\001\ufffd\000\004\214" +
    "\u0175\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\004\214\u0166\001\002\000\012\010" +
    "\035\012\061\106\056\217\101\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\002\001" +
    "\uffff\000\004\214\233\001\002\000\004\214\154\001\002" +
    "\000\006\010\157\106\056\001\002\000\006\114\212\215" +
    "\211\001\002\000\004\121\160\001\002\000\002\001\ufea1" +
    "\000\034\006\110\007\011\010\167\017\127\070\163\071" +
    "\020\072\046\073\047\074\132\075\006\106\056\156\161" +
    "\157\170\001\002\000\034\006\110\007\011\010\167\017" +
    "\127\070\163\071\020\072\046\073\047\074\132\075\006" +
    "\106\056\156\161\157\170\001\002\000\002\001\uff01\000" +
    "\004\214\174\001\002\000\002\001\uffad\000\002\001\uff02" +
    "\000\002\001\ufefd\000\004\104\172\001\ufea1\000\034\006" +
    "\110\007\011\010\167\017\127\070\163\071\020\072\046" +
    "\073\047\074\132\075\006\106\056\156\161\157\170\001" +
    "\002\000\002\001\ufeff\000\004\010\173\001\002\000\002" +
    "\001\ufefc\000\034\006\110\007\011\010\167\017\127\070" +
    "\163\071\020\072\046\073\047\074\132\075\006\106\056" +
    "\156\161\157\170\001\ufef5\000\004\215\207\001\002\000" +
    "\004\114\202\001\ufef3\000\004\066\200\001\ufeee\000\034" +
    "\006\110\007\011\010\167\017\127\070\163\071\020\072" +
    "\046\073\047\074\132\075\006\106\056\156\161\157\170" +
    "\001\002\000\002\001\ufeef\000\034\006\110\007\011\010" +
    "\167\017\127\070\163\071\020\072\046\073\047\074\132" +
    "\075\006\106\056\156\161\157\170\001\ufef2\000\002\001" +
    "\ufef4\000\004\066\205\001\ufef0\000\034\006\110\007\011" +
    "\010\167\017\127\070\163\071\020\072\046\073\047\074" +
    "\132\075\006\106\056\156\161\157\170\001\002\000\002" +
    "\001\ufef1\000\002\001\ufefe\000\002\001\uff00\000\212\003" +
    "\116\004\141\005\152\006\110\007\011\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\045\025" +
    "\034\027\102\031\153\034\103\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\102\064\105\024\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\206\043\214\145\216\217\217\101\220" +
    "\113\221\060\222\077\001\002\000\006\010\157\106\056" +
    "\001\002\000\004\121\214\001\002\000\034\006\110\007" +
    "\011\010\167\017\127\070\163\071\020\072\046\073\047" +
    "\074\132\075\006\106\056\156\161\157\170\001\002\000" +
    "\002\001\uffac\000\002\001\uffdb\000\002\001\ufff8\000\002" +
    "\001\uffaf\000\226\003\116\004\141\005\152\006\110\007" +
    "\011\010\035\012\061\014\074\017\127\020\021\021\122" +
    "\022\120\023\045\025\034\027\102\031\153\032\225\034" +
    "\103\036\130\042\055\043\121\044\107\046\135\047\042" +
    "\051\150\052\026\053\012\055\076\056\144\057\031\060" +
    "\223\061\033\062\140\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\102\064\105\024\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\136\010\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\206\043\207\062\210\016\214" +
    "\145\217\101\220\113\221\060\222\077\001\002\000\002" +
    "\001\ufff9\000\004\214\230\001\002\000\002\001\ufff6\000" +
    "\002\001\uffae\000\002\001\ufff5\000\002\001\ufff7\000\004" +
    "\215\231\001\002\000\004\136\232\001\002\000\002\001" +
    "\ufff4\000\132\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\070\033\257\115\246\116\267\117\240\135" +
    "\243\137\237\140\261\141\241\142\250\143\260\144\265" +
    "\145\252\146\235\147\247\150\264\151\263\152\244\153" +
    "\262\154\256\155\251\156\266\157\245\160\255\161\253" +
    "\162\236\165\242\215\254\001\002\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\132\004" +
    "\141\006\110\007\011\010\035\012\061\017\127\034\103" +
    "\056\144\057\031\067\146\070\013\071\020\072\046\073" +
    "\047\074\132\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\214" +
    "\145\217\101\220\113\221\060\222\077\001\002\000\132" +
    "\004\141\006\110\007\011\010\035\012\061\017\127\034" +
    "\103\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\132\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\132\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\132\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\132\004\141\006\110\007\011\010" +
    "\035\012\061\017\127\034\103\056\144\057\031\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\214\145\217\101\220\113\221" +
    "\060\222\077\001\002\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\002\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\132\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\212\003" +
    "\116\004\141\005\152\006\110\007\011\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\045\025" +
    "\034\027\102\031\153\034\103\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\102\064\105\024\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\206\043\214\145\216\362\217\101\220" +
    "\113\221\060\222\077\001\002\000\132\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\010\010\306" +
    "\012\061\217\101\001\002\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\132\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\132\004" +
    "\141\006\110\007\011\010\035\012\061\017\127\034\103" +
    "\056\144\057\031\067\146\070\013\071\020\072\046\073" +
    "\047\074\132\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\214" +
    "\145\217\101\220\113\221\060\222\077\001\002\000\132" +
    "\004\141\006\110\007\011\010\035\012\061\017\127\034" +
    "\103\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\132\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\062\033\257\117\240\135\243\137\237\140\261" +
    "\141\241\142\250\143\260\144\265\145\252\146\235\147" +
    "\247\150\264\151\263\152\244\153\262\154\256\155\251" +
    "\156\266\157\245\160\255\161\253\162\236\165\242\001" +
    "\uff43\000\012\033\257\160\255\161\253\162\236\001\uff3e" +
    "\000\034\033\257\150\264\151\263\152\244\153\262\154" +
    "\256\155\251\156\266\157\245\160\255\161\253\162\236" +
    "\165\242\001\uff31\000\024\033\257\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\uff2e" +
    "\000\024\033\257\154\256\155\251\156\266\157\245\160" +
    "\255\161\253\162\236\165\242\001\uff2c\000\024\033\257" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\001\uff2d\000\052\033\257\141\241\142\250" +
    "\143\260\144\265\145\252\146\235\147\247\150\264\151" +
    "\263\152\244\153\262\154\256\155\251\156\266\157\245" +
    "\160\255\161\253\162\236\165\242\001\uff46\000\044\033" +
    "\257\144\265\145\252\146\235\147\247\150\264\151\263" +
    "\152\244\153\262\154\256\155\251\156\266\157\245\160" +
    "\255\161\253\162\236\165\242\001\uff41\000\002\001\uff2b" +
    "\000\002\001\uff12\000\004\065\337\001\uff13\000\002\001" +
    "\uff14\000\006\012\061\217\324\001\002\000\004\104\317" +
    "\001\002\000\004\104\uff16\001\uff15\000\006\102\310\200" +
    "\311\001\ufeda\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\132\004\141\006\110\007\011\010" +
    "\035\012\061\017\127\034\103\056\144\057\031\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\214\145\217\101\220\113\221" +
    "\060\222\077\001\ufed2\000\004\201\314\001\002\000\066" +
    "\033\257\115\246\116\267\117\240\135\243\137\237\140" +
    "\261\141\241\142\250\143\260\144\265\145\252\146\235" +
    "\147\247\150\264\151\263\152\244\153\262\154\256\155" +
    "\251\156\266\157\245\160\255\161\253\162\236\165\242" +
    "\001\ufed1\000\002\001\ufed7\000\070\033\257\103\316\115" +
    "\246\116\267\117\240\135\243\137\237\140\261\141\241" +
    "\142\250\143\260\144\265\145\252\146\235\147\247\150" +
    "\264\151\263\152\244\153\262\154\256\155\251\156\266" +
    "\157\245\160\255\161\253\162\236\165\242\001\002\000" +
    "\002\001\ufed6\000\006\012\061\217\101\001\002\000\006" +
    "\102\330\200\331\001\ufedd\000\006\012\061\217\324\001" +
    "\002\000\002\001\ufedf\000\006\102\310\200\311\001\ufede" +
    "\000\004\102\325\001\ufeca\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\070\033\257\103\327" +
    "\115\246\116\267\117\240\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\002" +
    "\000\002\001\ufed3\000\132\004\141\006\110\007\011\010" +
    "\035\012\061\017\127\034\103\056\144\057\031\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\214\145\217\101\220\113\221" +
    "\060\222\077\001\002\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\ufed2\000\004\201\333\001\002\000" +
    "\002\001\ufee1\000\070\033\257\103\335\115\246\116\267" +
    "\117\240\135\243\137\237\140\261\141\241\142\250\143" +
    "\260\144\265\145\252\146\235\147\247\150\264\151\263" +
    "\152\244\153\262\154\256\155\251\156\266\157\245\160" +
    "\255\161\253\162\236\165\242\001\002\000\002\001\ufee0" +
    "\000\006\102\310\200\311\001\ufed9\000\014\010\157\012" +
    "\061\102\345\106\056\217\101\001\002\000\002\001\ufecd" +
    "\000\002\001\ufece\000\002\001\uff11\000\006\102\352\200" +
    "\353\001\uff10\000\006\012\061\217\324\001\002\000\132" +
    "\004\141\006\110\007\011\010\035\012\061\017\127\034" +
    "\103\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\006\102\310\200\311\001\ufee3\000\070\033\257\103\350" +
    "\115\246\116\267\117\240\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\002" +
    "\000\002\001\ufecc\000\006\102\310\200\311\001\ufee2\000" +
    "\132\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\ufed2\000\004\201\355\001\002\000\002\001\ufed0\000\070" +
    "\033\257\103\357\115\246\116\267\117\240\135\243\137" +
    "\237\140\261\141\241\142\250\143\260\144\265\145\252" +
    "\146\235\147\247\150\264\151\263\152\244\153\262\154" +
    "\256\155\251\156\266\157\245\160\255\161\253\162\236" +
    "\165\242\001\002\000\002\001\ufecf\000\020\033\257\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\uff39" +
    "\000\004\033\257\001\uff3c\000\002\001\ufff8\000\002\001" +
    "\uffa0\000\006\204\367\205\366\001\uff9c\000\002\001\ufff1" +
    "\000\210\003\116\004\141\005\152\006\110\007\011\010" +
    "\035\012\061\014\074\017\127\020\021\021\122\022\120" +
    "\023\045\025\034\027\102\031\153\034\103\036\130\042" +
    "\055\043\121\046\135\047\042\051\150\052\026\053\012" +
    "\055\076\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\102\064\105\024" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\136\010\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\206\043\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\004\214\370\001" +
    "\002\000\132\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\070\033\257\115\246\116\267\117\240\135" +
    "\243\137\237\140\261\141\241\142\250\143\260\144\265" +
    "\145\252\146\235\147\247\150\264\151\263\152\244\153" +
    "\262\154\256\155\251\156\266\157\245\160\255\161\253" +
    "\162\236\165\242\215\372\001\002\000\210\003\116\004" +
    "\141\005\152\006\110\007\011\010\035\012\061\014\074" +
    "\017\127\020\021\021\122\022\120\023\045\025\034\027" +
    "\102\031\153\034\103\036\130\042\055\043\121\046\135" +
    "\047\042\051\150\052\026\053\012\055\076\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\102\064\105\024\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\136\010\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\206\043\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\002\001\uff9f\000\002\001\uff9b\000\224" +
    "\003\116\004\141\005\152\006\110\007\011\010\035\012" +
    "\061\014\074\017\127\020\021\021\122\022\120\023\045" +
    "\025\034\027\102\031\153\034\103\036\130\042\055\043" +
    "\121\044\107\046\135\047\042\051\150\052\026\053\012" +
    "\055\076\056\144\057\031\060\223\061\033\062\140\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\102\064\105\024\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\136\010\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\206\043\207\062\210\016\214\145\217\101\220\113\221" +
    "\060\222\077\001\uff9e\000\006\204\u0101\205\u0100\001\uff9a" +
    "\000\004\203\u0109\001\002\000\004\216\u0107\001\002\000" +
    "\004\214\u0102\001\002\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\002\000\070\033\257\115\246\116" +
    "\267\117\240\135\243\137\237\140\261\141\241\142\250" +
    "\143\260\144\265\145\252\146\235\147\247\150\264\151" +
    "\263\152\244\153\262\154\256\155\251\156\266\157\245" +
    "\160\255\161\253\162\236\165\242\215\u0104\001\002\000" +
    "\004\216\u0105\001\002\000\002\001\ufff8\000\224\003\116" +
    "\004\141\005\152\006\110\007\011\010\035\012\061\014" +
    "\074\017\127\020\021\021\122\022\120\023\045\025\034" +
    "\027\102\031\153\034\103\036\130\042\055\043\121\044" +
    "\107\046\135\047\042\051\150\052\026\053\012\055\076" +
    "\056\144\057\031\060\223\061\033\062\140\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\102\064\105\024\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\136\010\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\206\043" +
    "\207\062\210\016\214\145\217\101\220\113\221\060\222" +
    "\077\001\uff9d\000\002\001\ufff8\000\224\003\116\004\141" +
    "\005\152\006\110\007\011\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\045\025\034\027\102" +
    "\031\153\034\103\036\130\042\055\043\121\044\107\046" +
    "\135\047\042\051\150\052\026\053\012\055\076\056\144" +
    "\057\031\060\223\061\033\062\140\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\102\064" +
    "\105\024\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\136\010\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\206\043\207\062" +
    "\210\016\214\145\217\101\220\113\221\060\222\077\001" +
    "\uff99\000\004\136\u010a\001\002\000\002\001\ufff0\000\004" +
    "\033\257\001\uff3b\000\034\033\257\150\264\151\263\152" +
    "\244\153\262\154\256\155\251\156\266\157\245\160\255" +
    "\161\253\162\236\165\242\001\uff30\000\020\033\257\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\uff38" +
    "\000\046\033\257\143\260\144\265\145\252\146\235\147" +
    "\247\150\264\151\263\152\244\153\262\154\256\155\251" +
    "\156\266\157\245\160\255\161\253\162\236\165\242\001" +
    "\uff40\000\034\033\257\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\001\uff32\000\064\033\257\116\267\117\240" +
    "\135\243\137\237\140\261\141\241\142\250\143\260\144" +
    "\265\145\252\146\235\147\247\150\264\151\263\152\244" +
    "\153\262\154\256\155\251\156\266\157\245\160\255\161" +
    "\253\162\236\165\242\001\uff45\000\012\033\257\160\255" +
    "\161\253\162\236\001\uff3d\000\024\033\257\154\256\155" +
    "\251\156\266\157\245\160\255\161\253\162\236\165\242" +
    "\001\uff2f\000\070\033\257\115\246\116\267\117\240\135" +
    "\243\137\237\140\261\141\241\142\250\143\260\144\265" +
    "\145\252\146\235\147\247\150\264\151\263\152\244\153" +
    "\262\154\256\155\251\156\266\157\245\160\255\161\253" +
    "\162\236\165\242\216\u0114\001\002\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\066\033\257" +
    "\115\246\116\267\117\240\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\uff29" +
    "\000\012\033\257\160\255\161\253\162\236\001\uff3f\000" +
    "\050\033\257\142\250\143\260\144\265\145\252\146\235" +
    "\147\247\150\264\151\263\152\244\153\262\154\256\155" +
    "\251\156\266\157\245\160\255\161\253\162\236\165\242" +
    "\001\uff42\000\060\033\257\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\uff44" +
    "\000\054\033\257\140\261\141\241\142\250\143\260\144" +
    "\265\145\252\146\235\147\247\150\264\151\263\152\244" +
    "\153\262\154\256\155\251\156\266\157\245\160\255\161" +
    "\253\162\236\165\242\001\uff47\000\004\033\257\001\uff3a" +
    "\000\034\033\257\150\264\151\263\152\244\153\262\154" +
    "\256\155\251\156\266\157\245\160\255\161\253\162\236" +
    "\165\242\001\uff33\000\070\033\257\115\246\116\267\117" +
    "\240\135\243\136\u011d\137\237\140\261\141\241\142\250" +
    "\143\260\144\265\145\252\146\235\147\247\150\264\151" +
    "\263\152\244\153\262\154\256\155\251\156\266\157\245" +
    "\160\255\161\253\162\236\165\242\001\002\000\002\001" +
    "\uffd8\000\004\214\u0163\001\002\000\004\065\u0130\001\ufee9" +
    "\000\002\001\uff48\000\004\104\u0122\001\002\000\010\010" +
    "\u0126\012\061\217\101\001\002\000\004\214\u0160\001\002" +
    "\000\006\012\061\217\324\001\002\000\004\214\ufed5\001" +
    "\ufedf\000\004\214\u0127\001\002\000\134\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u012b\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\uff8c\000\004\114" +
    "\u015a\001\uff8d\000\044\065\u0130\114\uff8a\121\u013b\122\u013e" +
    "\123\u013c\124\u0144\125\u013f\126\u0145\127\u0141\130\u0143\131" +
    "\u013d\132\u013a\133\u0140\134\u0142\166\ufee9\167\ufee9\215\uff8a" +
    "\001\ufeeb\000\004\215\u0139\001\002\000\012\010\035\012" +
    "\061\106\056\217\101\001\002\000\066\033\257\115\246" +
    "\116\267\117\240\135\243\137\237\140\261\141\241\142" +
    "\250\143\260\144\265\145\252\146\235\147\247\150\264" +
    "\151\263\152\244\153\262\154\256\155\251\156\266\157" +
    "\245\160\255\161\253\162\236\165\242\001\002\000\006" +
    "\114\uff8b\215\uff8b\001\ufeec\000\002\001\uff89\000\004\065" +
    "\u0130\001\ufeea\000\014\010\157\012\061\102\345\106\056" +
    "\217\101\001\002\000\004\214\u0136\001\ufee7\000\010\102" +
    "\352\200\353\214\u0133\001\ufee6\000\134\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u012b\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\uff8c\000\004\215" +
    "\u0135\001\002\000\002\001\ufee4\000\134\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u012b\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\uff8c\000\004\215" +
    "\u0138\001\002\000\002\001\ufee5\000\002\001\uff19\000\132" +
    "\004\141\006\110\007\011\010\035\012\061\017\127\034" +
    "\103\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\134\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\143\u0150\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\132\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\132\004\141\006\110\007\011\010" +
    "\035\012\061\017\127\034\103\056\144\057\031\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\214\145\217\101\220\113\221" +
    "\060\222\077\001\002\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\002\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\132\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\217\101" +
    "\220\113\221\060\222\077\001\002\000\132\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\132\004" +
    "\141\006\110\007\011\010\035\012\061\017\127\034\103" +
    "\056\144\057\031\067\146\070\013\071\020\072\046\073" +
    "\047\074\132\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\214" +
    "\145\217\101\220\113\221\060\222\077\001\002\000\132" +
    "\004\141\006\110\007\011\010\035\012\061\017\127\034" +
    "\103\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\060\033\257\135\243\137\237\140\261\141\241\142\250" +
    "\143\260\144\265\145\252\146\235\147\247\150\264\151" +
    "\263\152\244\153\262\154\256\155\251\156\266\157\245" +
    "\160\255\161\253\162\236\165\242\001\uff52\000\060\033" +
    "\257\135\243\137\237\140\261\141\241\142\250\143\260" +
    "\144\265\145\252\146\235\147\247\150\264\151\263\152" +
    "\244\153\262\154\256\155\251\156\266\157\245\160\255" +
    "\161\253\162\236\165\242\001\uff54\000\060\033\257\135" +
    "\243\137\237\140\261\141\241\142\250\143\260\144\265" +
    "\145\252\146\235\147\247\150\264\151\263\152\244\153" +
    "\262\154\256\155\251\156\266\157\245\160\255\161\253" +
    "\162\236\165\242\001\uff50\000\060\033\257\135\243\137" +
    "\237\140\261\141\241\142\250\143\260\144\265\145\252" +
    "\146\235\147\247\150\264\151\263\152\244\153\262\154" +
    "\256\155\251\156\266\157\245\160\255\161\253\162\236" +
    "\165\242\001\uff4c\000\060\033\257\135\243\137\237\140" +
    "\261\141\241\142\250\143\260\144\265\145\252\146\235" +
    "\147\247\150\264\151\263\152\244\153\262\154\256\155" +
    "\251\156\266\157\245\160\255\161\253\162\236\165\242" +
    "\001\uff51\000\060\033\257\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\uff4d" +
    "\000\060\033\257\135\243\137\237\140\261\141\241\142" +
    "\250\143\260\144\265\145\252\146\235\147\247\150\264" +
    "\151\263\152\244\153\262\154\256\155\251\156\266\157" +
    "\245\160\255\161\253\162\236\165\242\001\uff53\000\060" +
    "\033\257\135\243\137\237\140\261\141\241\142\250\143" +
    "\260\144\265\145\252\146\235\147\247\150\264\151\263" +
    "\152\244\153\262\154\256\155\251\156\266\157\245\160" +
    "\255\161\253\162\236\165\242\001\uff56\000\060\033\257" +
    "\135\243\137\237\140\261\141\241\142\250\143\260\144" +
    "\265\145\252\146\235\147\247\150\264\151\263\152\244" +
    "\153\262\154\256\155\251\156\266\157\245\160\255\161" +
    "\253\162\236\165\242\001\uff4f\000\060\033\257\135\243" +
    "\137\237\140\261\141\241\142\250\143\260\144\265\145" +
    "\252\146\235\147\247\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\001\uff55\000\014\010\035\012\061\106\056" +
    "\202\u0152\217\101\001\002\000\060\033\257\135\243\137" +
    "\237\140\261\141\241\142\250\143\260\144\265\145\252" +
    "\146\235\147\247\150\264\151\263\152\244\153\262\154" +
    "\256\155\251\156\266\157\245\160\255\161\253\162\236" +
    "\165\242\001\uff5b\000\010\010\306\012\061\217\101\001" +
    "\002\000\004\065\u0130\001\uff5a\000\004\214\u0156\001\uff0c" +
    "\000\002\001\uff59\000\134\004\141\006\110\007\011\010" +
    "\035\012\061\017\127\034\103\056\144\057\031\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\143\u012b\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\uff8c\000\004\215\u0158\001\002" +
    "\000\002\001\uff0b\000\060\033\257\135\243\137\237\140" +
    "\261\141\241\142\250\143\260\144\265\145\252\146\235" +
    "\147\247\150\264\151\263\152\244\153\262\154\256\155" +
    "\251\156\266\157\245\160\255\161\253\162\236\165\242" +
    "\001\uff4e\000\134\004\141\006\110\007\011\010\035\012" +
    "\061\017\127\034\103\056\144\057\031\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\143\u015c\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\214\145\217\101\220\113\221" +
    "\060\222\077\001\002\000\044\065\u0130\114\uff87\121\u013b" +
    "\122\u013e\123\u013c\124\u0144\125\u013f\126\u0145\127\u0141\130" +
    "\u0143\131\u013d\132\u013a\133\u0140\134\u0142\166\ufee9\167\ufee9" +
    "\215\uff87\001\ufeeb\000\012\010\035\012\061\106\056\217" +
    "\101\001\002\000\006\114\uff88\215\uff88\001\ufeec\000\002" +
    "\001\uff86\000\010\102\310\200\311\214\ufee2\001\ufede\000" +
    "\134\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\143\u012b\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\uff8c\000\004\215\u0162\001\002\000\002\001\uff18\000" +
    "\134\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\143\u012b\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\uff8c\000\004\215\u0165\001\002\000\002\001\uff1a\000" +
    "\014\010\035\012\061\067\u016a\106\056\217\101\001\ufec5" +
    "\000\006\114\u016e\215\u0170\001\002\000\002\001\ufec8\000" +
    "\004\065\u0130\001\ufec7\000\004\214\u016b\001\002\000\014" +
    "\010\035\012\061\067\u016a\106\056\217\101\001\ufec5\000" +
    "\006\114\u016e\215\u016d\001\002\000\002\001\ufec6\000\014" +
    "\010\035\012\061\067\u016a\106\056\217\101\001\ufec5\000" +
    "\002\001\ufec9\000\004\121\u0171\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\060\033" +
    "\257\135\243\137\237\140\261\141\241\142\250\143\260" +
    "\144\265\145\252\146\235\147\247\150\264\151\263\152" +
    "\244\153\262\154\256\155\251\156\266\157\245\160\255" +
    "\161\253\162\236\165\242\001\uff5c\000\070\033\257\115" +
    "\246\116\267\117\240\135\243\137\237\140\261\141\241" +
    "\142\250\143\260\144\265\145\252\146\235\147\247\150" +
    "\264\151\263\152\244\153\262\154\256\155\251\156\266" +
    "\157\245\160\255\161\253\162\236\165\242\215\u0174\001" +
    "\002\000\002\001\uff2a\000\012\010\035\012\061\106\056" +
    "\217\101\001\002\000\004\065\u0130\001\ufea5\000\006\114" +
    "\u0179\215\u0178\001\002\000\002\001\ufeac\000\012\010\035" +
    "\012\061\106\056\217\101\001\002\000\004\065\u0130\001" +
    "\ufea4\000\004\033\257\001\uff35\000\134\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\214\145\215\u017f" +
    "\217\101\220\113\221\060\222\077\001\002\000\002\001" +
    "\uff20\000\070\033\257\115\246\116\267\117\240\135\243" +
    "\137\237\140\261\141\241\142\250\143\260\144\265\145" +
    "\252\146\235\147\247\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\215\u0180\001\002\000\002\001\uff0e\000\002" +
    "\001\uff0d\000\002\001\uffe7\000\042\065\u0130\121\u013b\122" +
    "\u013e\123\u013c\124\u0144\125\u013f\126\u0145\127\u0141\130\u0143" +
    "\131\u013d\132\u013a\133\u0140\134\u0142\136\u0185\166\ufee9\167" +
    "\ufee9\001\ufeeb\000\004\136\u0184\001\ufeec\000\002\001\uffe6" +
    "\000\002\001\uffe5\000\002\001\uff22\000\002\001\uff26\000" +
    "\132\004\141\006\110\007\011\010\035\012\061\017\127" +
    "\034\103\056\144\057\031\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\015\166\053\167\147\170\027\171\133" +
    "\172\041\173\126\174\072\175\134\176\071\177\040\202" +
    "\075\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\070\033\257\115\246\116\267\117\240\135\243\137" +
    "\237\140\261\141\241\142\250\143\260\144\265\145\252" +
    "\146\235\147\247\150\264\151\263\152\244\153\262\154" +
    "\256\155\251\156\266\157\245\160\255\161\253\162\236" +
    "\165\242\215\u018a\001\002\000\006\102\u018c\216\u018d\001" +
    "\002\000\002\001\uffec\000\004\136\u019d\001\uffa7\000\004" +
    "\136\u018f\001\uffa7\000\010\037\u019b\040\u0192\041\u0193\001" +
    "\002\000\002\001\uffa7\000\010\037\u0191\040\u0192\041\u0193" +
    "\001\002\000\002\001\uffa8\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\006\136\u0195\216\u0196" +
    "\001\002\000\002\001\ufff8\000\002\001\uffa3\000\002\001" +
    "\uffa4\000\224\003\116\004\141\005\152\006\110\007\011" +
    "\010\035\012\061\014\074\017\127\020\021\021\122\022" +
    "\120\023\045\025\034\027\102\031\153\034\103\036\130" +
    "\042\055\043\121\044\107\046\135\047\042\051\150\052" +
    "\026\053\012\055\076\056\144\057\031\060\223\061\033" +
    "\062\140\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\102\064\105\024\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\136\010\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\206\043\207\062\210\016\214\145\217\101" +
    "\220\113\221\060\222\077\001\uffa5\000\072\033\257\115" +
    "\246\116\267\117\240\135\243\136\u0195\137\237\140\261" +
    "\141\241\142\250\143\260\144\265\145\252\146\235\147" +
    "\247\150\264\151\263\152\244\153\262\154\256\155\251" +
    "\156\266\157\245\160\255\161\253\162\236\165\242\216" +
    "\u0196\001\002\000\002\001\ufff8\000\224\003\116\004\141" +
    "\005\152\006\110\007\011\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\045\025\034\027\102" +
    "\031\153\034\103\036\130\042\055\043\121\044\107\046" +
    "\135\047\042\051\150\052\026\053\012\055\076\056\144" +
    "\057\031\060\223\061\033\062\140\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\102\064" +
    "\105\024\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\136\010\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\206\043\207\062" +
    "\210\016\214\145\217\101\220\113\221\060\222\077\001" +
    "\uffa6\000\002\001\uffa9\000\010\040\u0192\041\u0193\103\u01a0" +
    "\001\002\000\002\001\uffa7\000\010\040\u0192\041\u0193\103" +
    "\u019f\001\002\000\002\001\uffaa\000\002\001\uffab\000\002" +
    "\001\uff24\000\066\033\257\115\246\116\267\117\240\135" +
    "\243\137\237\140\261\141\241\142\250\143\260\144\265" +
    "\145\252\146\235\147\247\150\264\151\263\152\244\153" +
    "\262\154\256\155\251\156\266\157\245\160\255\161\253" +
    "\162\236\165\242\001\ufea7\000\006\114\u01a5\136\u01a6\001" +
    "\002\000\066\033\257\115\246\116\267\117\240\135\243" +
    "\137\237\140\261\141\241\142\250\143\260\144\265\145" +
    "\252\146\235\147\247\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\001\uff61\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\002\000\002\001\uffe2\000\066\033" +
    "\257\115\246\116\267\117\240\135\243\137\237\140\261" +
    "\141\241\142\250\143\260\144\265\145\252\146\235\147" +
    "\247\150\264\151\263\152\244\153\262\154\256\155\251" +
    "\156\266\157\245\160\255\161\253\162\236\165\242\001" +
    "\uff62\000\002\001\uffe9\000\070\033\257\115\246\116\267" +
    "\117\240\135\243\136\u01aa\137\237\140\261\141\241\142" +
    "\250\143\260\144\265\145\252\146\235\147\247\150\264" +
    "\151\263\152\244\153\262\154\256\155\251\156\266\157" +
    "\245\160\255\161\253\162\236\165\242\001\002\000\002" +
    "\001\uffe8\000\004\023\u01ac\001\002\000\004\214\u01ad\001" +
    "\002\000\132\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\015\166\053\167\147\170\027" +
    "\171\133\172\041\173\126\174\072\175\134\176\071\177" +
    "\040\202\075\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\070\033\257\115\246\116\267\117\240\135" +
    "\243\137\237\140\261\141\241\142\250\143\260\144\265" +
    "\145\252\146\235\147\247\150\264\151\263\152\244\153" +
    "\262\154\256\155\251\156\266\157\245\160\255\161\253" +
    "\162\236\165\242\215\u01af\001\002\000\004\136\u01b0\001" +
    "\002\000\002\001\uffee\000\004\063\u01b3\001\uffbd\000\004" +
    "\102\u01b9\001\002\000\004\010\u01b6\001\002\000\004\114" +
    "\u01b7\001\uffbc\000\002\001\uffb9\000\002\001\uff16\000\004" +
    "\010\u01b6\001\002\000\002\001\uffb8\000\002\001\uff7b\000" +
    "\026\045\u01c6\054\u01bd\103\u01c2\105\u01c9\206\u01bf\207\u01c3" +
    "\210\u01c5\211\u01c8\212\u01be\213\u01c1\001\uff72\000\002\001" +
    "\uff7c\000\006\114\u01f3\136\u01f4\001\002\000\002\001\uff73" +
    "\000\002\001\uff6d\000\002\001\uff6b\000\002\001\uff70\000" +
    "\002\001\uff6e\000\002\001\uffc4\000\002\001\uff6a\000\004" +
    "\012\u01ea\001\002\000\002\001\uff69\000\004\010\u01e7\001" +
    "\002\000\020\044\uff71\206\u01bf\207\u01c3\210\u01c5\211\u01c8" +
    "\212\u01be\213\u01c1\001\uff74\000\002\001\uff6c\000\210\003" +
    "\116\004\141\005\152\006\110\007\011\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\045\025" +
    "\034\027\102\031\153\034\103\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\102\064\105\024\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\206\043\214\145\217\101\220\113\221" +
    "\060\222\077\001\002\000\004\044\u01cb\001\002\000\004" +
    "\143\u01cd\001\uffc8\000\006\010\157\106\056\001\002\000" +
    "\002\001\uffc7\000\004\214\u01cf\001\002\000\010\010\u01d2" +
    "\070\u01d0\215\uff97\001\uff90\000\002\001\uff8e\000\006\012" +
    "\u01df\143\u01de\001\002\000\002\001\uff8f\000\004\215\u01d8" +
    "\001\002\000\004\114\u01d6\001\uff98\000\002\001\uff96\000" +
    "\006\010\u01d2\070\u01d0\001\uff90\000\002\001\uff95\000\006" +
    "\102\u01da\136\u01db\001\002\000\002\001\uff78\000\002\001" +
    "\ufff8\000\002\001\uff76\000\226\003\116\004\141\005\152" +
    "\006\110\007\011\010\035\012\061\014\074\017\127\020" +
    "\021\021\122\022\120\023\045\025\034\027\102\031\153" +
    "\034\103\036\130\042\055\043\121\044\107\046\135\047" +
    "\042\051\150\052\026\053\012\055\076\056\144\057\031" +
    "\060\223\061\033\062\140\067\146\070\013\071\020\072" +
    "\046\073\047\074\132\075\006\076\036\102\064\103\u01dd" +
    "\105\024\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\136\010\156\105\157\066\163\142\164\015" +
    "\166\053\167\147\170\027\171\133\172\041\173\126\174" +
    "\072\175\134\176\071\177\040\202\075\206\043\207\062" +
    "\210\016\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\002\001\uff75\000\004\012\u01e2\001\002\000\004" +
    "\121\u01e0\001\uff94\000\034\006\110\007\011\010\167\017" +
    "\127\070\163\071\020\072\046\073\047\074\132\075\006" +
    "\106\056\156\161\157\170\001\002\000\002\001\uff92\000" +
    "\004\121\u01e3\001\uff93\000\034\006\110\007\011\010\167" +
    "\017\127\070\163\071\020\072\046\073\047\074\132\075" +
    "\006\106\056\156\161\157\170\001\002\000\002\001\uff91" +
    "\000\002\001\uff77\000\002\001\uff6f\000\004\121\u01e8\001" +
    "\002\000\034\006\110\007\011\010\167\017\127\070\163" +
    "\071\020\072\046\073\047\074\132\075\006\106\056\156" +
    "\161\157\170\001\002\000\002\001\uff63\000\004\121\u01f1" +
    "\001\uff66\000\006\114\u01ec\136\u01ed\001\002\000\004\012" +
    "\u01ee\001\002\000\002\001\uff7a\000\004\121\u01ef\001\uff68" +
    "\000\034\006\110\007\011\010\167\017\127\070\163\071" +
    "\020\072\046\073\047\074\132\075\006\106\056\156\161" +
    "\157\170\001\002\000\002\001\uff67\000\034\006\110\007" +
    "\011\010\167\017\127\070\163\071\020\072\046\073\047" +
    "\074\132\075\006\106\056\156\161\157\170\001\002\000" +
    "\002\001\uff65\000\004\010\u01f5\001\002\000\002\001\uff79" +
    "\000\004\121\u01f6\001\002\000\034\006\110\007\011\010" +
    "\167\017\127\070\163\071\020\072\046\073\047\074\132" +
    "\075\006\106\056\156\161\157\170\001\002\000\002\001" +
    "\uff64\000\016\012\061\015\u01ff\016\u01fe\100\u01fd\101\u01fb" +
    "\220\u01fc\001\002\000\006\065\u020b\200\u020a\001\ufeb6\000" +
    "\002\001\ufeba\000\012\010\035\012\061\106\056\217\101" +
    "\001\002\000\002\001\ufef8\000\134\004\141\006\110\007" +
    "\011\010\035\011\u0200\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\214\145\217" +
    "\101\220\113\221\060\222\077\001\002\000\002\001\ufeb9" +
    "\000\002\001\ufeb8\000\006\103\u0203\200\u0204\001\002\000" +
    "\070\033\257\103\u0202\115\246\116\267\117\240\135\243" +
    "\137\237\140\261\141\241\142\250\143\260\144\265\145" +
    "\252\146\235\147\247\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\001\002\000\002\001\ufeb3\000\002\001\ufeb1" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\070\033\257\115\246\116\267\117\240\135\243" +
    "\137\237\140\261\141\241\142\250\143\260\144\265\145" +
    "\252\146\235\147\247\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\201\u0206\001\002\000\004\103\u0207\001\002" +
    "\000\002\001\ufeb2\000\006\065\u0130\103\u0209\001\002\000" +
    "\002\001\ufeb0\000\012\010\157\012\061\013\u0210\106\056" +
    "\001\002\000\006\010\157\106\056\001\002\000\002\001" +
    "\ufeb4\000\002\001\ufead\000\004\201\u0211\001\002\000\002" +
    "\001\ufeaf\000\002\001\ufeae\000\002\001\ufeb5\000\006\010" +
    "\157\106\056\001\002\000\004\214\u0214\001\002\000\010" +
    "\010\u01d2\070\u01d0\215\uff97\001\uff90\000\004\215\u0216\001" +
    "\002\000\004\102\u0217\001\002\000\002\001\ufff8\000\226" +
    "\003\116\004\141\005\152\006\110\007\011\010\035\012" +
    "\061\014\074\017\127\020\021\021\122\022\120\023\045" +
    "\025\034\027\102\031\153\034\103\036\130\042\055\043" +
    "\121\044\107\046\135\047\042\051\150\052\026\053\012" +
    "\055\076\056\144\057\031\060\223\061\033\062\140\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\102\064\103\u0219\105\024\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\136\010\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\206\043\207\062\210\016\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\002\001\uffc6\000\066" +
    "\033\257\115\246\116\267\117\240\135\243\137\237\140" +
    "\261\141\241\142\250\143\260\144\265\145\252\146\235" +
    "\147\247\150\264\151\263\152\244\153\262\154\256\155" +
    "\251\156\266\157\245\160\255\161\253\162\236\165\242" +
    "\001\ufea6\000\012\033\257\160\255\161\253\162\236\001" +
    "\uff37\000\002\001\uff57\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\002\000\042\035\u022e\065\u0130\121" +
    "\u013b\122\u013e\123\u013c\124\u0144\125\u013f\126\u0145\127\u0141" +
    "\130\u0143\131\u013d\132\u013a\133\u0140\134\u0142\166\ufee9\167" +
    "\ufee9\001\ufeeb\000\004\035\u0220\001\ufeec\000\012\010\035" +
    "\012\061\106\056\217\101\001\002\000\006\065\u0130\066" +
    "\u0223\001\uffb7\000\004\215\u0228\001\002\000\014\010\035" +
    "\012\061\106\056\143\u0226\217\101\001\002\000\002\001" +
    "\uffb6\000\004\065\u0130\001\uffb5\000\012\010\035\012\061" +
    "\106\056\217\101\001\002\000\004\065\u0130\001\uffb4\000" +
    "\212\003\116\004\141\005\152\006\110\007\011\010\035" +
    "\012\061\014\074\017\127\020\021\021\122\022\120\023" +
    "\045\025\034\027\102\031\153\034\103\036\130\042\055" +
    "\043\121\046\135\047\042\051\150\052\026\053\012\055" +
    "\076\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\102\064\105\024\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\136\010\156\105\157\066\163\142\164\015\166\053\167" +
    "\147\170\027\171\133\172\041\173\126\174\072\175\134" +
    "\176\071\177\040\202\075\206\043\214\145\216\u0229\217" +
    "\101\220\113\221\060\222\077\001\002\000\002\001\ufff8" +
    "\000\002\001\uffb1\000\002\001\uffdc\000\226\003\116\004" +
    "\141\005\152\006\110\007\011\010\035\012\061\014\074" +
    "\017\127\020\021\021\122\022\120\023\045\025\034\027" +
    "\102\030\u022d\031\153\034\103\036\130\042\055\043\121" +
    "\044\107\046\135\047\042\051\150\052\026\053\012\055" +
    "\076\056\144\057\031\060\223\061\033\062\140\067\146" +
    "\070\013\071\020\072\046\073\047\074\132\075\006\076" +
    "\036\102\064\105\024\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\136\010\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\206" +
    "\043\207\062\210\016\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\002\001\uffb0\000\014\010\035\012" +
    "\061\106\056\143\u0226\217\101\001\002\000\004\066\u0223" +
    "\001\uffb7\000\004\215\u0231\001\002\000\212\003\116\004" +
    "\141\005\152\006\110\007\011\010\035\012\061\014\074" +
    "\017\127\020\021\021\122\022\120\023\045\025\034\027" +
    "\102\031\153\034\103\036\130\042\055\043\121\046\135" +
    "\047\042\051\150\052\026\053\012\055\076\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\102\064\105\024\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\136\010\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\206\043\214\145\216\u0229\217\101\220\113\221" +
    "\060\222\077\001\002\000\002\001\uffdd\000\002\001\uff4b" +
    "\000\002\001\uff49\000\016\012\061\015\u01ff\016\u01fe\100" +
    "\u01fd\101\u01fb\222\u0236\001\002\000\002\001\ufef7\000\012" +
    "\010\035\012\061\106\056\217\101\001\002\000\002\001" +
    "\uffcf\000\004\065\u0130\001\uffcd\000\006\114\u023c\215\u023b" +
    "\001\002\000\004\136\u023e\001\002\000\012\010\035\012" +
    "\061\106\056\217\101\001\002\000\002\001\uffce\000\002" +
    "\001\uffde\000\004\214\u0156\001\uff0c\000\002\001\uff58\000" +
    "\002\001\uff23\000\002\001\uff21\000\010\102\310\200\311" +
    "\214\ufee2\001\ufed9\000\066\033\257\115\246\116\267\117" +
    "\240\135\243\137\237\140\261\141\241\142\250\143\260" +
    "\144\265\145\252\146\235\147\247\150\264\151\263\152" +
    "\244\153\262\154\256\155\251\156\266\157\245\160\255" +
    "\161\253\162\236\165\242\001\ufea9\000\012\033\257\160" +
    "\255\161\253\162\236\001\uff36\000\226\003\116\004\141" +
    "\005\152\006\110\007\011\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\045\025\034\027\102" +
    "\031\153\034\103\036\130\042\055\043\121\044\107\046" +
    "\135\047\042\051\150\052\026\053\012\055\076\056\144" +
    "\057\031\060\223\061\033\062\140\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\102\064" +
    "\103\u0247\105\024\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\136\010\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\206\043" +
    "\207\062\210\016\214\145\217\101\220\113\221\060\222" +
    "\077\001\002\000\002\001\ufff2\000\060\033\257\135\243" +
    "\137\237\140\261\141\241\142\250\143\260\144\265\145" +
    "\252\146\235\147\247\150\264\151\263\152\244\153\262" +
    "\154\256\155\251\156\266\157\245\160\255\161\253\162" +
    "\236\165\242\001\uff1b\000\002\001\uffc2\000\016\012\061" +
    "\015\u01ff\016\u01fe\100\u01fd\101\u01fb\221\u024b\001\002\000" +
    "\002\001\uff1c\000\004\215\u024d\001\002\000\004\136\u024e" +
    "\001\002\000\002\001\ufffa\000\002\001\uffeb\000\070\033" +
    "\257\115\246\116\267\117\240\135\243\136\u0251\137\237" +
    "\140\261\141\241\142\250\143\260\144\265\145\252\146" +
    "\235\147\247\150\264\151\263\152\244\153\262\154\256" +
    "\155\251\156\266\157\245\160\255\161\253\162\236\165" +
    "\242\001\002\000\002\001\uffea\000\002\001\uff4a\000\132" +
    "\004\141\006\110\007\011\010\035\012\061\017\127\034" +
    "\103\056\144\057\031\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\015\166\053\167\147\170\027\171\133\172" +
    "\041\173\126\174\072\175\134\176\071\177\040\202\075" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\070\033\257\115\246\116\267\117\240\135\243\137\237" +
    "\140\261\141\241\142\250\143\260\144\265\145\252\146" +
    "\235\147\247\150\264\151\263\152\244\153\262\154\256" +
    "\155\251\156\266\157\245\160\255\161\253\162\236\165" +
    "\242\215\u0255\001\002\000\002\001\ufea8\000\004\063\u0257" +
    "\001\uffc0\000\004\010\u01b6\001\002\000\004\064\u025a\001" +
    "\uffbb\000\004\102\u025c\001\002\000\004\010\u01b6\001\002" +
    "\000\004\114\u01b7\001\uffba\000\002\001\uff7b\000\026\045" +
    "\u01c6\054\u01bd\103\u025e\105\u01c9\206\u01bf\207\u01c3\210\u01c5" +
    "\211\u01c8\212\u01be\213\u01c1\001\uff72\000\002\001\uffc5\000" +
    "\002\001\uffbf\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\002\000\070\033\257\115\246\116\267\117" +
    "\240\135\243\137\237\140\261\141\241\142\250\143\260" +
    "\144\265\145\252\146\235\147\247\150\264\151\263\152" +
    "\244\153\262\154\256\155\251\156\266\157\245\160\255" +
    "\161\253\162\236\165\242\215\u0262\001\002\000\212\003" +
    "\116\004\141\005\152\006\110\007\011\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\045\025" +
    "\034\027\102\031\153\034\103\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\102\064\105\024\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\206\043\214\145\216\u0263\217\101\220" +
    "\113\221\060\222\077\001\002\000\002\001\ufff8\000\002" +
    "\001\uffef\000\002\001\uffa2\000\226\003\116\004\141\005" +
    "\152\006\110\007\011\010\035\012\061\014\074\017\127" +
    "\020\021\021\122\022\120\023\045\024\u0267\025\034\027" +
    "\102\031\153\034\103\036\130\042\055\043\121\044\107" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\060\223\061\033\062\140\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\102" +
    "\064\105\024\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\136\010\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\206\043\207" +
    "\062\210\016\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\002\001\uffa1\000\004\121\u026f\001\uff7e\000" +
    "\006\114\u026a\136\u026b\001\002\000\004\012\u026c\001\002" +
    "\000\002\001\uffe3\000\004\121\u026d\001\uff80\000\034\006" +
    "\110\007\011\010\167\017\127\070\163\071\020\072\046" +
    "\073\047\074\132\075\006\106\056\156\161\157\170\001" +
    "\002\000\002\001\uff7f\000\034\006\110\007\011\010\167" +
    "\017\127\070\163\071\020\072\046\073\047\074\132\075" +
    "\006\106\056\156\161\157\170\001\002\000\002\001\uff7d" +
    "\000\002\001\ufff8\000\226\003\116\004\141\005\152\006" +
    "\110\007\011\010\035\012\061\014\074\017\127\020\021" +
    "\021\122\022\120\023\045\025\034\027\102\031\153\034" +
    "\103\036\130\042\055\043\121\044\107\046\135\047\042" +
    "\051\150\052\026\053\012\055\076\056\144\057\031\060" +
    "\223\061\033\062\140\067\146\070\013\071\020\072\046" +
    "\073\047\074\132\075\006\076\036\102\064\103\u0273\105" +
    "\024\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\136\010\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\206\043\207\062\210" +
    "\016\214\145\217\101\220\113\221\060\222\077\001\002" +
    "\000\004\050\u0274\001\002\000\004\214\u0275\001\002\000" +
    "\004\010\u01b6\001\002\000\004\012\061\001\002\000\004" +
    "\215\u0278\001\002\000\004\102\u0279\001\002\000\002\001" +
    "\ufff8\000\226\003\116\004\141\005\152\006\110\007\011" +
    "\010\035\012\061\014\074\017\127\020\021\021\122\022" +
    "\120\023\045\025\034\027\102\031\153\034\103\036\130" +
    "\042\055\043\121\044\107\046\135\047\042\051\150\052" +
    "\026\053\012\055\076\056\144\057\031\060\223\061\033" +
    "\062\140\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\102\064\103\u027b\105\024\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\136" +
    "\010\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\206\043\207\062\210\016\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\004\050" +
    "\u027c\001\uffd3\000\004\214\u0281\001\002\000\002\001\uffd9" +
    "\000\002\001\uffd2\000\004\050\u027c\001\uffd4\000\002\001" +
    "\uffd1\000\004\010\u01b6\001\002\000\004\012\u0283\001\002" +
    "\000\004\215\u0284\001\002\000\004\102\u0285\001\002\000" +
    "\002\001\ufff8\000\226\003\116\004\141\005\152\006\110" +
    "\007\011\010\035\012\061\014\074\017\127\020\021\021" +
    "\122\022\120\023\045\025\034\027\102\031\153\034\103" +
    "\036\130\042\055\043\121\044\107\046\135\047\042\051" +
    "\150\052\026\053\012\055\076\056\144\057\031\060\223" +
    "\061\033\062\140\067\146\070\013\071\020\072\046\073" +
    "\047\074\132\075\006\076\036\102\064\103\u0287\105\024" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\136\010\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\206\043\207\062\210\016" +
    "\214\145\217\101\220\113\221\060\222\077\001\002\000" +
    "\002\001\uffd0\000\002\001\uff25\000\002\001\uff1f\000\016" +
    "\012\061\015\u01ff\016\u01fe\077\u028b\100\u01fd\101\u01fb\001" +
    "\002\000\002\001\ufef6\000\132\004\141\006\110\007\011" +
    "\010\035\012\061\017\127\034\103\056\144\057\031\067" +
    "\146\070\013\071\020\072\046\073\047\074\132\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\015\166\053" +
    "\167\147\170\027\171\133\172\041\173\126\174\072\175" +
    "\134\176\071\177\040\202\075\214\145\217\101\220\113" +
    "\221\060\222\077\001\uff60\000\004\114\u029a\001\uff5f\000" +
    "\066\033\257\115\246\116\267\117\240\135\243\137\237" +
    "\140\261\141\241\142\250\143\260\144\265\145\252\146" +
    "\235\147\247\150\264\151\263\152\244\153\262\154\256" +
    "\155\251\156\266\157\245\160\255\161\253\162\236\165" +
    "\242\001\uff5d\000\004\136\u0290\001\002\000\132\004\141" +
    "\006\110\007\011\010\035\012\061\017\127\034\103\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\uff60\000\004\136" +
    "\u0292\001\002\000\132\004\141\006\110\007\011\010\035" +
    "\012\061\017\127\034\103\056\144\057\031\067\146\070" +
    "\013\071\020\072\046\073\047\074\132\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\uff60\000\004\215\u0294\001\002\000\212\003" +
    "\116\004\141\005\152\006\110\007\011\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\045\025" +
    "\034\027\102\031\153\034\103\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\067\146\070\013\071\020\072\046\073\047" +
    "\074\132\075\006\076\036\102\064\105\024\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\206\043\214\145\216\u0296\217\101\220" +
    "\113\221\060\222\077\001\002\000\002\001\uffed\000\002" +
    "\001\ufff8\000\002\001\uffb3\000\226\003\116\004\141\005" +
    "\152\006\110\007\011\010\035\012\061\014\074\017\127" +
    "\020\021\021\122\022\120\023\045\025\034\026\u0299\027" +
    "\102\031\153\034\103\036\130\042\055\043\121\044\107" +
    "\046\135\047\042\051\150\052\026\053\012\055\076\056" +
    "\144\057\031\060\223\061\033\062\140\067\146\070\013" +
    "\071\020\072\046\073\047\074\132\075\006\076\036\102" +
    "\064\105\024\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\136\010\156\105\157\066\163\142\164" +
    "\015\166\053\167\147\170\027\171\133\172\041\173\126" +
    "\174\072\175\134\176\071\177\040\202\075\206\043\207" +
    "\062\210\016\214\145\217\101\220\113\221\060\222\077" +
    "\001\002\000\002\001\uffb2\000\132\004\141\006\110\007" +
    "\011\010\035\012\061\017\127\034\103\056\144\057\031" +
    "\067\146\070\013\071\020\072\046\073\047\074\132\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\015\166" +
    "\053\167\147\170\027\171\133\172\041\173\126\174\072" +
    "\175\134\176\071\177\040\202\075\214\145\217\101\220" +
    "\113\221\060\222\077\001\002\000\066\033\257\115\246" +
    "\116\267\117\240\135\243\137\237\140\261\141\241\142" +
    "\250\143\260\144\265\145\252\146\235\147\247\150\264" +
    "\151\263\152\244\153\262\154\256\155\251\156\266\157" +
    "\245\160\255\161\253\162\236\165\242\001\uff5e\000\010" +
    "\010\u029d\012\061\217\101\001\002\000\004\214\u0127\001" +
    "\ufea3\000\012\010\035\012\061\106\056\217\101\001\002" +
    "\000\006\065\u0130\215\u02a0\001\002\000\002\001\ufeab\000" +
    "\066\033\257\115\246\116\267\117\240\135\243\137\237" +
    "\140\261\141\241\142\250\143\260\144\265\145\252\146" +
    "\235\147\247\150\264\151\263\152\244\153\262\154\256" +
    "\155\251\156\266\157\245\160\255\161\253\162\236\165" +
    "\242\001\ufeaa\000\002\001\uff27\000\004\136\u02a8\001\002" +
    "\000\004\017\u02a6\001\002\000\002\001\uffcc\000\004\215" +
    "\u02a7\001\002\000\002\001\uffcb\000\002\001\uffdf\000\002" +
    "\001\uffd6\000\006\114\u01a5\136\u02ab\001\002\000\002\001" +
    "\uffd5\000\002\001\uffe0\000\002\001\uffc1\000\002\001\uff34" +
    "\000\134\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\143\u02b2" +
    "\156\105\157\066\163\142\164\015\166\053\167\147\170" +
    "\027\171\133\172\041\173\126\174\072\175\134\176\071" +
    "\177\040\202\075\214\145\217\101\220\113\221\060\222" +
    "\077\001\ufec4\000\004\215\u02c2\001\002\000\004\114\u02b9" +
    "\001\ufef3\000\012\010\035\012\061\106\056\217\101\001" +
    "\002\000\070\033\257\066\u02b4\115\246\116\267\117\240" +
    "\135\243\137\237\140\261\141\241\142\250\143\260\144" +
    "\265\145\252\146\235\147\247\150\264\151\263\152\244" +
    "\153\262\154\256\155\251\156\266\157\245\160\255\161" +
    "\253\162\236\165\242\001\ufebf\000\134\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u02b5\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\012\010" +
    "\035\012\061\106\056\217\101\001\002\000\066\033\257" +
    "\115\246\116\267\117\240\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\ufec0" +
    "\000\002\001\ufebc\000\002\001\ufebb\000\134\004\141\006" +
    "\110\007\011\010\035\012\061\017\127\034\103\056\144" +
    "\057\031\067\146\070\013\071\020\072\046\073\047\074" +
    "\132\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\143\u02bb\156\105\157\066\163" +
    "\142\164\015\166\053\167\147\170\027\171\133\172\041" +
    "\173\126\174\072\175\134\176\071\177\040\202\075\214" +
    "\145\217\101\220\113\221\060\222\077\001\ufef2\000\002" +
    "\001\ufec3\000\012\010\035\012\061\106\056\217\101\001" +
    "\002\000\070\033\257\066\u02bd\115\246\116\267\117\240" +
    "\135\243\137\237\140\261\141\241\142\250\143\260\144" +
    "\265\145\252\146\235\147\247\150\264\151\263\152\244" +
    "\153\262\154\256\155\251\156\266\157\245\160\255\161" +
    "\253\162\236\165\242\001\ufec1\000\134\004\141\006\110" +
    "\007\011\010\035\012\061\017\127\034\103\056\144\057" +
    "\031\067\146\070\013\071\020\072\046\073\047\074\132" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u02be\156\105\157\066\163\142" +
    "\164\015\166\053\167\147\170\027\171\133\172\041\173" +
    "\126\174\072\175\134\176\071\177\040\202\075\214\145" +
    "\217\101\220\113\221\060\222\077\001\002\000\012\010" +
    "\035\012\061\106\056\217\101\001\002\000\066\033\257" +
    "\115\246\116\267\117\240\135\243\137\237\140\261\141" +
    "\241\142\250\143\260\144\265\145\252\146\235\147\247" +
    "\150\264\151\263\152\244\153\262\154\256\155\251\156" +
    "\266\157\245\160\255\161\253\162\236\165\242\001\ufec2" +
    "\000\002\001\ufebe\000\002\001\ufebd\000\002\001\uff1d\000" +
    "\006\114\u02cc\136\u02cd\001\002\000\002\001\uff83\000\014" +
    "\010\035\012\061\102\u02c9\106\056\217\101\001\002\000" +
    "\002\001\uff84\000\002\001\uff82\000\004\065\u0130\001\ufeeb" +
    "\000\132\004\141\006\110\007\011\010\035\012\061\017" +
    "\127\034\103\056\144\057\031\067\146\070\013\071\020" +
    "\072\046\073\047\074\132\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\015\166\053\167\147\170\027\171" +
    "\133\172\041\173\126\174\072\175\134\176\071\177\040" +
    "\202\075\214\145\217\101\220\113\221\060\222\077\001" +
    "\002\000\070\033\257\103\u02cb\115\246\116\267\117\240" +
    "\135\243\137\237\140\261\141\241\142\250\143\260\144" +
    "\265\145\252\146\235\147\247\150\264\151\263\152\244" +
    "\153\262\154\256\155\251\156\266\157\245\160\255\161" +
    "\253\162\236\165\242\001\002\000\002\001\uff81\000\006" +
    "\012\u02c4\217\u02c5\001\002\000\002\001\uffe4\000\002\001" +
    "\uff85\000\134\004\141\006\110\007\011\010\035\012\061" +
    "\017\127\034\103\056\144\057\031\067\146\070\013\071" +
    "\020\072\046\073\047\074\132\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\143" +
    "\u012b\156\105\157\066\163\142\164\015\166\053\167\147" +
    "\170\027\171\133\172\041\173\126\174\072\175\134\176" +
    "\071\177\040\202\075\214\145\217\101\220\113\221\060" +
    "\222\077\001\uff8c\000\004\215\u02d1\001\002\000\002\001" +
    "\uff17\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02d0\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\074\004\150\005\142\010\111\050\135\051\043" +
    "\054\110\056\013\062\016\063\053\064\116\071\067\101" +
    "\064\102\124\103\114\106\031\115\103\116\122\117\022" +
    "\123\130\124\024\125\047\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\u02c2\040\u02c5\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u02ad\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\045\u02a9\050" +
    "\135\051\043\054\110\056\013\062\u01a3\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\022\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\036\147\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\010" +
    "\u02a8\050\135\051\043\054\110\056\013\062\016\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\002\001\001\000\004\013\u02a2\001" +
    "\001\000\052\050\135\051\043\054\110\056\013\062\u02a1" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u02a0\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0289\001\001\000\002" +
    "\001\001\000\052\050\135\051\043\054\110\056\013\062" +
    "\u0288\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u0287\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\004\041\u0268\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\051\043\063\053\064\116\071\067\102\u011d\106\u0120\117" +
    "\u011e\134\u0251\135\006\136\021\140\113\144\036\147\051" +
    "\001\001\000\002\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u024f\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\u0249\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u0247\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\004\006\u0245\001\001\000\002\001\001\000\052\050\135" +
    "\051\043\054\110\056\013\062\u0244\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\022\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\052\050\135\051\043\054\110\056\013\062\u0243" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\010\063\u0242\064\116\140" +
    "\113\001\001\000\052\050\135\051\043\054\110\056\013" +
    "\062\u0241\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\052\050\135\051" +
    "\043\054\110\056\013\062\u0240\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\022\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\036\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\063\306\064" +
    "\116\071\303\106\304\136\021\140\113\141\u023e\143\302" +
    "\144\300\145\301\001\001\000\002\001\001\000\004\076" +
    "\u0234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\043\054\110\056\013\062" +
    "\u021b\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\002\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\u021a\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\052\050\135\051\043\054\110\056\013" +
    "\062\u0219\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\004\044\u0211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u01f7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\005\u01aa" +
    "\010\111\050\135\051\043\054\110\056\013\062\016\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\052\050\135\051\043\054\110" +
    "\056\013\062\u01a8\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\054\045" +
    "\u01a2\050\135\051\043\054\110\056\013\062\u01a3\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\002\001\001\000\052\050\135\051" +
    "\043\054\110\056\013\062\u01a1\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\022\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\036\147\051\001\001" +
    "\000\002\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u01a0\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\u0186\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u0185\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\052\050\u0182" +
    "\051\043\054\110\056\013\062\u012b\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\u0181\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u017c\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u017a\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u0172\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\034\051\043\063\053\064\116\071\067\102" +
    "\u011d\106\u0120\117\u011e\134\u011f\135\006\136\021\140\113" +
    "\144\036\147\051\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u011b\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\154\102\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\164\055\163\102\161\146" +
    "\165\001\001\000\012\054\164\055\207\102\161\146\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\054\164\055\170\102\161\146\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\054\164\055\176\057\174\061\175\102\161\146\165\001" +
    "\001\000\002\001\001\000\004\060\202\001\001\000\002" +
    "\001\001\000\012\054\164\055\200\102\161\146\165\001" +
    "\001\000\002\001\001\000\012\054\164\055\203\102\161" +
    "\146\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\054\164\055\205\102\161\146\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\005" +
    "\217\010\111\020\215\050\135\051\043\054\110\056\013" +
    "\062\016\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\004\102\212\001" +
    "\001\000\002\001\001\000\012\054\164\055\214\102\161" +
    "\146\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\220\001\001\000\002\001\001\000\074\005\226" +
    "\007\221\010\111\050\135\051\043\054\110\056\013\062" +
    "\016\063\053\064\116\071\067\101\064\102\124\103\114" +
    "\106\031\115\223\116\225\117\022\123\130\124\024\125" +
    "\047\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\043\054\110\056\013" +
    "\062\233\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\002\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\u011a\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u0119\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\052\050\135" +
    "\051\043\054\110\056\013\062\u0118\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\022\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\052\050\135\051\043\054\110\056\013\062\u0117" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u0116\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\u0115\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\052\050\135\051\043\054\110\056\013" +
    "\062\u0112\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\052\050\135\051" +
    "\043\054\110\056\013\062\u0111\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\022\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\036\147\051\001\001" +
    "\000\052\050\135\051\043\054\110\056\013\062\u0110\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\052\050\135\051\043\054\110" +
    "\056\013\062\u010f\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\052\050" +
    "\135\051\043\054\110\056\013\062\u010e\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\022\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\036\147\051" +
    "\001\001\000\052\050\135\051\043\054\110\056\013\062" +
    "\u010d\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u010c\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\u010b\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u010a\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\056\005\362" +
    "\010\111\050\135\051\043\054\110\056\013\062\016\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\052\050\135\051\043\054\110" +
    "\056\013\062\360\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\052\050" +
    "\135\051\043\054\110\056\013\062\357\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\022\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\036\147\051" +
    "\001\001\000\026\063\306\064\116\071\303\106\304\136" +
    "\021\140\113\141\277\143\302\144\300\145\301\001\001" +
    "\000\052\050\135\051\043\054\110\056\013\062\276\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\052\050\135\051\043\054\110" +
    "\056\013\062\275\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\052\050" +
    "\135\051\043\054\110\056\013\062\274\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\022\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\036\147\051" +
    "\001\001\000\052\050\135\051\043\054\110\056\013\062" +
    "\273\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\272\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\271\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\270\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\052\050\135" +
    "\051\043\054\110\056\013\062\267\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\022\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\063" +
    "\335\064\116\140\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\314\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\054" +
    "\050\135\051\043\054\110\056\013\062\312\063\053\064" +
    "\116\065\311\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\064\321\067\317\071\320\140\113\001\001\000\002" +
    "\001\001\000\010\063\322\064\116\140\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\325\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\333\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\054\050\135\051\043\054\110\056\013" +
    "\062\312\063\053\064\116\065\331\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\063\345\064\116\066\342\070" +
    "\340\071\343\102\337\135\341\140\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\063\350\064\116\140\113\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\346\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\355\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\054" +
    "\050\135\051\043\054\110\056\013\062\312\063\053\064" +
    "\116\065\353\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\374\001\001\000\004\026\363" +
    "\001\001\000\004\030\364\001\001\000\002\001\001\000" +
    "\056\005\373\010\111\050\135\051\043\054\110\056\013" +
    "\062\016\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\002\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\370\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\002\001\001\000\056\005\372\010" +
    "\111\050\135\051\043\054\110\056\013\062\016\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\005\226\007\221\010\111\027\375\050\135\051\043" +
    "\054\110\056\013\062\016\063\053\064\116\071\067\101" +
    "\064\102\124\103\114\106\031\115\223\116\225\117\022" +
    "\123\130\124\024\125\047\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\004" +
    "\031\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\043\054\110\056\013" +
    "\062\u0102\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0105\001\001\000\074\005\226" +
    "\007\221\010\111\050\135\051\043\054\110\056\013\062" +
    "\016\063\053\064\116\071\067\101\064\102\124\103\114" +
    "\106\031\115\223\116\225\117\022\123\130\124\024\125" +
    "\047\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\004\006\u0107\001\001\000" +
    "\074\005\226\007\221\010\111\050\135\051\043\054\110" +
    "\056\013\062\016\063\053\064\116\071\067\101\064\102" +
    "\124\103\114\106\031\115\223\116\225\117\022\123\130" +
    "\124\024\125\047\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\135\051\043\054\110\056\013\062\u0114" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\063\345\064\u0124\067" +
    "\317\071\u0123\135\u0122\140\113\001\001\000\002\001\001" +
    "\000\010\063\u015e\064\116\140\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\035\u0129\036\u0127\050\u012c" +
    "\051\043\054\110\056\013\062\u012b\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\u0128\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\051\043\063\053\064\116\071\067\102\u011d\105" +
    "\u012d\106\u0120\117\u012e\135\006\136\021\140\113\144\036" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\063\345\064\116" +
    "\066\u0131\070\340\071\343\102\337\135\u0130\140\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\035\u0133" +
    "\036\u0127\050\u012c\051\043\054\110\056\013\062\u012b\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\u0128" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\035\u0136\036\u0127\050\u012c\051\043\054\110\056" +
    "\013\062\u012b\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\u0128\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\050\135\051" +
    "\043\054\110\056\013\062\u0158\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\022\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\036\147\051\001\001" +
    "\000\052\050\135\051\043\054\110\056\013\062\u0150\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\052\050\135\051\043\054\110" +
    "\056\013\062\u014e\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\052\050" +
    "\135\051\043\054\110\056\013\062\u014d\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\022\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\036\147\051" +
    "\001\001\000\052\050\135\051\043\054\110\056\013\062" +
    "\u014c\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u014b\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\u014a\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u0149\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\052\050\135" +
    "\051\043\054\110\056\013\062\u0148\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\022\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\052\050\135\051\043\054\110\056\013\062\u0147" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\052\050\135\051\043\054" +
    "\110\056\013\062\u0146\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\u0145\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\051\043\063\053\064\116\071" +
    "\067\102\u011d\106\u0120\117\u0152\135\006\136\021\140\113" +
    "\144\036\147\051\001\001\000\002\001\001\000\026\063" +
    "\306\064\116\071\303\106\304\136\021\140\113\141\u0153" +
    "\143\302\144\300\145\301\001\001\000\002\001\001\000" +
    "\004\053\u0154\001\001\000\002\001\001\000\056\035\u0156" +
    "\036\u0127\050\u012c\051\043\054\110\056\013\062\u012b\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\u0128" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\u015c\051\043\054\110\056" +
    "\013\062\u012b\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\u015a\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\034\051\043\063\053\064\116\071\067\102\u011d\105" +
    "\u015d\106\u0120\117\u012e\135\006\136\021\140\113\144\036" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\035\u0160\036\u0127\050\u012c\051\043" +
    "\054\110\056\013\062\u012b\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\u0128\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\035\u0163\036\u0127" +
    "\050\u012c\051\043\054\110\056\013\062\u012b\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\u0128\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\051\043\063\053\064\116\071\067\072\u0166\073\u0167\102" +
    "\u011d\106\u0120\117\u0168\135\006\136\021\140\113\144\036" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\051\043\063\053" +
    "\064\116\071\067\072\u016b\073\u0167\102\u011d\106\u0120\117" +
    "\u0168\135\006\136\021\140\113\144\036\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\051\043\063" +
    "\053\064\116\071\067\073\u016e\102\u011d\106\u0120\117\u0168" +
    "\135\006\136\021\140\113\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u0171\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\051\043\063\053\064\116\071\067\102\u011d\106\u0120\117" +
    "\u0175\135\006\136\021\137\u0176\140\113\144\036\147\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\051\043\063\053\064\116\071\067\102\u011d" +
    "\106\u0120\117\u0179\135\006\136\021\140\113\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\u017d\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\050\135\051" +
    "\043\054\110\056\013\062\u0188\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\022\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\036\147\051\001\001" +
    "\000\002\001\001\000\004\022\u018a\001\001\000\002\001" +
    "\001\000\004\023\u019b\001\001\000\004\023\u018d\001\001" +
    "\000\002\001\001\000\004\023\u018f\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\050\135\051\043\054\110" +
    "\056\013\062\u0197\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\004\024" +
    "\u0193\001\001\000\004\006\u0196\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\005\226\007\221\010\111\050" +
    "\135\051\043\054\110\056\013\062\016\063\053\064\116" +
    "\071\067\101\064\102\124\103\114\106\031\115\223\116" +
    "\225\117\022\123\130\124\024\125\047\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\004\024\u0198\001\001\000\004\006\u0199\001\001" +
    "\000\074\005\226\007\221\010\111\050\135\051\043\054" +
    "\110\056\013\062\016\063\053\064\116\071\067\101\064" +
    "\102\124\103\114\106\031\115\223\116\225\117\022\123" +
    "\130\124\024\125\047\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u019d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\043\054\110\056\013\062\u01a6\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u01ad\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\u01b1\001\001\000\002\001\001\000\006\106\u01b4\130" +
    "\u01b3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u01b7\001\001\000\002\001\001\000" +
    "\004\042\u01b9\001\001\000\016\043\u01ba\110\u01bb\111\u01c9" +
    "\113\u01c6\114\u01bf\133\u01c3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\114\u01e5\001\001\000" +
    "\002\001\001\000\054\010\u01e4\050\135\051\043\054\110" +
    "\056\013\062\016\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\022\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\036\147\051\001\001\000\002\001" +
    "\001\000\004\044\u01cb\001\001\000\004\102\u01cd\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\u01d2\033" +
    "\u01d3\034\u01d4\131\u01d0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\u01d6\131\u01d0\001\001" +
    "\000\002\001\001\000\004\112\u01d8\001\001\000\002\001" +
    "\001\000\004\006\u01db\001\001\000\002\001\001\000\074" +
    "\005\226\007\221\010\111\050\135\051\043\054\110\056" +
    "\013\062\016\063\053\064\116\071\067\101\064\102\124" +
    "\103\114\106\031\115\223\116\225\117\022\123\130\124" +
    "\024\125\047\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\164\055\u01e0" +
    "\102\161\146\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\054\164\055\u01e3\102\161\146\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\164\055\u01e8\102\161\146\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\054\164\055\u01ef\102\161\146\165\001\001\000" +
    "\002\001\001\000\012\054\164\055\u01f1\102\161\146\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\164\055\u01f6\102\161" +
    "\146\165\001\001\000\002\001\001\000\006\077\u01f9\140" +
    "\u01f8\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\051\043\063\053\064\116\071\067\102\u011d\106\u0120\117" +
    "\u0207\135\006\136\021\140\113\144\036\147\051\001\001" +
    "\000\002\001\001\000\052\050\135\051\043\054\110\056" +
    "\013\062\u0200\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\043" +
    "\054\110\056\013\062\u0204\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\100\u020d\102\u020e\140" +
    "\u020c\001\001\000\004\102\u020b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u0212\001\001" +
    "\000\002\001\001\000\012\032\u0214\033\u01d3\034\u01d4\131" +
    "\u01d0\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0217\001\001\000\074\005\226\007\221\010\111\050" +
    "\135\051\043\054\110\056\013\062\016\063\053\064\116" +
    "\071\067\101\064\102\124\103\114\106\031\115\223\116" +
    "\225\117\022\123\130\124\024\125\047\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\u021e\051\043\054\110\056" +
    "\013\062\u012b\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\u021d\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\051\043\063\053\064\116\071" +
    "\067\102\u011d\106\u0120\117\u0220\135\006\136\021\140\113" +
    "\144\036\147\051\001\001\000\004\014\u0221\001\001\000" +
    "\002\001\001\000\034\015\u0223\051\043\063\053\064\116" +
    "\071\067\102\u011d\106\u0120\117\u0224\135\006\136\021\140" +
    "\113\144\036\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\051\043\063\053\064\116\071\067\102" +
    "\u011d\106\u0120\117\u0226\135\006\136\021\140\113\144\036" +
    "\147\051\001\001\000\002\001\001\000\060\005\u0229\010" +
    "\111\017\u022a\050\135\051\043\054\110\056\013\062\016" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\004\006\u022b\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\005\226\007\221" +
    "\010\111\050\135\051\043\054\110\056\013\062\016\063" +
    "\053\064\116\071\067\101\064\102\124\103\114\106\031" +
    "\115\223\116\225\117\022\123\130\124\024\125\047\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\002\001\001\000\034\015\u022e\051" +
    "\043\063\053\064\116\071\067\102\u011d\106\u0120\117\u0224" +
    "\135\006\136\021\140\113\144\036\147\051\001\001\000" +
    "\004\014\u022f\001\001\000\002\001\001\000\060\005\u0229" +
    "\010\111\017\u0231\050\135\051\043\054\110\056\013\062" +
    "\016\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\077\u01f9\140\u01f8\001" +
    "\001\000\002\001\001\000\036\011\u0239\012\u0237\051\043" +
    "\063\053\064\116\071\067\102\u011d\106\u0120\117\u0238\135" +
    "\006\136\021\140\113\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\u023c\051\043\063\053\064\116\071\067" +
    "\102\u011d\106\u0120\117\u0238\135\006\136\021\140\113\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u023f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\005\226\007\221\010\111\050" +
    "\135\051\043\054\110\056\013\062\016\063\053\064\116" +
    "\071\067\101\064\102\124\103\114\106\031\115\223\116" +
    "\225\117\022\123\130\124\024\125\047\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\036\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\077\u01f9\140\u01f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\135\051\043\054\110\056\013\062\u0253" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\022\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\036\147\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\126\u0257\001\001\000\004\106\u025e\001\001" +
    "\000\004\127\u0258\001\001\000\002\001\001\000\006\106" +
    "\u01b4\130\u025a\001\001\000\002\001\001\000\004\042\u025c" +
    "\001\001\000\016\043\u01ba\110\u01bb\111\u01c9\113\u01c6\114" +
    "\u01bf\133\u01c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\043\054\110\056\013\062\u0260\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\022" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\060\005\u0264" +
    "\010\111\025\u0263\050\135\051\043\054\110\056\013\062" +
    "\016\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\004\006\u0265\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\005\226\007" +
    "\221\010\111\050\135\051\043\054\110\056\013\062\016" +
    "\063\053\064\116\071\067\101\064\102\124\103\114\106" +
    "\031\115\223\116\225\117\022\123\130\124\024\125\047" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\164\055\u026d\102\161\146\165" +
    "\001\001\000\002\001\001\000\012\054\164\055\u026f\102" +
    "\161\146\165\001\001\000\002\001\001\000\004\006\u0271" +
    "\001\001\000\074\005\226\007\221\010\111\050\135\051" +
    "\043\054\110\056\013\062\016\063\053\064\116\071\067" +
    "\101\064\102\124\103\114\106\031\115\223\116\225\117" +
    "\022\123\130\124\024\125\047\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\u0275\001\001" +
    "\000\004\140\u0276\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0279\001\001\000\074\005\226\007\221" +
    "\010\111\050\135\051\043\054\110\056\013\062\016\063" +
    "\053\064\116\071\067\101\064\102\124\103\114\106\031" +
    "\115\223\116\225\117\022\123\130\124\024\125\047\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\010\120\u027c\121\u027e\122\u027d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u027f\001\001\000\002\001\001\000\004\106" +
    "\u0281\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0285\001\001\000\074\005\226\007" +
    "\221\010\111\050\135\051\043\054\110\056\013\062\016" +
    "\063\053\064\116\071\067\101\064\102\124\103\114\106" +
    "\031\115\223\116\225\117\022\123\130\124\024\125\047" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\036\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\077\u01f9\140\u01f8\001\001\000" +
    "\002\001\001\000\056\046\u028e\047\u028c\050\135\051\043" +
    "\054\110\056\013\062\u028d\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\022\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\046\u0290\047\u028c\050\135\051\043\054\110\056\013\062" +
    "\u028d\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\002\001\001\000\056" +
    "\046\u0292\047\u028c\050\135\051\043\054\110\056\013\062" +
    "\u028d\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\002\001\001\000\060" +
    "\005\u0296\010\111\016\u0294\050\135\051\043\054\110\056" +
    "\013\062\016\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\022\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\004\006\u0297\001\001\000\002\001\001\000\074\005" +
    "\226\007\221\010\111\050\135\051\043\054\110\056\013" +
    "\062\016\063\053\064\116\071\067\101\064\102\124\103" +
    "\114\106\031\115\223\116\225\117\022\123\130\124\024" +
    "\125\047\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\002\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\u029a\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\016\063\345\064\u0124" +
    "\067\317\071\u0123\135\u0122\140\113\001\001\000\002\001" +
    "\001\000\032\051\043\063\053\064\116\071\067\102\u011d" +
    "\106\u0120\117\u029e\135\006\136\021\140\113\144\036\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\050\135\051\043\054\110\056\013\062" +
    "\u02b2\063\053\064\116\071\067\074\u02af\075\u02b0\101\064" +
    "\102\124\106\031\117\022\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\036\147\051\001\001\000\002" +
    "\001\001\000\004\060\u02b9\001\001\000\034\051\043\063" +
    "\053\064\116\071\067\102\u011d\105\u02b7\106\u0120\117\u012e" +
    "\135\006\136\021\140\113\144\036\147\051\001\001\000" +
    "\002\001\001\000\052\050\135\051\043\054\110\056\013" +
    "\062\u02b5\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\022\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\036\147\051\001\001\000\034\051\043\063" +
    "\053\064\116\071\067\102\u011d\105\u02b6\106\u0120\117\u012e" +
    "\135\006\136\021\140\113\144\036\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\050\135\051\043\054\110\056\013\062\u02bb\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\022\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\036\147" +
    "\051\001\001\000\002\001\001\000\034\051\043\063\053" +
    "\064\116\071\067\102\u011d\105\u02c0\106\u0120\117\u012e\135" +
    "\006\136\021\140\113\144\036\147\051\001\001\000\002" +
    "\001\001\000\052\050\135\051\043\054\110\056\013\062" +
    "\u02be\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\022\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\036\147\051\001\001\000\034\051\043\063\053" +
    "\064\116\071\067\102\u011d\105\u02bf\106\u0120\117\u012e\135" +
    "\006\136\021\140\113\144\036\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\051\043" +
    "\063\053\064\116\071\067\102\u011d\106\u0120\117\u02c7\132" +
    "\u02c6\135\006\136\021\140\113\144\036\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\135\051\043\054\110\056\013\062\u02c9\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\022\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\036" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u02cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\035\u02cf\036\u0127\050\u012c\051\043\054\110\056" +
    "\013\062\u012b\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\u0128\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\036\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = Integer.valueOf(Modifiers.AccPublic);
	protected final static Integer PRIVATE = Integer.valueOf(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = Integer.valueOf(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = Integer.valueOf(Modifiers.AccAbstract);
	protected final static Integer FINAL = Integer.valueOf(Modifiers.AccFinal);
	protected final static Integer STATIC = Integer.valueOf(Modifiers.AccStatic);

	AST ast;

	public final void setAST (AST ast) {
		this.ast = ast;
	}

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable) property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (FunctionInvocation) property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

	protected VariableBase createDispatch(VariableBase dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected VariableBase resolveDimList(VariableBase variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			variable = new ArrayAccess(variable.getStart(), el.right, ast, variable, el.index, el.type);
		}
		return variable;
	}

	/** Report a non fatal error (or warning).  This method takes a message
	 *  string and an additional object (to be used by specializations
	 *  implemented in subclasses). Here in the base class a very simple
	 *  implementation is provided which simply prints the message to
	 *  System.err.
	 *
	 * @param message an error message.
	 * @param info    an extra object reserved for use by specialized subclasses.
	 */
	public void report_error(String message, Object info)
	{
		if (DLTKCore.DEBUG) {
			super.report_error(message, info);
		}
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}

	public void report_fatal_error(
	String message,
	Object info)
	throws java.lang.Exception
	{
		/* stop parsing (not really necessary since we throw an exception, but) */
		done_parsing();

		/* use the normal error message reporting to put out the message */
		report_error(message, info);

		/* throw an exception */
		// throw new Exception("Can't recover from previous error(s)");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PHPAstParser$actions {
  private final PHPAstParser parser;

  /** Constructor */
  CUP$PHPAstParser$actions(PHPAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000000(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	PHPAstLexer phpAstLexer = (PHPAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Program program = new Program(statementListleft, statementListright, parser.ast, statementList, commentList);
	RESULT = program;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAstParser$parser.done_parsing();
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (statement != null) {
		statementList.add(statement);
	}
	RESULT = statementList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
	}
	RESULT = statementList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(tokenleft, endright, parser.ast, statementList);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, parser.ast, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, endright, parser.ast, condition, block, falseStatement);

	RESULT = ifStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);
	RESULT = whileStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, parser.ast, expr, statement);
	RESULT = doStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ForStatement forStatement = new ForStatement(tokenleft, statementright, parser.ast, initializations, conditions, increasements, statement);
	RESULT = forStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	GlobalStatement global = new GlobalStatement(startleft, endright, parser.ast, list);
	RESULT = global;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, parser.ast, list);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright, parser.ast);
	RESULT = inLineHtml;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, parser.ast, expr);
	RESULT = expressionStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, parser.ast, "use");
	FunctionName functionName = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, parser.ast, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, parser.ast, functionInvocation);
	RESULT = expressionStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "unset");
	FunctionName functionName = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, parser.ast, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, parser.ast, functionInvocation);
	RESULT = expressionStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, parser.ast, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, parser.ast, tryBlock, catchesList);
	RESULT = tryStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	Variable variable = new Variable(varleft, varright, parser.ast, var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("additional_catch",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",75, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",76, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, parser.ast, functionId, paramList, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft, blockEndright, parser.ast, modifier.intValue(), classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, blockEndright, parser.ast, classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // extends_from ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",85, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",85, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",86, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",86, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Reference reference = new Reference (startleft, varright, parser.ast, var);
	RESULT = reference;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	Identifier id = new Identifier(keyleft, keyright, parser.ast, key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier id = new Identifier(keyleft, keyright, parser.ast, key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	FormalParameter parameter = new FormalParameter(start, varright, parser.ast, classType, v);
	RESULT = parameter;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	FormalParameter parameter = new FormalParameter(start, varright, parser.ast, classType, ref_var);
	RESULT = parameter;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	FormalParameter parameter = new FormalParameter(start, scalarright, parser.ast, classType, v, scalar);
	RESULT = parameter;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	FormalParameter parameter = new FormalParameter(start, scalarright, parser.ast, classType, ref_var, scalar);
	RESULT = parameter;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // optional_class_type ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // optional_class_type ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = classId;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // optional_class_type ::= T_ARRAY 
            {
              Identifier RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier classId = new Identifier(arrayleft, arrayright, parser.ast, "array");
	RESULT = classId;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression var_ref = new Reference(startleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable variable = new Variable(varleft, varright, parser.ast, var);
	RESULT = variable;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, varright, parser.ast, var);
	RESULT = ref;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, varName);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // class_statement_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, parser.ast, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ConstantDeclaration classConstantDeclaration = new ConstantDeclaration(listleft, endright, parser.ast, list);
	RESULT = classConstantDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PROTECTED;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PRIVATE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.STATIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.ABSTRACT;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.FINAL;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, parser.ast, varList);
	Assignment list = new Assignment(startleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, parser.ast, className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, parser.ast, classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL, reference);
	RESULT = assignment;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, parser.ast, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, parser.ast, expr);
	RESULT = clone;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_AND_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_OR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MUL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_DIV, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MOD, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_NOT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_TILDA);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, parser.ast, expr);
	RESULT = parenthesisExpression;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, parser.ast, condition, ifTrue, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_OBJECT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_BOOL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_UNSET);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, parser.ast, start);
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, parser.ast, name, expList);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, parser.ast, expr);
	RESULT = ignoreError;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, parser.ast, list);
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, parser.ast, list);
	RESULT = backTickExpression;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, parser.ast, "print");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, parser.ast, name, expList);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, parser.ast, name);
	RESULT = new FunctionInvocation(functionNameleft, endright, parser.ast, fName, parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, parser.ast, name);
	FunctionInvocation functionInvocation = new FunctionInvocation(functionNameleft, endright, parser.ast, fName, parameters);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, parser.ast, className, functionInvocation);
	RESULT = staticMethodInvocation;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName);
	FunctionInvocation functionInvocation = new FunctionInvocation(reflectionNameleft, endright, parser.ast, functionName, parameters);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, parser.ast, className, functionInvocation);
	RESULT = staticMethodInvocation;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName);
	RESULT = new FunctionInvocation(reflectionNameleft, endright, parser.ast, functionName, parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // fully_qualified_class_name ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = name;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // class_name_reference ::= T_STRING 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, name);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // dynamic_class_name_variable_property ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, parser.ast, str, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);
	RESULT = op;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);
	RESULT = op;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, parser.ast, list);
	RESULT = array;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier vname = new Identifier(varNameleft, varNameright, parser.ast, varName);
	Identifier cname = new Identifier(classNameleft, classNameright, parser.ast, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, parser.ast, cname, vname);
	RESULT = constant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",100, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, parser.ast, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Quote quote = new Quote(sleft, eright, parser.ast, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, parser.ast, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, parser.ast, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, parser.ast, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // r_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // w_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // rw_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",90, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable memberProperty = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (memberProperty.list != null) {
		RESULT = new FunctionInvocation(chleft, endright, parser.ast,
				new FunctionName(chleft, memberPropertyright, parser.ast, parser.createDispatch(ch, memberProperty)), paramsList);
	} else {
		RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty.variable), paramsList));
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, finalVar);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.resolveDimList(new StaticFieldAccess(classNameleft, var.variable.getEnd(), parser.ast, className, (Variable) var.variable), var.list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // base_variable ::= reference_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",98, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",98, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // base_variable ::= static_member 
            {
              VariableBase RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",98, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000001(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // reference_variable ::= compound_variable 
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // compound_variable ::= tracked_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, expr);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // variable_name ::= string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(startleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, parser.ast, varList);
	RESULT = vars;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, parser.ast, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, parser.ast, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Reference value = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(keyleft, varright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Reference ref = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(startleft, varright, parser.ast, ref);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(keyleft, varright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(startleft, varright, parser.ast, ref);
	list.add(element);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable property = new Variable(stringleft, stringright, parser.ast, string);
	Dispatch dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, expr);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new ArrayAccess(varNameleft, cright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new Variable(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, endright, parser.ast, var);
	RESULT = ref;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier id = new Identifier(stringleft, stringright, parser.ast, string);
	RESULT = id;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, parser.ast, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "isset");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, varList);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "empty");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, varList);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "eval");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, exprList);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier name = new Identifier(varNameleft, varNameright, parser.ast, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, name);
	RESULT = constant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$PHPAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$PHPAstParser$do_action_part00000000(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$PHPAstParser$do_action_part00000001(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
