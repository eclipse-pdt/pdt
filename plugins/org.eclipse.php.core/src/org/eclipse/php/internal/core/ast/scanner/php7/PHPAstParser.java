
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package org.eclipse.php.internal.core.ast.scanner.php7;

import java.util.*;
import org.eclipse.dltk.core.DLTKCore;
import org.eclipse.php.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PHPAstParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public PHPAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PHPAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01f8\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\005\000\002\120\003\000\002\120\005\000" +
    "\002\120\004\000\002\017\004\000\002\017\002\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\006\000\002\020\005\000\002\020\007\000\002\020\006" +
    "\000\002\020\005\000\002\020\006\000\002\020\005\000" +
    "\002\020\006\000\002\020\005\000\002\016\003\000\002" +
    "\016\003\000\002\012\006\000\002\011\006\000\002\013" +
    "\005\000\002\013\003\000\002\014\003\000\002\014\004" +
    "\000\002\015\005\000\002\015\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\004\000\002\007\006\000\002" +
    "\010\004\000\002\022\004\000\002\022\002\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\006" +
    "\000\002\021\005\000\002\021\011\000\002\021\014\000" +
    "\002\021\007\000\002\021\011\000\002\021\013\000\002" +
    "\021\007\000\002\021\004\000\002\021\005\000\002\021" +
    "\004\000\002\021\005\000\002\021\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\021\004\000\002" +
    "\021\005\000\002\021\007\000\002\021\011\000\002\021" +
    "\012\000\002\021\007\000\002\021\003\000\002\021\010" +
    "\000\002\021\005\000\002\021\005\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\021\005\000\002" +
    "\142\003\000\002\142\002\000\002\143\003\000\002\143" +
    "\004\000\002\144\012\000\002\200\003\000\002\200\002" +
    "\000\002\201\006\000\002\024\003\000\002\024\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\005\000\002" +
    "\133\003\000\002\134\003\000\002\063\002\000\002\063" +
    "\003\000\002\145\014\000\002\146\011\000\002\146\010" +
    "\000\002\147\003\000\002\147\004\000\002\147\004\000" +
    "\002\147\003\000\002\150\002\000\002\150\004\000\002" +
    "\115\003\000\002\116\002\000\002\116\004\000\002\151" +
    "\002\000\002\151\004\000\002\152\003\000\002\152\005" +
    "\000\002\202\006\000\002\203\003\000\002\203\003\000" +
    "\002\027\004\000\002\204\003\000\002\204\003\000\002" +
    "\030\003\000\002\030\004\000\002\031\003\000\002\031" +
    "\005\000\002\032\003\000\002\032\005\000\002\033\003" +
    "\000\002\033\005\000\002\034\005\000\002\034\007\000" +
    "\002\035\005\000\002\035\006\000\002\035\005\000\002" +
    "\035\006\000\002\036\002\000\002\036\007\000\002\036" +
    "\006\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\005\000\002\041\002\000\002\041\010\000" +
    "\002\042\002\000\002\042\011\000\002\043\002\000\002" +
    "\043\004\000\002\044\002\000\002\044\005\000\002\045" +
    "\003\000\002\045\002\000\002\051\003\000\002\051\005" +
    "\000\002\052\004\000\002\052\005\000\002\052\005\000" +
    "\002\052\006\000\002\052\006\000\002\052\007\000\002" +
    "\153\002\000\002\153\003\000\002\153\003\000\002\153" +
    "\003\000\002\053\003\000\002\053\002\000\002\054\003" +
    "\000\002\054\005\000\002\067\003\000\002\067\004\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\122\002\000\002\122\004\000\002\055\005\000\002\055" +
    "\003\000\002\056\003\000\002\056\004\000\002\056\006" +
    "\000\002\057\003\000\002\057\005\000\002\060\003\000" +
    "\002\060\005\000\002\061\004\000\002\061\002\000\002" +
    "\062\005\000\002\062\005\000\002\062\013\000\002\062" +
    "\004\000\002\062\003\000\002\162\005\000\002\163\003" +
    "\000\002\163\005\000\002\164\003\000\002\164\005\000" +
    "\002\165\002\000\002\165\003\000\002\166\003\000\002" +
    "\166\004\000\002\167\004\000\002\167\004\000\002\170" +
    "\005\000\002\171\003\000\002\171\005\000\002\172\003" +
    "\000\002\172\003\000\002\173\005\000\002\174\006\000" +
    "\002\174\005\000\002\175\002\000\002\175\003\000\002" +
    "\130\003\000\002\130\005\000\002\154\003\000\002\154" +
    "\003\000\002\127\002\000\002\127\003\000\002\131\003" +
    "\000\002\131\004\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\124\005\000\002\124\007\000\002\124" +
    "\003\000\002\124\005\000\002\125\005\000\002\125\003" +
    "\000\002\126\005\000\002\064\005\000\002\064\003\000" +
    "\002\065\002\000\002\065\003\000\002\066\005\000\002" +
    "\066\003\000\002\177\007\000\002\176\005\000\002\176" +
    "\006\000\002\070\010\000\002\070\005\000\002\070\006" +
    "\000\002\070\004\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
    "\000\002\070\004\000\002\070\004\000\002\070\004\000" +
    "\002\070\004\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
    "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\004\000\002\070" +
    "\004\000\002\070\004\000\002\070\004\000\002\070\005" +
    "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\003\000\002\070\003\000\002\070\007" +
    "\000\002\070\006\000\002\070\005\000\002\070\003\000" +
    "\002\070\004\000\002\070\004\000\002\070\004\000\002" +
    "\070\004\000\002\070\004\000\002\070\004\000\002\070" +
    "\004\000\002\070\004\000\002\070\004\000\002\070\003" +
    "\000\002\070\005\000\002\070\004\000\002\070\014\000" +
    "\002\070\015\000\002\046\002\000\002\046\006\000\002" +
    "\047\005\000\002\047\003\000\002\050\003\000\002\050" +
    "\004\000\002\071\006\000\002\071\010\000\002\071\010" +
    "\000\002\071\006\000\002\117\003\000\002\117\003\000" +
    "\002\123\003\000\002\123\005\000\002\123\004\000\002" +
    "\161\003\000\002\161\003\000\002\072\002\000\002\072" +
    "\004\000\002\072\005\000\002\110\002\000\002\110\003" +
    "\000\002\110\003\000\002\073\002\000\002\073\005\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\005\000\002\074\004\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\074\003\000\002\074\003\000\002\075\002\000\002\075" +
    "\003\000\002\076\003\000\002\076\003\000\002\135\003" +
    "\000\002\135\003\000\002\135\005\000\002\137\003\000" +
    "\002\137\005\000\002\137\003\000\002\140\003\000\002" +
    "\140\005\000\002\140\003\000\002\141\006\000\002\141" +
    "\005\000\002\141\003\000\002\136\003\000\002\136\006" +
    "\000\002\136\006\000\002\136\006\000\002\136\010\000" +
    "\002\136\003\000\002\155\003\000\002\155\005\000\002" +
    "\155\005\000\002\156\005\000\002\156\005\000\002\157" +
    "\003\000\002\157\006\000\002\157\006\000\002\157\005" +
    "\000\002\157\005\000\002\157\005\000\002\077\003\000" +
    "\002\100\002\000\002\100\003\000\002\101\003\000\002" +
    "\101\005\000\002\101\003\000\002\102\003\000\002\102" +
    "\005\000\002\102\003\000\002\103\005\000\002\103\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\002\000" +
    "\002\105\002\000\002\105\004\000\002\106\007\000\002" +
    "\106\005\000\002\106\005\000\002\106\003\000\002\106" +
    "\010\000\002\106\006\000\002\106\006\000\002\106\004" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\003\000\002\107\004\000\002\111\005\000\002" +
    "\111\003\000\002\111\006\000\002\111\005\000\002\111" +
    "\005\000\002\111\005\000\002\111\010\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\113\006\000" +
    "\002\113\006\000\002\113\004\000\002\113\004\000\002" +
    "\113\006\000\002\113\004\000\002\113\004\000\002\160" +
    "\003\000\002\160\005\000\002\114\003\000\002\114\003" +
    "\000\002\205\003\000\002\205\004\000\002\205\006\000" +
    "\002\205\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0397\000\002\001\uffb5\000\004\002\u0399\001\002\000" +
    "\254\003\123\004\154\005\165\006\115\007\010\010\065" +
    "\011\035\013\063\015\100\020\136\021\022\022\130\023" +
    "\124\024\046\026\034\030\107\032\166\035\112\037\140" +
    "\043\057\044\126\045\076\046\116\047\145\050\147\051" +
    "\012\052\043\053\042\055\163\057\027\060\011\062\103" +
    "\063\157\064\032\065\060\066\033\067\152\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\107\070\112\104\113\137\114\041\115\072\116\025\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\150\007\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\044\222\064\223" +
    "\017\227\161\232\106\233\120\234\062\235\102\237\125" +
    "\241\122\001\001\000\002\001\ufe6e\000\002\001\uff7b\000" +
    "\002\001\ufe71\000\006\013\063\232\106\001\002\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\ufe0d\000\002\001\ufe9f\000" +
    "\004\227\u038e\001\002\000\002\001\ufe90\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\004\066\u038c\001\002\000" +
    "\076\034\321\126\311\127\331\130\301\147\305\150\u038b" +
    "\151\300\152\322\153\302\154\313\155\323\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\244\277\001\002\000\002" +
    "\001\ufe6c\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\002\001\ufe5b\000\050\072\ufe59\107\ufe59\111\ufe59\132\u01cc" +
    "\133\u01d0\134\u01cd\135\u01da\136\u01d1\137\u01d7\140\u01d3\141" +
    "\u01d6\142\u01cf\143\u01cb\144\u01d2\145\u01d4\146\u01ce\201\u01d5" +
    "\202\u01d9\213\ufe59\001\ufe5e\000\236\003\123\004\154\005" +
    "\165\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\136\021\022\022\130\023\124\024\046\026\034\030" +
    "\107\032\166\035\112\037\140\043\057\044\126\045\076" +
    "\046\177\050\147\051\012\052\043\053\042\055\163\057" +
    "\231\060\011\062\103\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\107" +
    "\070\112\176\113\137\114\041\115\072\116\025\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\150" +
    "\007\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\044\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\002\001" +
    "\uff65\000\020\011\172\020\244\046\u0366\047\u0369\115\u036a" +
    "\117\056\227\243\001\002\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\004\227\u035e\001\002\000\002\001\uff5f\000\004\227" +
    "\u034e\001\002\000\004\231\u034d\001\ufe0f\000\014\013\u0274" +
    "\017\u034a\104\u0349\105\u0276\106\u0275\001\002\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\002\001\ufe6d\000\004\107\u0331\001" +
    "\002\000\160\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\006" +
    "\013\u0328\046\u011a\001\ufe81\000\002\001\ufe4b\000\004\227" +
    "\u0320\001\002\000\002\001\ufe6a\000\002\001\ufe69\000\004" +
    "\011\u031a\001\002\000\004\227\u0317\001\002\000\162\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\155\u0304" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\ufe31\000\030\011\172" +
    "\013\063\020\136\075\014\112\176\115\072\117\056\213" +
    "\053\221\346\227\u014f\232\106\001\002\000\014\072\ufe57" +
    "\107\ufe57\111\ufe57\213\ufe57\227\ufe54\001\ufe62\000\002\001" +
    "\ufe0e\000\162\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\150\u0300\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\004\227\u02fd\001\002\000\004\111\u02f6\001\002\000" +
    "\012\013\u0274\017\u02f4\105\u0276\106\u0275\001\ufe77\000\002" +
    "\001\uff14\000\004\066\u02f1\001\002\000\002\001\ufe70\000" +
    "\004\213\u0152\001\ufe61\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\002\001\uff98\000\002\001\ufe9a\000\006\011" +
    "\172\117\056\001\002\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\160\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\002\000\004\011\u02e8" +
    "\001\002\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\002\001\uff82\000\022\011\172\013\063\066\u02d7\112\176" +
    "\115\072\117\056\221\346\232\106\001\002\000\012\013" +
    "\u0274\017\u0277\105\u0276\106\u0275\001\002\000\004\227\u02cc" +
    "\001\002\000\012\011\172\107\u02c4\115\u0118\117\056\001" +
    "\002\000\010\072\u02bb\107\u02b9\213\u02ba\001\ufe3f\000\010" +
    "\013\063\107\u02b6\232\106\001\002\000\004\227\u029e\001" +
    "\002\000\006\111\ufe80\227\u029b\001\ufe4a\000\002\001\uffb3" +
    "\000\160\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\002\001\ufe72\000\004\155\201\001" +
    "\uff64\000\004\227\ufe56\001\ufe5c\000\012\013\u0274\017\u0277" +
    "\105\u0276\106\u0275\001\002\000\004\011\u021a\001\002\000" +
    "\002\001\ufe6b\000\002\001\uff76\000\236\003\123\004\154" +
    "\005\165\006\115\007\010\010\065\011\035\013\063\015" +
    "\100\020\136\021\022\022\130\023\124\024\046\026\034" +
    "\030\107\032\166\035\112\037\140\043\057\044\126\045" +
    "\076\046\177\050\147\051\012\052\043\053\042\055\163" +
    "\057\231\060\011\062\103\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\107\070\112\176\113\137\114\041\115\072\116\025\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\150\007\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\044\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\002" +
    "\001\uff5c\000\162\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\150\u0211\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\002\001\ufe50\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\002\001\uffb2\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\002\001\uffbb\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\004\227\u0207\001\002\000\002\001" +
    "\ufe51\000\002\001\ufe68\000\004\227\u01ee\001\002\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\002\001\ufe6f\000" +
    "\002\001\uff66\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\006\011\172\117\056\001\002\000\002\001\ufe9e\000" +
    "\162\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\150\u01c6\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\002" +
    "\001\ufe5d\000\004\111\u0171\001\002\000\002\001\uff59\000" +
    "\004\115\262\001\uffb9\000\004\227\u016c\001\ufe7a\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\002\001\uffb4\000" +
    "\004\227\u0165\001\002\000\004\227\u0157\001\002\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\030\011\172\013" +
    "\063\020\136\075\014\112\176\115\072\117\056\213\053" +
    "\221\346\227\u014f\232\106\001\002\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\002\001\uffb6\000\004\227\u012e" +
    "\001\002\000\004\227\167\001\002\000\006\011\172\117" +
    "\056\001\002\000\006\125\u0125\230\u0124\001\002\000\004" +
    "\132\173\001\002\000\002\001\ufe0f\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\074\034\321\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\243\310\244\277" +
    "\001\uff44\000\004\046\u011a\001\ufe81\000\004\115\u0118\001" +
    "\002\000\004\155\201\001\uff64\000\004\227\202\001\002" +
    "\000\002\001\uff63\000\020\011\172\075\203\112\210\115" +
    "\212\117\056\230\uff2e\240\207\001\uff25\000\002\001\uff23" +
    "\000\004\115\262\001\ufe7f\000\010\013\272\155\271\242" +
    "\270\001\002\000\004\125\266\001\uff2f\000\002\001\uff22" +
    "\000\004\115\264\001\002\000\002\001\uff24\000\006\011" +
    "\172\117\056\001\002\000\002\001\uff2d\000\004\230\215" +
    "\001\002\000\004\057\216\001\ufe8b\000\004\227\250\001" +
    "\002\000\004\231\221\001\uff18\000\004\107\226\001\002" +
    "\000\016\011\172\075\223\112\176\115\072\117\056\240" +
    "\224\001\002\000\002\001\uff19\000\002\001\uff1b\000\002" +
    "\001\uff1a\000\002\001\uff17\000\002\001\uff98\000\254\003" +
    "\123\004\154\005\165\006\115\007\010\010\065\011\035" +
    "\013\063\015\100\020\136\021\022\022\130\023\124\024" +
    "\046\026\034\030\107\032\166\035\112\037\140\043\057" +
    "\044\126\045\076\046\116\050\147\051\012\052\043\053" +
    "\042\055\163\057\231\060\011\062\103\063\157\064\032" +
    "\065\232\066\033\067\152\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\107\070\110\234" +
    "\112\176\113\137\114\041\115\072\116\025\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\150\007" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\044\222\064\223\017\227" +
    "\161\232\106\233\120\234\062\235\102\237\125\241\122" +
    "\001\002\000\002\001\uff99\000\006\020\244\227\243\001" +
    "\002\000\004\227\237\001\002\000\002\001\uff96\000\002" +
    "\001\ufe8d\000\002\001\uff95\000\002\001\uff97\000\004\230" +
    "\240\001\002\000\004\150\241\001\002\000\002\001\uff94" +
    "\000\004\150\247\001\002\000\004\020\245\001\002\000" +
    "\002\001\uff68\000\004\230\246\001\002\000\002\001\uff67" +
    "\000\002\001\uff80\000\006\013\254\155\252\001\002\000" +
    "\002\001\ufe88\000\004\013\260\001\002\000\006\125\256" +
    "\230\255\001\002\000\002\001\ufe87\000\002\001\ufe8a\000" +
    "\006\013\254\155\252\001\002\000\002\001\ufe89\000\002" +
    "\001\ufe86\000\004\115\262\001\ufe7d\000\006\011\172\117" +
    "\056\001\002\000\002\001\uffba\000\006\011\172\117\056" +
    "\001\002\000\004\115\262\001\ufe7e\000\016\011\172\075" +
    "\203\112\210\115\212\117\056\240\207\001\uff25\000\002" +
    "\001\uff2c\000\004\013\u0117\001\002\000\006\013\u0113\242" +
    "\u0112\001\002\000\004\132\273\001\uff2b\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\074\034\321\126\311\127" +
    "\331\130\301\147\305\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\243\310\244" +
    "\277\001\uff27\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\160\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\160\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\160\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\162\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\231\u0106\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\160\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\160\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\160\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\002\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\160\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\020\011" +
    "\172\013\063\112\176\115\072\117\056\221\346\232\106" +
    "\001\002\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\160\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\002\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\160\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\070\034\321\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\ufebb\000\014\034" +
    "\321\172\317\173\303\174\316\175\276\001\ufeb6\000\040" +
    "\034\321\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\001\ufea8\000\030\034\321\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\001\ufea5\000\030\034\321\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\001\ufea3\000\030\034\321\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\001\ufea4\000\050\034\321\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\001\ufeb9\000\056\034\321" +
    "\153\302\154\313\155\323\156\327\157\314\160\275\161" +
    "\312\162\326\163\325\164\306\165\324\166\320\167\315" +
    "\170\330\171\307\172\317\173\303\174\316\175\276\200" +
    "\304\243\310\001\ufebe\000\002\001\ufea1\000\002\001\ufe80" +
    "\000\012\072\355\107\352\111\354\213\353\001\ufe7b\000" +
    "\004\111\350\001\ufe7c\000\002\001\ufe81\000\002\001\ufe45" +
    "\000\006\013\063\232\106\001\002\000\002\001\ufe41\000" +
    "\160\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\002\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\ufe3e\000\006\013\063\232\106\001" +
    "\002\000\014\011\172\013\063\107\360\117\056\232\106" +
    "\001\002\000\002\001\ufe37\000\002\001\ufe42\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\002\001\ufe39\000\076" +
    "\034\321\110\363\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\002\000\002\001" +
    "\ufe38\000\002\001\ufe40\000\074\034\321\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\243\310\244\277" +
    "\001\ufe3d\000\004\214\367\001\002\000\002\001\ufe44\000" +
    "\076\034\321\110\371\126\311\127\331\130\301\147\305" +
    "\151\300\152\322\153\302\154\313\155\323\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\244\277\001\002\000\002" +
    "\001\ufe43\000\022\034\321\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\001\ufeb0\000\004\034\321" +
    "\001\ufeb4\000\004\034\321\001\ufeb2\000\022\034\321\170" +
    "\330\171\307\172\317\173\303\174\316\175\276\200\304" +
    "\001\ufeaf\000\040\034\321\162\326\163\325\164\306\165" +
    "\324\166\320\167\315\170\330\171\307\172\317\173\303" +
    "\174\316\175\276\200\304\243\310\001\ufea7\000\052\034" +
    "\321\155\323\156\327\157\314\160\275\161\312\162\326" +
    "\163\325\164\306\165\324\166\320\167\315\170\330\171" +
    "\307\172\317\173\303\174\316\175\276\200\304\243\310" +
    "\001\ufeb8\000\040\034\321\162\326\163\325\164\306\165" +
    "\324\166\320\167\315\170\330\171\307\172\317\173\303" +
    "\174\316\175\276\200\304\243\310\001\ufea9\000\072\034" +
    "\321\127\331\130\301\147\305\151\300\152\322\153\302" +
    "\154\313\155\323\156\327\157\314\160\275\161\312\162" +
    "\326\163\325\164\306\165\324\166\320\167\315\170\330" +
    "\171\307\172\317\173\303\174\316\175\276\200\304\243" +
    "\310\244\277\001\ufebd\000\026\034\321\166\320\167\315" +
    "\170\330\171\307\172\317\173\303\174\316\175\276\200" +
    "\304\001\ufea2\000\014\034\321\172\317\173\303\174\316" +
    "\175\276\001\ufeb5\000\030\034\321\166\320\167\315\170" +
    "\330\171\307\172\317\173\303\174\316\175\276\200\304" +
    "\243\310\001\ufea6\000\076\034\321\126\311\127\331\130" +
    "\301\147\305\151\300\152\322\153\302\154\313\155\323" +
    "\156\327\157\314\160\275\161\312\162\326\163\325\164" +
    "\306\165\324\166\320\167\315\170\330\171\307\172\317" +
    "\173\303\174\316\175\276\200\304\231\u0108\243\310\244" +
    "\277\001\002\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\074\034\321\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\ufe9c\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\074\034\321\126\311" +
    "\127\331\130\301\147\305\151\300\152\322\153\302\154" +
    "\313\155\323\156\327\157\314\160\275\161\312\162\326" +
    "\163\325\164\306\165\324\166\320\167\315\170\330\171" +
    "\307\172\317\173\303\174\316\175\276\200\304\243\310" +
    "\244\277\001\ufe9d\000\014\034\321\172\317\173\303\174" +
    "\316\175\276\001\ufeb7\000\004\034\321\001\ufeb3\000\054" +
    "\034\321\154\313\155\323\156\327\157\314\160\275\161" +
    "\312\162\326\163\325\164\306\165\324\166\320\167\315" +
    "\170\330\171\307\172\317\173\303\174\316\175\276\200" +
    "\304\243\310\001\ufeba\000\066\034\321\147\305\151\300" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\243\310\244\277\001\ufebc\000\060\034\321" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\243\310\001\ufebf\000\064\034\321\151\300" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\243\310\244\277\001\ufe9b\000\004\034\321" +
    "\001\ufeb1\000\040\034\321\162\326\163\325\164\306\165" +
    "\324\166\320\167\315\170\330\171\307\172\317\173\303" +
    "\174\316\175\276\200\304\243\310\001\ufeaa\000\004\013" +
    "\u0116\001\002\000\004\132\u0114\001\uff29\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\074\034\321\126\311\127" +
    "\331\130\301\147\305\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\243\310\244" +
    "\277\001\uff26\000\002\001\uff28\000\002\001\uff2a\000\006" +
    "\011\172\117\056\001\002\000\004\115\262\001\uffb8\000" +
    "\004\155\201\001\uff64\000\004\227\u011c\001\002\000\020" +
    "\011\172\075\203\112\210\115\212\117\056\230\uff2e\240" +
    "\207\001\uff25\000\004\230\u011e\001\002\000\004\057\216" +
    "\001\ufe8b\000\004\231\221\001\uff18\000\004\107\u0121\001" +
    "\002\000\002\001\uff98\000\254\003\123\004\154\005\165" +
    "\006\115\007\010\010\065\011\035\013\063\015\100\020" +
    "\136\021\022\022\130\023\124\024\046\026\034\030\107" +
    "\032\166\035\112\037\140\043\057\044\126\045\076\046" +
    "\116\050\147\051\012\052\043\053\042\055\163\057\231" +
    "\060\011\062\103\063\157\064\032\065\232\066\033\067" +
    "\152\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\107\070\110\u0123\112\176\113\137\114" +
    "\041\115\072\116\025\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\150\007\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\044\222\064\223\017\227\161\232\106\233\120" +
    "\234\062\235\102\237\125\241\122\001\002\000\002\001" +
    "\ufe8c\000\240\003\123\004\154\005\165\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\136\021\022\022" +
    "\130\023\124\024\046\026\034\030\107\032\166\035\112" +
    "\037\140\043\057\044\126\045\076\046\177\050\147\051" +
    "\012\052\043\053\042\055\163\057\231\060\011\062\103" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\107\070\112\176\113\137" +
    "\114\041\115\072\116\025\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\150\007\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\044\227\161\231\u012a\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\006\011\172\117\056" +
    "\001\002\000\004\132\u0127\001\002\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\074\034\321\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\243\310\244\277" +
    "\001\uff43\000\002\001\uff7c\000\002\001\uff98\000\002\001" +
    "\uff46\000\254\003\123\004\154\005\165\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\136\021\022\022" +
    "\130\023\124\024\046\026\034\030\107\032\166\033\u012d" +
    "\035\112\037\140\043\057\044\126\045\076\046\116\050" +
    "\147\051\012\052\043\053\042\055\163\057\231\060\011" +
    "\062\103\063\157\064\032\065\232\066\033\067\152\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\107\070\112\176\113\137\114\041\115\072\116" +
    "\025\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\150\007\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\044\222" +
    "\064\223\017\227\161\232\106\233\120\234\062\235\102" +
    "\237\125\241\122\001\002\000\002\001\uff45\000\160\004" +
    "\154\006\115\007\010\010\065\011\172\013\063\020\136" +
    "\035\112\046\177\051\012\052\043\063\157\064\032\074" +
    "\160\075\014\076\021\077\047\100\050\101\142\102\006" +
    "\103\036\112\176\113\137\114\041\115\072\117\056\120" +
    "\031\121\074\122\052\123\132\124\114\131\067\170\113" +
    "\171\073\176\155\177\016\201\054\202\162\203\030\204" +
    "\141\205\040\206\134\207\077\210\144\211\075\212\037" +
    "\213\053\215\101\221\175\227\161\232\106\233\120\234" +
    "\062\235\102\241\122\001\002\000\076\034\321\126\311" +
    "\127\331\130\301\147\305\151\300\152\322\153\302\154" +
    "\313\155\323\156\327\157\314\160\275\161\312\162\326" +
    "\163\325\164\306\165\324\166\320\167\315\170\330\171" +
    "\307\172\317\173\303\174\316\175\276\200\304\230\u0130" +
    "\243\310\244\277\001\002\000\240\003\123\004\154\005" +
    "\165\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\136\021\022\022\130\023\124\024\046\026\034\030" +
    "\107\032\166\035\112\037\140\043\057\044\126\045\076" +
    "\046\177\050\147\051\012\052\043\053\042\055\163\057" +
    "\231\060\011\062\103\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\107" +
    "\070\112\176\113\137\114\041\115\072\116\025\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\150" +
    "\007\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\044\227\161\231\u0131" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\002\001\uff98\000\002\001\uff37\000\006\217\u0136\220\u0135" +
    "\001\uff33\000\002\001\uff92\000\236\003\123\004\154\005" +
    "\165\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\136\021\022\022\130\023\124\024\046\026\034\030" +
    "\107\032\166\035\112\037\140\043\057\044\126\045\076" +
    "\046\177\050\147\051\012\052\043\053\042\055\163\057" +
    "\231\060\011\062\103\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\107" +
    "\070\112\176\113\137\114\041\115\072\116\025\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\150" +
    "\007\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\044\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\004\227" +
    "\u0137\001\002\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\076\034\321\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\230\u0139\243\310\244\277\001\002\000" +
    "\236\003\123\004\154\005\165\006\115\007\010\010\065" +
    "\011\035\013\063\015\100\020\136\021\022\022\130\023" +
    "\124\024\046\026\034\030\107\032\166\035\112\037\140" +
    "\043\057\044\126\045\076\046\177\050\147\051\012\052" +
    "\043\053\042\055\163\057\231\060\011\062\103\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\107\070\112\176\113\137\114\041" +
    "\115\072\116\025\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\150\007\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\044\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\002\001\uff36\000\002\001\uff32\000\252" +
    "\003\123\004\154\005\165\006\115\007\010\010\065\011" +
    "\035\013\063\015\100\020\136\021\022\022\130\023\124" +
    "\024\046\026\034\030\107\032\166\035\112\037\140\043" +
    "\057\044\126\045\076\046\116\050\147\051\012\052\043" +
    "\053\042\055\163\057\231\060\011\062\103\063\157\064" +
    "\032\065\232\066\033\067\152\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\107\070\112" +
    "\176\113\137\114\041\115\072\116\025\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\150\007\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\044\222\064\223\017\227\161" +
    "\232\106\233\120\234\062\235\102\237\125\241\122\001" +
    "\uff35\000\006\217\u0140\220\u013f\001\uff31\000\004\216\u0148" +
    "\001\002\000\004\231\u0146\001\002\000\004\227\u0141\001" +
    "\002\000\160\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\076" +
    "\034\321\126\311\127\331\130\301\147\305\151\300\152" +
    "\322\153\302\154\313\155\323\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\230\u0143\243\310\244\277\001\002\000\004\231" +
    "\u0144\001\002\000\002\001\uff98\000\252\003\123\004\154" +
    "\005\165\006\115\007\010\010\065\011\035\013\063\015" +
    "\100\020\136\021\022\022\130\023\124\024\046\026\034" +
    "\030\107\032\166\035\112\037\140\043\057\044\126\045" +
    "\076\046\116\050\147\051\012\052\043\053\042\055\163" +
    "\057\231\060\011\062\103\063\157\064\032\065\232\066" +
    "\033\067\152\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\107\070\112\176\113\137\114" +
    "\041\115\072\116\025\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\150\007\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\044\222\064\223\017\227\161\232\106\233\120" +
    "\234\062\235\102\237\125\241\122\001\uff34\000\002\001" +
    "\uff98\000\252\003\123\004\154\005\165\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\136\021\022\022" +
    "\130\023\124\024\046\026\034\030\107\032\166\035\112" +
    "\037\140\043\057\044\126\045\076\046\116\050\147\051" +
    "\012\052\043\053\042\055\163\057\231\060\011\062\103" +
    "\063\157\064\032\065\232\066\033\067\152\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\107\070\112\176\113\137\114\041\115\072\116\025\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\150\007\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\044\222\064\223" +
    "\017\227\161\232\106\233\120\234\062\235\102\237\125" +
    "\241\122\001\uff30\000\004\150\u0149\001\002\000\002\001" +
    "\uff91\000\076\034\321\126\311\127\331\130\301\147\305" +
    "\150\u014b\151\300\152\322\153\302\154\313\155\323\156" +
    "\327\157\314\160\275\161\312\162\326\163\325\164\306" +
    "\165\324\166\320\167\315\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\243\310\244\277\001\002" +
    "\000\002\001\uff79\000\004\213\u0152\001\002\000\004\227" +
    "\ufe54\001\ufe57\000\012\072\ufe59\107\ufe59\111\ufe59\213\ufe59" +
    "\001\ufec0\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\076\034\321\126\311\127\331\130\301\147\305\151\300" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\230\u0151\243\310\244\277\001\002\000\004" +
    "\227\ufe55\001\ufe58\000\160\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\ufe3e\000\004\214\u0154\001\002\000\002\001\ufe4e\000\076" +
    "\034\321\126\311\127\331\130\301\147\305\151\300\152" +
    "\322\153\302\154\313\155\323\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\230\u0156\243\310\244\277\001\002\000\014\072" +
    "\ufe58\107\ufe58\111\ufe58\213\ufe58\227\ufe55\001\ufea0\000\032" +
    "\011\172\013\063\020\136\074\u015c\075\014\112\176\115" +
    "\072\117\056\213\053\221\346\227\u014f\232\106\001\ufe32" +
    "\000\002\001\ufe33\000\006\125\u0160\230\u0162\001\002\000" +
    "\002\001\ufe35\000\006\125\ufe34\230\ufe34\001\ufe59\000\004" +
    "\227\u015d\001\002\000\032\011\172\013\063\020\136\074" +
    "\u015c\075\014\112\176\115\072\117\056\213\053\221\346" +
    "\227\u014f\232\106\001\ufe32\000\006\125\u0160\230\u015f\001" +
    "\002\000\002\001\uff52\000\032\011\172\013\063\020\136" +
    "\074\u015c\075\014\112\176\115\072\117\056\213\053\221" +
    "\346\227\u014f\232\106\001\ufe32\000\002\001\ufe36\000\004" +
    "\132\u0163\001\002\000\160\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\066\034\321\147\305\151\300\152\322\153\302" +
    "\154\313\155\323\156\327\157\314\160\275\161\312\162" +
    "\326\163\325\164\306\165\324\166\320\167\315\170\330" +
    "\171\307\172\317\173\303\174\316\175\276\200\304\243" +
    "\310\244\277\001\ufed3\000\030\011\172\013\063\020\136" +
    "\075\014\112\176\115\072\117\056\213\053\221\346\227" +
    "\u014f\232\106\001\002\000\006\125\ufe11\230\ufe11\001\ufe59" +
    "\000\006\125\u0169\230\u0168\001\002\000\002\001\ufe18\000" +
    "\030\011\172\013\063\020\136\075\014\112\176\115\072" +
    "\117\056\213\053\221\346\227\u014f\232\106\001\002\000" +
    "\006\125\ufe10\230\ufe10\001\ufe59\000\004\034\321\001\ufeac" +
    "\000\162\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\230\u016f" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\002\001\ufe92\000\076\034\321\126\311\127\331\130\301" +
    "\147\305\151\300\152\322\153\302\154\313\155\323\156" +
    "\327\157\314\160\275\161\312\162\326\163\325\164\306" +
    "\165\324\166\320\167\315\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\230\u0170\243\310\244\277" +
    "\001\002\000\002\001\ufe79\000\002\001\ufe78\000\216\004" +
    "\u01b0\005\u01b9\011\172\013\063\022\u01a6\023\u01a4\024\u0182" +
    "\025\u0186\026\u017d\027\u0199\030\u0196\031\u0183\032\u01b8\033" +
    "\u019f\034\u0185\035\u0198\036\u017e\037\u01aa\040\u0195\041\u0172" +
    "\042\u0188\043\u0187\044\u01a5\045\u0190\046\u019b\047\u01ab\050" +
    "\u01ad\051\u0174\053\u017f\054\u01b5\055\u01b7\056\u0189\057\u0179" +
    "\060\u0173\061\u01b6\062\u0192\063\u01b3\064\u017b\066\u017c\067" +
    "\u01af\070\u0178\071\u0197\074\u01b4\075\u0175\107\u018c\112\u0193" +
    "\117\056\120\u017a\121\u018f\122\u0184\123\u01a8\124\u019a\126" +
    "\u01b1\127\u01b2\130\u01ae\131\u018b\215\u0191\216\u018d\217\u018e" +
    "\220\u01a2\221\u0181\222\u018a\223\u0176\224\u019e\225\u019d\226" +
    "\u01ac\232\106\236\u019c\237\u01a3\240\u0177\001\002\000\002" +
    "\001\uffcf\000\002\001\uffde\000\002\001\uffd3\000\002\001" +
    "\uffcc\000\002\001\uffc1\000\002\001\uffcb\000\002\001\uffca" +
    "\000\002\001\uffe0\000\002\001\uffff\000\002\001\uffda\000" +
    "\002\001\uffc5\000\002\001\uffeb\000\002\001\uffe5\000\002" +
    "\001\uffe4\000\002\001\uffbc\000\002\001\uffc3\000\002\001" +
    "\uffed\000\002\001\uffe8\000\002\001\ufffd\000\002\001\ufff7" +
    "\000\002\001\uffec\000\002\001\uffcd\000\002\001\uffce\000" +
    "\002\001\uffe2\000\002\001\uffc2\000\002\001\uffd4\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\002\001\ufff0\000" +
    "\002\001\ufff2\000\002\001\ufffe\000\002\001\uffd8\000\002" +
    "\001\ufff6\000\002\001\uffdc\000\002\001\uffc8\000\004\227" +
    "\ufe3c\001\ufe48\000\002\001\uffd0\000\002\001\uffe9\000\002" +
    "\001\uffc9\000\002\001\ufff5\000\002\001\uffea\000\002\001" +
    "\ufffb\000\002\001\uffd7\000\002\001\uffdf\000\002\001\uffbf" +
    "\000\002\001\uffc0\000\002\001\uffe6\000\002\001\uffc4\000" +
    "\004\227\u01ba\001\002\000\002\001\ufff1\000\002\001\uffc7" +
    "\000\002\001\uffee\000\002\001\uffd9\000\002\001\uffef\000" +
    "\004\227\ufe3a\001\ufe46\000\002\001\ufffc\000\002\001\uffbd" +
    "\000\002\001\uffd1\000\002\001\uffd6\000\002\001\uffbe\000" +
    "\002\001\uffd5\000\002\001\ufff8\000\002\001\uffc6\000\002" +
    "\001\ufff4\000\002\001\ufffa\000\002\001\ufff9\000\002\001" +
    "\uffdb\000\002\001\uffd2\000\002\001\uffe3\000\002\001\uffdd" +
    "\000\002\001\uffe1\000\002\001\uffe7\000\002\001\ufff3\000" +
    "\162\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\242\u01bf\001\uff20\000\004" +
    "\230\u01c3\001\002\000\074\034\321\126\311\127\331\130" +
    "\301\147\305\151\300\152\322\153\302\154\313\155\323" +
    "\156\327\157\314\160\275\161\312\162\326\163\325\164" +
    "\306\165\324\166\320\167\315\170\330\171\307\172\317" +
    "\173\303\174\316\175\276\200\304\243\310\244\277\001" +
    "\uff1d\000\002\001\uff1f\000\004\125\u01c1\001\uff21\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\074\034\321\126" +
    "\311\127\331\130\301\147\305\151\300\152\322\153\302" +
    "\154\313\155\323\156\327\157\314\160\275\161\312\162" +
    "\326\163\325\164\306\165\324\166\320\167\315\170\330" +
    "\171\307\172\317\173\303\174\316\175\276\200\304\243" +
    "\310\244\277\001\uff1c\000\162\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\242\u01bf\001\002\000\002\001\uff1e\000\002\001\ufe83\000" +
    "\076\034\321\110\u01c5\126\311\127\331\130\301\147\305" +
    "\151\300\152\322\153\302\154\313\155\323\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\244\277\001\002\000\002" +
    "\001\ufe3b\000\002\001\uff88\000\074\034\321\126\311\127" +
    "\331\130\301\147\305\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\243\310\244" +
    "\277\001\002\000\052\072\ufe59\107\ufe59\111\ufe59\132\u01cc" +
    "\133\u01d0\134\u01cd\135\u01da\136\u01d1\137\u01d7\140\u01d3\141" +
    "\u01d6\142\u01cf\143\u01cb\144\u01d2\145\u01d4\146\u01ce\150\u01d8" +
    "\201\u01d5\202\u01d9\213\ufe59\001\ufe5e\000\004\150\u01ca\001" +
    "\ufe5d\000\002\001\uff87\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\162\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\155\u01e6\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\160\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\160\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\002\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\002\001\ufec3\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\160\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\002\001\uff86\000\002\001\ufec1\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\066\034\321\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\ufecd\000\066\034" +
    "\321\147\305\151\300\152\322\153\302\154\313\155\323" +
    "\156\327\157\314\160\275\161\312\162\326\163\325\164" +
    "\306\165\324\166\320\167\315\170\330\171\307\172\317" +
    "\173\303\174\316\175\276\200\304\243\310\244\277\001" +
    "\ufeca\000\066\034\321\147\305\151\300\152\322\153\302" +
    "\154\313\155\323\156\327\157\314\160\275\161\312\162" +
    "\326\163\325\164\306\165\324\166\320\167\315\170\330" +
    "\171\307\172\317\173\303\174\316\175\276\200\304\243" +
    "\310\244\277\001\ufec8\000\066\034\321\147\305\151\300" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\243\310\244\277\001\ufec4\000\066\034\321" +
    "\147\305\151\300\152\322\153\302\154\313\155\323\156" +
    "\327\157\314\160\275\161\312\162\326\163\325\164\306" +
    "\165\324\166\320\167\315\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\243\310\244\277\001\ufec9" +
    "\000\066\034\321\147\305\151\300\152\322\153\302\154" +
    "\313\155\323\156\327\157\314\160\275\161\312\162\326" +
    "\163\325\164\306\165\324\166\320\167\315\170\330\171" +
    "\307\172\317\173\303\174\316\175\276\200\304\243\310" +
    "\244\277\001\ufec5\000\066\034\321\147\305\151\300\152" +
    "\322\153\302\154\313\155\323\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\244\277\001\ufecb\000\066\034\321\147" +
    "\305\151\300\152\322\153\302\154\313\155\323\156\327" +
    "\157\314\160\275\161\312\162\326\163\325\164\306\165" +
    "\324\166\320\167\315\170\330\171\307\172\317\173\303" +
    "\174\316\175\276\200\304\243\310\244\277\001\ufecf\000" +
    "\066\034\321\147\305\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\243\310\244" +
    "\277\001\ufec7\000\074\034\321\126\311\127\331\130\301" +
    "\147\305\151\300\152\322\153\302\154\313\155\323\156" +
    "\327\157\314\160\275\161\312\162\326\163\325\164\306" +
    "\165\324\166\320\167\315\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\243\310\244\277\001\ufecc" +
    "\000\066\034\321\147\305\151\300\152\322\153\302\154" +
    "\313\155\323\156\327\157\314\160\275\161\312\162\326" +
    "\163\325\164\306\165\324\166\320\167\315\170\330\171" +
    "\307\172\317\173\303\174\316\175\276\200\304\243\310" +
    "\244\277\001\ufece\000\030\011\172\013\063\020\136\075" +
    "\014\112\176\115\072\117\056\213\053\221\346\227\u014f" +
    "\232\106\001\002\000\066\034\321\147\305\151\300\152" +
    "\322\153\302\154\313\155\323\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\244\277\001\ufed2\000\012\072\ufe59\107" +
    "\ufe59\111\ufe59\213\ufe59\001\ufed1\000\066\034\321\147\305" +
    "\151\300\152\322\153\302\154\313\155\323\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\244\277\001\ufec6\000\006" +
    "\125\u0125\150\u01eb\001\002\000\002\001\uffa9\000\002\001" +
    "\ufe94\000\002\001\ufe98\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\076\034\321\126\311\127\331\130\301\147" +
    "\305\151\300\152\322\153\302\154\313\155\323\156\327" +
    "\157\314\160\275\161\312\162\326\163\325\164\306\165" +
    "\324\166\320\167\315\170\330\171\307\172\317\173\303" +
    "\174\316\175\276\200\304\230\u01f0\243\310\244\277\001" +
    "\002\000\006\107\u01f2\231\u01f3\001\002\000\002\001\uff8d" +
    "\000\004\150\u0203\001\uff3e\000\004\150\u01f5\001\uff3e\000" +
    "\010\040\u0201\041\u01f8\042\u01f9\001\002\000\002\001\uff3e" +
    "\000\010\040\u01f7\041\u01f8\042\u01f9\001\002\000\002\001" +
    "\uff3f\000\160\004\154\006\115\007\010\010\065\011\172" +
    "\013\063\020\136\035\112\046\177\051\012\052\043\063" +
    "\157\064\032\074\160\075\014\076\021\077\047\100\050" +
    "\101\142\102\006\103\036\112\176\113\137\114\041\115" +
    "\072\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\175\227\161\232" +
    "\106\233\120\234\062\235\102\241\122\001\002\000\006" +
    "\150\u01fc\231\u01fb\001\002\000\002\001\uff98\000\002\001" +
    "\uff3b\000\002\001\uff3a\000\252\003\123\004\154\005\165" +
    "\006\115\007\010\010\065\011\035\013\063\015\100\020" +
    "\136\021\022\022\130\023\124\024\046\026\034\030\107" +
    "\032\166\035\112\037\140\043\057\044\126\045\076\046" +
    "\116\050\147\051\012\052\043\053\042\055\163\057\231" +
    "\060\011\062\103\063\157\064\032\065\232\066\033\067" +
    "\152\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\107\070\112\176\113\137\114\041\115" +
    "\072\116\025\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\150\007\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\044\222\064\223\017\227\161\232\106\233\120\234\062" +
    "\235\102\237\125\241\122\001\uff3c\000\100\034\321\126" +
    "\311\127\331\130\301\147\305\150\u01fc\151\300\152\322" +
    "\153\302\154\313\155\323\156\327\157\314\160\275\161" +
    "\312\162\326\163\325\164\306\165\324\166\320\167\315" +
    "\170\330\171\307\172\317\173\303\174\316\175\276\200" +
    "\304\231\u01fb\243\310\244\277\001\002\000\002\001\uff98" +
    "\000\252\003\123\004\154\005\165\006\115\007\010\010" +
    "\065\011\035\013\063\015\100\020\136\021\022\022\130" +
    "\023\124\024\046\026\034\030\107\032\166\035\112\037" +
    "\140\043\057\044\126\045\076\046\116\050\147\051\012" +
    "\052\043\053\042\055\163\057\231\060\011\062\103\063" +
    "\157\064\032\065\232\066\033\067\152\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\107" +
    "\070\112\176\113\137\114\041\115\072\116\025\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\150" +
    "\007\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\044\222\064\223\017" +
    "\227\161\232\106\233\120\234\062\235\102\237\125\241" +
    "\122\001\uff3d\000\002\001\uff40\000\010\041\u01f8\042\u01f9" +
    "\110\u0206\001\002\000\002\001\uff3e\000\010\041\u01f8\042" +
    "\u01f9\110\u0205\001\002\000\002\001\uff41\000\002\001\uff42" +
    "\000\162\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\242\u01bf\001\uff20\000" +
    "\004\230\u0209\001\002\000\002\001\ufe82\000\002\001\ufe96" +
    "\000\074\034\321\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\ufe13\000\074\034" +
    "\321\126\311\127\331\130\301\147\305\151\300\152\322" +
    "\153\302\154\313\155\323\156\327\157\314\160\275\161" +
    "\312\162\326\163\325\164\306\165\324\166\320\167\315" +
    "\170\330\171\307\172\317\173\303\174\316\175\276\200" +
    "\304\243\310\244\277\001\ufedb\000\006\125\u020e\150\u020f" +
    "\001\002\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\002\000" +
    "\002\001\uff83\000\074\034\321\126\311\127\331\130\301" +
    "\147\305\151\300\152\322\153\302\154\313\155\323\156" +
    "\327\157\314\160\275\161\312\162\326\163\325\164\306" +
    "\165\324\166\320\167\315\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\243\310\244\277\001\ufedc" +
    "\000\002\001\uff8a\000\076\034\321\126\311\127\331\130" +
    "\301\147\305\150\u0213\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\243\310\244" +
    "\277\001\002\000\002\001\uff89\000\004\024\u0215\001\002" +
    "\000\004\227\u0216\001\002\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\076\034\321\126\311\127\331\130\301" +
    "\147\305\151\300\152\322\153\302\154\313\155\323\156" +
    "\327\157\314\160\275\161\312\162\326\163\325\164\306" +
    "\165\324\166\320\167\315\170\330\171\307\172\317\173" +
    "\303\174\316\175\276\200\304\230\u0218\243\310\244\277" +
    "\001\002\000\004\150\u0219\001\002\000\002\001\uff8f\000" +
    "\004\070\u021c\001\uff58\000\004\107\u0221\001\002\000\012" +
    "\011\172\112\210\115\212\117\056\001\002\000\004\125" +
    "\u021f\001\uff57\000\002\001\uff54\000\012\011\172\112\210" +
    "\115\212\117\056\001\002\000\002\001\uff53\000\002\001" +
    "\uff0c\000\030\047\u022f\057\u0227\061\u0225\110\u022b\116\u0232" +
    "\221\u0228\222\u022c\223\u022e\224\u0231\225\u0226\226\u022a\001" +
    "\ufeed\000\002\001\uff07\000\002\001\uff0d\000\002\001\ufeee" +
    "\000\002\001\ufee8\000\012\011\172\112\210\115\212\117" +
    "\056\001\002\000\002\001\ufee6\000\002\001\ufeeb\000\002" +
    "\001\ufee9\000\002\001\uff60\000\002\001\ufee5\000\004\013" +
    "\u024b\001\002\000\002\001\ufee4\000\210\004\u01b0\005\u01b9" +
    "\011\172\022\u01a6\023\u01a4\024\u0182\025\u0186\026\u017d\027" +
    "\u0199\030\u0196\031\u0183\032\u01b8\033\u019f\034\u0185\035\u0198" +
    "\036\u017e\037\u01aa\040\u0195\041\u0172\042\u0188\043\u0187\044" +
    "\u01a5\045\u0190\046\u019b\047\u01ab\050\u01ad\051\u0174\053\u017f" +
    "\054\u01b5\055\u01b7\056\u0189\057\u0179\060\u0173\061\u01b6\062" +
    "\u0192\063\u01b3\064\u017b\066\u017c\067\u01af\070\u0178\071\u0197" +
    "\074\u01b4\075\u0175\112\u0193\117\056\120\u017a\121\u018f\122" +
    "\u0184\123\u01a8\124\u019a\126\u01b1\127\u01b2\130\u01ae\131\u018b" +
    "\215\u0191\216\u018d\217\u018e\220\u01a2\221\u0181\222\u018a\223" +
    "\u0176\224\u019e\225\u019d\226\u01ac\236\u019c\237\u01a3\240\u0177" +
    "\001\002\000\020\046\ufeec\221\u0228\222\u022c\223\u022e\224" +
    "\u0231\225\u0226\226\u022a\001\ufeef\000\002\001\ufee7\000\236" +
    "\003\123\004\154\005\165\006\115\007\010\010\065\011" +
    "\035\013\063\015\100\020\136\021\022\022\130\023\124" +
    "\024\046\026\034\030\107\032\166\035\112\037\140\043" +
    "\057\044\126\045\076\046\177\050\147\051\012\052\043" +
    "\053\042\055\163\057\231\060\011\062\103\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\107\070\112\176\113\137\114\041\115" +
    "\072\116\025\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\150\007\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\044\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\002\000\004\046\u0234\001\002\000\004\155\201\001" +
    "\uff64\000\210\004\u01b0\005\u01b9\011\172\022\u01a6\023\u01a4" +
    "\024\u0182\025\u0186\026\u017d\027\u0199\030\u0196\031\u0183\032" +
    "\u01b8\033\u019f\034\u0185\035\u0198\036\u017e\037\u01aa\040\u0195" +
    "\041\u0172\042\u0188\043\u0187\044\u01a5\045\u0190\046\u019b\047" +
    "\u01ab\050\u01ad\051\u0174\053\u017f\054\u01b5\055\u01b7\056\u0189" +
    "\057\u0179\060\u0173\061\u01b6\062\u0192\063\u01b3\064\u017b\066" +
    "\u017c\067\u01af\070\u0178\071\u0197\074\u01b4\075\u0175\112\u0193" +
    "\117\056\120\u017a\121\u018f\122\u0184\123\u01a8\124\u019a\126" +
    "\u01b1\127\u01b2\130\u01ae\131\u018b\215\u0191\216\u018d\217\u018e" +
    "\220\u01a2\221\u0181\222\u018a\223\u0176\224\u019e\225\u019d\226" +
    "\u01ac\236\u019c\237\u01a3\240\u0177\001\002\000\004\227\u0237" +
    "\001\002\000\020\011\172\075\203\112\210\115\212\117" +
    "\056\230\uff2e\240\207\001\uff25\000\004\230\u0239\001\002" +
    "\000\004\231\221\001\uff18\000\006\107\u023c\150\u023d\001" +
    "\002\000\002\001\uff09\000\002\001\uff98\000\002\001\ufef1" +
    "\000\254\003\123\004\154\005\165\006\115\007\010\010" +
    "\065\011\035\013\063\015\100\020\136\021\022\022\130" +
    "\023\124\024\046\026\034\030\107\032\166\035\112\037" +
    "\140\043\057\044\126\045\076\046\116\050\147\051\012" +
    "\052\043\053\042\055\163\057\231\060\011\062\103\063" +
    "\157\064\032\065\232\066\033\067\152\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\107" +
    "\070\110\u023f\112\176\113\137\114\041\115\072\116\025" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\150\007\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\044\222\064" +
    "\223\017\227\161\232\106\233\120\234\062\235\102\237" +
    "\125\241\122\001\002\000\002\001\ufef0\000\002\001\uff08" +
    "\000\002\001\ufeea\000\002\001\ufede\000\004\132\u0248\001" +
    "\002\000\006\125\u0245\150\u0246\001\002\000\210\004\u01b0" +
    "\005\u01b9\011\172\022\u01a6\023\u01a4\024\u0182\025\u0186\026" +
    "\u017d\027\u0199\030\u0196\031\u0183\032\u01b8\033\u019f\034\u0185" +
    "\035\u0198\036\u017e\037\u01aa\040\u0195\041\u0172\042\u0188\043" +
    "\u0187\044\u01a5\045\u0190\046\u019b\047\u01ab\050\u01ad\051\u0174" +
    "\053\u017f\054\u01b5\055\u01b7\056\u0189\057\u0179\060\u0173\061" +
    "\u01b6\062\u0192\063\u01b3\064\u017b\066\u017c\067\u01af\070\u0178" +
    "\071\u0197\074\u01b4\075\u0175\112\u0193\117\056\120\u017a\121" +
    "\u018f\122\u0184\123\u01a8\124\u019a\126\u01b1\127\u01b2\130\u01ae" +
    "\131\u018b\215\u0191\216\u018d\217\u018e\220\u01a2\221\u0181\222" +
    "\u018a\223\u0176\224\u019e\225\u019d\226\u01ac\236\u019c\237\u01a3" +
    "\240\u0177\001\002\000\002\001\uff0a\000\002\001\ufedf\000" +
    "\160\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\001\002\000\074\034\321" +
    "\126\311\127\331\130\301\147\305\151\300\152\322\153" +
    "\302\154\313\155\323\156\327\157\314\160\275\161\312" +
    "\162\326\163\325\164\306\165\324\166\320\167\315\170" +
    "\330\171\307\172\317\173\303\174\316\175\276\200\304" +
    "\243\310\244\277\001\ufedd\000\006\125\u024e\150\u024f\001" +
    "\002\000\004\132\u024c\001\ufee1\000\160\004\154\006\115" +
    "\007\010\010\065\011\172\013\063\020\136\035\112\046" +
    "\177\051\012\052\043\063\157\064\032\074\160\075\014" +
    "\076\021\077\047\100\050\101\142\102\006\103\036\112" +
    "\176\113\137\114\041\115\072\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\074\034\321\126\311\127\331\130" +
    "\301\147\305\151\300\152\322\153\302\154\313\155\323" +
    "\156\327\157\314\160\275\161\312\162\326\163\325\164" +
    "\306\165\324\166\320\167\315\170\330\171\307\172\317" +
    "\173\303\174\316\175\276\200\304\243\310\244\277\001" +
    "\ufee0\000\004\013\u0250\001\002\000\002\001\uff0b\000\004" +
    "\132\u0251\001\ufee3\000\160\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\074\034\321\126\311\127\331\130\301\147\305" +
    "\151\300\152\322\153\302\154\313\155\323\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\244\277\001\ufee2\000\010" +
    "\107\u0256\125\u0255\150\u0258\001\002\000\002\001\uff05\000" +
    "\012\011\172\112\210\115\212\117\056\001\002\000\012" +
    "\011\u0261\112\210\115\212\117\056\001\uff01\000\002\001" +
    "\uff06\000\002\001\uff03\000\004\036\u026d\001\002\000\004" +
    "\150\u026c\001\002\000\012\011\u0261\112\210\115\212\117" +
    "\056\001\uff00\000\004\110\u026a\001\002\000\004\236\u0265" +
    "\001\ufef7\000\004\111\u0263\001\002\000\004\150\u0262\001" +
    "\002\000\002\001\ufeff\000\004\036\ufef8\001\ufe0f\000\002" +
    "\001\ufefd\000\004\011\u0264\001\002\000\002\001\ufef6\000" +
    "\012\011\172\112\210\115\212\117\056\001\002\000\004" +
    "\125\u0268\001\ufefb\000\002\001\ufefa\000\012\011\172\112" +
    "\210\115\212\117\056\001\002\000\002\001\ufef9\000\002" +
    "\001\uff02\000\002\001\ufefe\000\002\001\ufefc\000\016\221" +
    "\u0228\222\u022c\223\u022e\224\u0231\225\u0226\226\u022a\001\ufef3" +
    "\000\210\004\u01b0\005\u01b9\011\172\022\u01a6\023\u01a4\024" +
    "\u0182\025\u0186\026\u017d\027\u0199\030\u0196\031\u0183\032\u01b8" +
    "\033\u019f\034\u0185\035\u0198\036\u017e\037\u01aa\040\u0195\041" +
    "\u0172\042\u0188\043\u0187\044\u01a5\045\u0190\046\u019b\047\u01ab" +
    "\050\u01ad\051\u0174\053\u017f\054\u01b5\055\u01b7\056\u0189\057" +
    "\u0179\060\u0173\061\u01b6\062\u0192\063\u01b3\064\u017b\066\u017c" +
    "\067\u01af\070\u0178\071\u0197\074\u01b4\075\u0175\112\u0193\117" +
    "\056\120\u017a\121\u018f\122\u0184\123\u01a8\124\u019a\126\u01b1" +
    "\127\u01b2\130\u01ae\131\u018b\215\u0191\216\u018d\217\u018e\220" +
    "\u01a2\221\u0181\222\u018a\223\u0176\224\u019e\225\u019d\226\u01ac" +
    "\236\u019c\237\u01a3\240\u0177\001\002\000\004\150\ufef4\001" +
    "\ufef2\000\002\001\ufef5\000\002\001\uff04\000\016\013\u0274" +
    "\016\u028e\017\u028d\105\u0276\106\u0275\233\u028c\001\002\000" +
    "\002\001\ufe24\000\006\072\u0284\213\u0283\001\ufe21\000\030" +
    "\011\172\013\063\020\136\075\014\112\176\115\072\117" +
    "\056\213\053\221\346\227\u014f\232\106\001\002\000\162" +
    "\004\154\006\115\007\010\010\065\011\172\012\u027a\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\010\013" +
    "\u0274\105\u0276\106\u0275\001\002\000\002\001\ufe23\000\076" +
    "\034\321\110\u0280\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\002\000\006\110" +
    "\u027b\213\u027c\001\002\000\002\001\ufe1d\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\076\034\321\126\311\127" +
    "\331\130\301\147\305\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\214\u027e\243" +
    "\310\244\277\001\002\000\004\110\u027f\001\002\000\002" +
    "\001\ufe1c\000\002\001\ufe1e\000\004\110\u0282\001\ufe59\000" +
    "\002\001\ufe22\000\012\011\172\013\u0287\014\u0289\117\056" +
    "\001\002\000\006\011\172\117\056\001\002\000\002\001" +
    "\ufe1f\000\004\214\u028a\001\002\000\002\001\ufe19\000\002" +
    "\001\ufe1b\000\002\001\ufe1a\000\002\001\ufe20\000\002\001" +
    "\ufe27\000\002\001\ufe65\000\002\001\ufe26\000\002\001\ufe25" +
    "\000\010\011\172\117\056\227\202\001\002\000\004\227" +
    "\u0291\001\002\000\020\011\172\075\203\112\210\115\212" +
    "\117\056\230\uff2e\240\207\001\uff25\000\004\230\u0293\001" +
    "\002\000\004\231\221\001\uff18\000\004\107\u0295\001\002" +
    "\000\002\001\uff98\000\254\003\123\004\154\005\165\006" +
    "\115\007\010\010\065\011\035\013\063\015\100\020\136" +
    "\021\022\022\130\023\124\024\046\026\034\030\107\032" +
    "\166\035\112\037\140\043\057\044\126\045\076\046\116" +
    "\050\147\051\012\052\043\053\042\055\163\057\231\060" +
    "\011\062\103\063\157\064\032\065\232\066\033\067\152" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\107\070\110\u0297\112\176\113\137\114\041" +
    "\115\072\116\025\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\150\007\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\044\222\064\223\017\227\161\232\106\233\120\234" +
    "\062\235\102\237\125\241\122\001\002\000\002\001\uff62" +
    "\000\074\034\321\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\ufe12\000\014\034" +
    "\321\172\317\173\303\174\316\175\276\001\ufeae\000\002" +
    "\001\ufed0\000\162\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\242\u01bf\001" +
    "\uff20\000\004\230\u029d\001\002\000\002\001\ufe85\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\052\036\uff51\072" +
    "\ufe59\107\ufe59\111\ufe59\132\u01cc\133\u01d0\134\u01cd\135\u01da" +
    "\136\u01d1\137\u01d7\140\u01d3\141\u01d6\142\u01cf\143\u01cb\144" +
    "\u01d2\145\u01d4\146\u01ce\201\u01d5\202\u01d9\213\ufe59\001\ufe5e" +
    "\000\004\036\uff50\001\ufe5d\000\004\036\u02a2\001\002\000" +
    "\034\011\172\013\063\020\136\074\u015c\075\014\112\176" +
    "\115\072\117\056\155\u02a7\213\053\221\346\227\u014f\232" +
    "\106\001\002\000\002\001\uff4d\000\004\073\u02b4\001\uff4e" +
    "\000\004\230\u02b2\001\002\000\006\073\uff4c\230\uff4c\001" +
    "\ufe59\000\030\011\172\013\063\020\136\075\014\112\176" +
    "\115\072\117\056\213\053\221\346\227\u014f\232\106\001" +
    "\002\000\034\011\172\013\063\020\136\074\u015c\075\014" +
    "\112\176\115\072\117\056\155\u02a7\213\053\221\346\227" +
    "\u014f\232\106\001\002\000\002\001\uff4e\000\004\230\u02ab" +
    "\001\002\000\240\003\123\004\154\005\165\006\115\007" +
    "\010\010\065\011\035\013\063\015\100\020\136\021\022" +
    "\022\130\023\124\024\046\026\034\030\107\032\166\035" +
    "\112\037\140\043\057\044\126\045\076\046\177\050\147" +
    "\051\012\052\043\053\042\055\163\057\231\060\011\062" +
    "\103\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\107\070\112\176\113" +
    "\137\114\041\115\072\116\025\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\150\007\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\044\227\161\231\u02ac\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\002\001\uff98\000" +
    "\002\001\uff48\000\002\001\uff7d\000\254\003\123\004\154" +
    "\005\165\006\115\007\010\010\065\011\035\013\063\015" +
    "\100\020\136\021\022\022\130\023\124\024\046\026\034" +
    "\030\107\031\u02b0\032\166\035\112\037\140\043\057\044" +
    "\126\045\076\046\116\050\147\051\012\052\043\053\042" +
    "\055\163\057\231\060\011\062\103\063\157\064\032\065" +
    "\232\066\033\067\152\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\107\070\112\176\113" +
    "\137\114\041\115\072\116\025\117\056\120\031\121\074" +
    "\122\052\123\132\124\114\131\067\150\007\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\044\222\064\223\017\227\161\232\106" +
    "\233\120\234\062\235\102\237\125\241\122\001\002\000" +
    "\002\001\uff47\000\006\073\uff4b\230\uff4b\001\ufe59\000\240" +
    "\003\123\004\154\005\165\006\115\007\010\010\065\011" +
    "\035\013\063\015\100\020\136\021\022\022\130\023\124" +
    "\024\046\026\034\030\107\032\166\035\112\037\140\043" +
    "\057\044\126\045\076\046\177\050\147\051\012\052\043" +
    "\053\042\055\163\057\231\060\011\062\103\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\107\070\112\176\113\137\114\041\115" +
    "\072\116\025\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\150\007\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\044\227\161\231\u02ac\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\002\001\uff7e\000\002\001\uff4f\000" +
    "\002\001\uff13\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\076\034\321\110\u02b8\126\311\127\331\130\301\147" +
    "\305\151\300\152\322\153\302\154\313\155\323\156\327" +
    "\157\314\160\275\161\312\162\326\163\325\164\306\165" +
    "\324\166\320\167\315\170\330\171\307\172\317\173\303" +
    "\174\316\175\276\200\304\243\310\244\277\001\002\000" +
    "\002\001\uff12\000\160\004\154\006\115\007\010\010\065" +
    "\011\172\013\063\020\136\035\112\046\177\051\012\052" +
    "\043\063\157\064\032\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\112\176\113\137\114" +
    "\041\115\072\117\056\120\031\121\074\122\052\123\132" +
    "\124\114\131\067\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\175\227" +
    "\161\232\106\233\120\234\062\235\102\241\122\001\002" +
    "\000\160\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\175\227\161\232\106" +
    "\233\120\234\062\235\102\241\122\001\ufe3e\000\014\011" +
    "\172\013\063\107\360\117\056\232\106\001\002\000\004" +
    "\227\u02bd\001\ufe5a\000\162\004\154\006\115\007\010\010" +
    "\065\011\172\013\063\020\136\035\112\046\177\051\012" +
    "\052\043\063\157\064\032\074\160\075\014\076\021\077" +
    "\047\100\050\101\142\102\006\103\036\112\176\113\137" +
    "\114\041\115\072\117\056\120\031\121\074\122\052\123" +
    "\132\124\114\131\067\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\242" +
    "\u01bf\001\uff20\000\004\230\u02bf\001\002\000\002\001\ufe4c" +
    "\000\004\214\u02c1\001\002\000\002\001\ufe4f\000\076\034" +
    "\321\110\u02c3\126\311\127\331\130\301\147\305\151\300" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\243\310\244\277\001\002\000\002\001\ufe4d" +
    "\000\002\001\uffb5\000\010\107\u02c6\115\262\150\u02c7\001" +
    "\002\000\002\001\uffb5\000\002\001\uffb0\000\256\003\123" +
    "\004\154\005\165\006\115\007\010\010\065\011\035\013" +
    "\063\015\100\020\136\021\022\022\130\023\124\024\046" +
    "\026\034\030\107\032\166\035\112\037\140\043\057\044" +
    "\126\045\076\046\116\047\145\050\147\051\012\052\043" +
    "\053\042\055\163\057\027\060\011\062\103\063\157\064" +
    "\032\065\060\066\033\067\152\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\107\070\110" +
    "\u02c9\112\104\113\137\114\041\115\072\116\025\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\150" +
    "\007\170\113\171\073\176\155\177\016\201\054\202\162" +
    "\203\030\204\141\205\040\206\134\207\077\210\144\211" +
    "\075\212\037\213\053\215\101\221\044\222\064\223\017" +
    "\227\161\232\106\233\120\234\062\235\102\237\125\241" +
    "\122\001\002\000\002\001\uffaf\000\256\003\123\004\154" +
    "\005\165\006\115\007\010\010\065\011\035\013\063\015" +
    "\100\020\136\021\022\022\130\023\124\024\046\026\034" +
    "\030\107\032\166\035\112\037\140\043\057\044\126\045" +
    "\076\046\116\047\145\050\147\051\012\052\043\053\042" +
    "\055\163\057\027\060\011\062\103\063\157\064\032\065" +
    "\060\066\033\067\152\074\160\075\014\076\021\077\047" +
    "\100\050\101\142\102\006\103\036\107\070\110\u02cb\112" +
    "\104\113\137\114\041\115\072\116\025\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\150\007\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\044\222\064\223\017\227\161" +
    "\232\106\233\120\234\062\235\102\237\125\241\122\001" +
    "\002\000\002\001\uffae\000\030\011\172\013\063\020\136" +
    "\075\014\112\176\115\072\117\056\213\053\221\346\227" +
    "\u014f\232\106\001\002\000\002\001\uff6b\000\006\125\uff69" +
    "\230\uff69\001\ufe59\000\006\125\u02d1\230\u02d0\001\002\000" +
    "\004\150\u02d3\001\002\000\030\011\172\013\063\020\136" +
    "\075\014\112\176\115\072\117\056\213\053\221\346\227" +
    "\u014f\232\106\001\002\000\002\001\uff6a\000\002\001\uff7f" +
    "\000\016\013\u0274\016\u028e\017\u028d\105\u0276\106\u0275\235" +
    "\u02d5\001\002\000\002\001\ufe64\000\004\227\u02d9\001\ufe74" +
    "\000\004\227\u02d9\001\ufe74\000\004\070\u02dd\001\uff5b\000" +
    "\162\004\154\006\115\007\010\010\065\011\172\013\063" +
    "\020\136\035\112\046\177\051\012\052\043\063\157\064" +
    "\032\074\160\075\014\076\021\077\047\100\050\101\142" +
    "\102\006\103\036\112\176\113\137\114\041\115\072\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\170\113\171\073\176\155\177\016\201\054\202\162\203" +
    "\030\204\141\205\040\206\134\207\077\210\144\211\075" +
    "\212\037\213\053\215\101\221\175\227\161\232\106\233" +
    "\120\234\062\235\102\241\122\242\u01bf\001\uff20\000\004" +
    "\230\u02db\001\002\000\002\001\ufe73\000\002\001\ufed4\000" +
    "\012\011\172\112\210\115\212\117\056\001\002\000\004" +
    "\071\u02e0\001\uff56\000\004\107\u02e2\001\002\000\012\011" +
    "\172\112\210\115\212\117\056\001\002\000\004\125\u021f" +
    "\001\uff55\000\002\001\uff0c\000\030\047\u022f\057\u0227\061" +
    "\u0225\110\u02e4\116\u0232\221\u0228\222\u022c\223\u022e\224\u0231" +
    "\225\u0226\226\u022a\001\ufeed\000\002\001\ufed6\000\002\001" +
    "\uff5a\000\002\001\ufed5\000\002\001\ufe95\000\004\150\u02e9" +
    "\001\002\000\002\001\uff78\000\002\001\ufe93\000\074\034" +
    "\321\126\311\127\331\130\301\147\305\151\300\152\322" +
    "\153\302\154\313\155\323\156\327\157\314\160\275\161" +
    "\312\162\326\163\325\164\306\165\324\166\320\167\315" +
    "\170\330\171\307\172\317\173\303\174\316\175\276\200" +
    "\304\243\310\244\277\001\ufe15\000\014\034\321\172\317" +
    "\173\303\174\316\175\276\001\ufead\000\004\115\262\001" +
    "\uffb7\000\254\003\123\004\154\005\165\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\136\021\022\022" +
    "\130\023\124\024\046\026\034\030\107\032\166\035\112" +
    "\037\140\043\057\044\126\045\076\046\116\050\147\051" +
    "\012\052\043\053\042\055\163\057\231\060\011\062\103" +
    "\063\157\064\032\065\232\066\033\067\152\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\107\070\110\u02ef\112\176\113\137\114\041\115\072\116" +
    "\025\117\056\120\031\121\074\122\052\123\132\124\114" +
    "\131\067\150\007\170\113\171\073\176\155\177\016\201" +
    "\054\202\162\203\030\204\141\205\040\206\134\207\077" +
    "\210\144\211\075\212\037\213\053\215\101\221\044\222" +
    "\064\223\017\227\161\232\106\233\120\234\062\235\102" +
    "\237\125\241\122\001\002\000\002\001\uff93\000\066\034" +
    "\321\147\305\151\300\152\322\153\302\154\313\155\323" +
    "\156\327\157\314\160\275\161\312\162\326\163\325\164" +
    "\306\165\324\166\320\167\315\170\330\171\307\172\317" +
    "\173\303\174\316\175\276\200\304\243\310\244\277\001" +
    "\ufe8e\000\002\001\uff5e\000\004\234\u02f5\001\002\000\014" +
    "\013\u0274\016\u028e\017\u028d\105\u0276\106\u0275\001\ufe75\000" +
    "\010\013\u0274\105\u0276\106\u0275\001\ufe76\000\002\001\ufe8f" +
    "\000\216\004\u01b0\005\u01b9\011\172\013\063\022\u01a6\023" +
    "\u01a4\024\u0182\025\u0186\026\u017d\027\u0199\030\u0196\031\u0183" +
    "\032\u01b8\033\u019f\034\u0185\035\u0198\036\u017e\037\u01aa\040" +
    "\u0195\041\u0172\042\u0188\043\u0187\044\u01a5\045\u0190\046\u019b" +
    "\047\u01ab\050\u01ad\051\u0174\053\u017f\054\u01b5\055\u01b7\056" +
    "\u0189\057\u0179\060\u0173\061\u01b6\062\u0192\063\u01b3\064\u017b" +
    "\066\u017c\067\u01af\070\u0178\071\u0197\074\u01b4\075\u0175\107" +
    "\u018c\112\u0193\117\056\120\u017a\121\u018f\122\u0184\123\u01a8" +
    "\124\u019a\126\u01b1\127\u01b2\130\u01ae\131\u018b\215\u0191\216" +
    "\u018d\217\u018e\220\u01a2\221\u0181\222\u018a\223\u0176\224\u019e" +
    "\225\u019d\226\u01ac\232\106\236\u019c\237\u01a3\240\u0177\001" +
    "\002\000\004\227\ufe3c\001\ufe49\000\004\227\u02fa\001\002" +
    "\000\004\227\ufe3a\001\ufe47\000\162\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\242\u01bf\001\uff20\000\004\230\u02fc\001\002\000\002" +
    "\001\ufe84\000\004\230\u02fe\001\002\000\004\150\u02ff\001" +
    "\002\000\002\001\uffb1\000\002\001\uff8c\000\076\034\321" +
    "\126\311\127\331\130\301\147\305\150\u0302\151\300\152" +
    "\322\153\302\154\313\155\323\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\244\277\001\002\000\002\001\uff8b\000" +
    "\012\072\ufe59\107\ufe59\111\ufe59\213\ufe59\001\ufec2\000\030" +
    "\011\172\013\063\020\136\075\014\112\176\115\072\117" +
    "\056\213\053\221\346\227\u014f\232\106\001\002\000\076" +
    "\034\321\073\u0312\126\311\127\331\130\301\147\305\151" +
    "\300\152\322\153\302\154\313\155\323\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\244\277\001\ufe2c\000\004\125" +
    "\u0309\001\ufe60\000\004\214\u0308\001\002\000\002\001\ufe52" +
    "\000\162\004\154\006\115\007\010\010\065\011\172\013" +
    "\063\020\136\035\112\046\177\051\012\052\043\063\157" +
    "\064\032\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\112\176\113\137\114\041\115\072" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\155\u030b\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\ufe5f\000" +
    "\002\001\ufe30\000\030\011\172\013\063\020\136\075\014" +
    "\112\176\115\072\117\056\213\053\221\346\227\u014f\232" +
    "\106\001\002\000\076\034\321\073\u030d\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\243\310\244\277" +
    "\001\ufe2e\000\162\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\155\u030e\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\175" +
    "\227\161\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\030\011\172\013\063\020\136\075\014\112\176" +
    "\115\072\117\056\213\053\221\346\227\u014f\232\106\001" +
    "\002\000\074\034\321\126\311\127\331\130\301\147\305" +
    "\151\300\152\322\153\302\154\313\155\323\156\327\157" +
    "\314\160\275\161\312\162\326\163\325\164\306\165\324" +
    "\166\320\167\315\170\330\171\307\172\317\173\303\174" +
    "\316\175\276\200\304\243\310\244\277\001\ufe2f\000\010" +
    "\125\ufe2b\214\ufe2b\230\ufe2b\001\ufe59\000\010\125\ufe2a\214" +
    "\ufe2a\230\ufe2a\001\ufe59\000\162\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\155\u0313\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\002\000\030\011\172\013\063\020\136\075" +
    "\014\112\176\115\072\117\056\213\053\221\346\227\u014f" +
    "\232\106\001\002\000\074\034\321\126\311\127\331\130" +
    "\301\147\305\151\300\152\322\153\302\154\313\155\323" +
    "\156\327\157\314\160\275\161\312\162\326\163\325\164" +
    "\306\165\324\166\320\167\315\170\330\171\307\172\317" +
    "\173\303\174\316\175\276\200\304\243\310\244\277\001" +
    "\ufe2d\000\010\125\ufe29\214\ufe29\230\ufe29\001\ufe59\000\010" +
    "\125\ufe28\214\ufe28\230\ufe28\001\ufe59\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\076\034\321\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\230\u0319\243\310" +
    "\244\277\001\002\000\002\001\ufe14\000\004\070\u02dd\001" +
    "\uff5b\000\004\071\u02e0\001\uff56\000\004\107\u031d\001\002" +
    "\000\002\001\uff0c\000\030\047\u022f\057\u0227\061\u0225\110" +
    "\u031f\116\u0232\221\u0228\222\u022c\223\u022e\224\u0231\225\u0226" +
    "\226\u022a\001\ufeed\000\002\001\uff61\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\076\034\321\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\230\u0322\243\310" +
    "\244\277\001\002\000\240\003\123\004\154\005\165\006" +
    "\115\007\010\010\065\011\035\013\063\015\100\020\136" +
    "\021\022\022\130\023\124\024\046\026\034\030\107\032" +
    "\166\035\112\037\140\043\057\044\126\045\076\046\177" +
    "\050\147\051\012\052\043\053\042\055\163\057\231\060" +
    "\011\062\103\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\107\070\112" +
    "\176\113\137\114\041\115\072\116\025\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\150\007\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\044\227\161\231\u0323\232\106" +
    "\233\120\234\062\235\102\241\122\001\002\000\002\001" +
    "\uff98\000\002\001\uff90\000\002\001\uff39\000\254\003\123" +
    "\004\154\005\165\006\115\007\010\010\065\011\035\013" +
    "\063\015\100\020\136\021\022\022\130\023\124\024\046" +
    "\025\u0327\026\034\030\107\032\166\035\112\037\140\043" +
    "\057\044\126\045\076\046\116\050\147\051\012\052\043" +
    "\053\042\055\163\057\231\060\011\062\103\063\157\064" +
    "\032\065\232\066\033\067\152\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\107\070\112" +
    "\176\113\137\114\041\115\072\116\025\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\150\007\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\044\222\064\223\017\227\161" +
    "\232\106\233\120\234\062\235\102\237\125\241\122\001" +
    "\002\000\002\001\uff38\000\004\132\u032e\001\uff0f\000\006" +
    "\125\u032b\150\u032c\001\002\000\002\001\uff11\000\004\013" +
    "\u0328\001\002\000\002\001\uff84\000\002\001\uff10\000\160" +
    "\004\154\006\115\007\010\010\065\011\172\013\063\020" +
    "\136\035\112\046\177\051\012\052\043\063\157\064\032" +
    "\074\160\075\014\076\021\077\047\100\050\101\142\102" +
    "\006\103\036\112\176\113\137\114\041\115\072\117\056" +
    "\120\031\121\074\122\052\123\132\124\114\131\067\170" +
    "\113\171\073\176\155\177\016\201\054\202\162\203\030" +
    "\204\141\205\040\206\134\207\077\210\144\211\075\212" +
    "\037\213\053\215\101\221\175\227\161\232\106\233\120" +
    "\234\062\235\102\241\122\001\002\000\074\034\321\126" +
    "\311\127\331\130\301\147\305\151\300\152\322\153\302" +
    "\154\313\155\323\156\327\157\314\160\275\161\312\162" +
    "\326\163\325\164\306\165\324\166\320\167\315\170\330" +
    "\171\307\172\317\173\303\174\316\175\276\200\304\243" +
    "\310\244\277\001\uff0e\000\050\034\321\156\327\157\314" +
    "\160\275\161\312\162\326\163\325\164\306\165\324\166" +
    "\320\167\315\170\330\171\307\172\317\173\303\174\316" +
    "\175\276\200\304\243\310\001\ufe0a\000\002\001\uff98\000" +
    "\254\003\123\004\154\005\165\006\115\007\010\010\065" +
    "\011\035\013\063\015\100\020\136\021\022\022\130\023" +
    "\124\024\046\026\034\030\107\032\166\035\112\037\140" +
    "\043\057\044\126\045\076\046\116\050\147\051\012\052" +
    "\043\053\042\055\163\057\231\060\011\062\103\063\157" +
    "\064\032\065\232\066\033\067\152\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\107\070" +
    "\110\u0333\112\176\113\137\114\041\115\072\116\025\117" +
    "\056\120\031\121\074\122\052\123\132\124\114\131\067" +
    "\150\007\170\113\171\073\176\155\177\016\201\054\202" +
    "\162\203\030\204\141\205\040\206\134\207\077\210\144" +
    "\211\075\212\037\213\053\215\101\221\044\222\064\223" +
    "\017\227\161\232\106\233\120\234\062\235\102\237\125" +
    "\241\122\001\002\000\004\054\u0334\001\uff72\000\004\227" +
    "\u033f\001\002\000\002\001\uff71\000\004\056\u033b\001\uff6d" +
    "\000\004\054\u0334\001\uff73\000\002\001\uff70\000\002\001" +
    "\uff6e\000\002\001\uff7a\000\004\107\u033c\001\002\000\002" +
    "\001\uff98\000\254\003\123\004\154\005\165\006\115\007" +
    "\010\010\065\011\035\013\063\015\100\020\136\021\022" +
    "\022\130\023\124\024\046\026\034\030\107\032\166\035" +
    "\112\037\140\043\057\044\126\045\076\046\116\050\147" +
    "\051\012\052\043\053\042\055\163\057\231\060\011\062" +
    "\103\063\157\064\032\065\232\066\033\067\152\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\107\070\110\u033e\112\176\113\137\114\041\115\072" +
    "\116\025\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\150\007\170\113\171\073\176\155\177\016" +
    "\201\054\202\162\203\030\204\141\205\040\206\134\207" +
    "\077\210\144\211\075\212\037\213\053\215\101\221\044" +
    "\222\064\223\017\227\161\232\106\233\120\234\062\235" +
    "\102\237\125\241\122\001\002\000\002\001\uff6c\000\012" +
    "\011\172\112\210\115\212\117\056\001\002\000\004\013" +
    "\u0341\001\002\000\004\230\u0342\001\002\000\004\107\u0343" +
    "\001\002\000\002\001\uff98\000\254\003\123\004\154\005" +
    "\165\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\136\021\022\022\130\023\124\024\046\026\034\030" +
    "\107\032\166\035\112\037\140\043\057\044\126\045\076" +
    "\046\116\050\147\051\012\052\043\053\042\055\163\057" +
    "\231\060\011\062\103\063\157\064\032\065\232\066\033" +
    "\067\152\074\160\075\014\076\021\077\047\100\050\101" +
    "\142\102\006\103\036\107\070\110\u0345\112\176\113\137" +
    "\114\041\115\072\116\025\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\150\007\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\044\222\064\223\017\227\161\232\106\233" +
    "\120\234\062\235\102\237\125\241\122\001\002\000\002" +
    "\001\uff6f\000\002\001\ufe97\000\002\001\ufe91\000\016\013" +
    "\u0274\016\u028e\017\u028d\104\u034c\105\u0276\106\u0275\001\002" +
    "\000\002\001\ufe66\000\012\013\u0274\104\u034b\105\u0276\106" +
    "\u0275\001\002\000\002\001\ufe67\000\002\001\ufe63\000\002" +
    "\001\uff77\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\ufeda\000" +
    "\074\034\321\126\311\127\331\130\301\147\305\151\300" +
    "\152\322\153\302\154\313\155\323\156\327\157\314\160" +
    "\275\161\312\162\326\163\325\164\306\165\324\166\320" +
    "\167\315\170\330\171\307\172\317\173\303\174\316\175" +
    "\276\200\304\243\310\244\277\001\ufed7\000\004\150\u0354" +
    "\001\002\000\004\125\u0352\001\ufed9\000\160\004\154\006" +
    "\115\007\010\010\065\011\172\013\063\020\136\035\112" +
    "\046\177\051\012\052\043\063\157\064\032\074\160\075" +
    "\014\076\021\077\047\100\050\101\142\102\006\103\036" +
    "\112\176\113\137\114\041\115\072\117\056\120\031\121" +
    "\074\122\052\123\132\124\114\131\067\170\113\171\073" +
    "\176\155\177\016\201\054\202\162\203\030\204\141\205" +
    "\040\206\134\207\077\210\144\211\075\212\037\213\053" +
    "\215\101\221\175\227\161\232\106\233\120\234\062\235" +
    "\102\241\122\001\002\000\074\034\321\126\311\127\331" +
    "\130\301\147\305\151\300\152\322\153\302\154\313\155" +
    "\323\156\327\157\314\160\275\161\312\162\326\163\325" +
    "\164\306\165\324\166\320\167\315\170\330\171\307\172" +
    "\317\173\303\174\316\175\276\200\304\243\310\244\277" +
    "\001\ufed8\000\160\004\154\006\115\007\010\010\065\011" +
    "\172\013\063\020\136\035\112\046\177\051\012\052\043" +
    "\063\157\064\032\074\160\075\014\076\021\077\047\100" +
    "\050\101\142\102\006\103\036\112\176\113\137\114\041" +
    "\115\072\117\056\120\031\121\074\122\052\123\132\124" +
    "\114\131\067\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\175\227\161" +
    "\232\106\233\120\234\062\235\102\241\122\001\ufeda\000" +
    "\004\150\u0356\001\002\000\160\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\170\113\171\073\176\155\177" +
    "\016\201\054\202\162\203\030\204\141\205\040\206\134" +
    "\207\077\210\144\211\075\212\037\213\053\215\101\221" +
    "\175\227\161\232\106\233\120\234\062\235\102\241\122" +
    "\001\ufeda\000\004\230\u0358\001\002\000\240\003\123\004" +
    "\154\005\165\006\115\007\010\010\065\011\035\013\063" +
    "\015\100\020\136\021\022\022\130\023\124\024\046\026" +
    "\034\030\107\032\166\035\112\037\140\043\057\044\126" +
    "\045\076\046\177\050\147\051\012\052\043\053\042\055" +
    "\163\057\231\060\011\062\103\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\107\070\112\176\113\137\114\041\115\072\116\025" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\150\007\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\044\227\161" +
    "\231\u035a\232\106\233\120\234\062\235\102\241\122\001" +
    "\002\000\002\001\uff8e\000\002\001\uff98\000\002\001\uff4a" +
    "\000\254\003\123\004\154\005\165\006\115\007\010\010" +
    "\065\011\035\013\063\015\100\020\136\021\022\022\130" +
    "\023\124\024\046\026\034\027\u035d\030\107\032\166\035" +
    "\112\037\140\043\057\044\126\045\076\046\116\050\147" +
    "\051\012\052\043\053\042\055\163\057\231\060\011\062" +
    "\103\063\157\064\032\065\232\066\033\067\152\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\107\070\112\176\113\137\114\041\115\072\116\025" +
    "\117\056\120\031\121\074\122\052\123\132\124\114\131" +
    "\067\150\007\170\113\171\073\176\155\177\016\201\054" +
    "\202\162\203\030\204\141\205\040\206\134\207\077\210" +
    "\144\211\075\212\037\213\053\215\101\221\044\222\064" +
    "\223\017\227\161\232\106\233\120\234\062\235\102\237" +
    "\125\241\122\001\002\000\002\001\uff49\000\160\004\154" +
    "\006\115\007\010\010\065\011\172\013\063\020\136\035" +
    "\112\046\177\051\012\052\043\063\157\064\032\074\160" +
    "\075\014\076\021\077\047\100\050\101\142\102\006\103" +
    "\036\112\176\113\137\114\041\115\072\117\056\120\031" +
    "\121\074\122\052\123\132\124\114\131\067\170\113\171" +
    "\073\176\155\177\016\201\054\202\162\203\030\204\141" +
    "\205\040\206\134\207\077\210\144\211\075\212\037\213" +
    "\053\215\101\221\175\227\161\232\106\233\120\234\062" +
    "\235\102\241\122\001\002\000\076\034\321\126\311\127" +
    "\331\130\301\147\305\151\300\152\322\153\302\154\313" +
    "\155\323\156\327\157\314\160\275\161\312\162\326\163" +
    "\325\164\306\165\324\166\320\167\315\170\330\171\307" +
    "\172\317\173\303\174\316\175\276\200\304\230\u0360\243" +
    "\310\244\277\001\002\000\002\001\ufe17\000\074\034\321" +
    "\126\311\127\331\130\301\147\305\151\300\152\322\153" +
    "\302\154\313\155\323\156\327\157\314\160\275\161\312" +
    "\162\326\163\325\164\306\165\324\166\320\167\315\170" +
    "\330\171\307\172\317\173\303\174\316\175\276\200\304" +
    "\243\310\244\277\001\ufe16\000\002\001\ufe99\000\006\036" +
    "\u0370\115\u0387\001\uff9e\000\004\150\u0386\001\002\000\004" +
    "\107\u037d\001\002\000\002\001\uffa8\000\010\011\172\115" +
    "\u036a\117\056\001\002\000\002\001\uff9f\000\002\001\uffa7" +
    "\000\006\011\172\117\056\001\002\000\006\125\u036c\150" +
    "\u036d\001\002\000\010\011\172\115\u036a\117\056\001\002" +
    "\000\002\001\uffab\000\002\001\uffa0\000\006\036\u0370\115" +
    "\262\001\uff9e\000\004\011\u0371\001\002\000\002\001\uff9d" +
    "\000\006\036\u0373\115\262\001\uff9c\000\004\011\u0374\001" +
    "\002\000\002\001\uff9b\000\004\107\u037a\001\002\000\004" +
    "\150\u0379\001\002\000\006\125\u036c\150\u0378\001\002\000" +
    "\002\001\uffaa\000\002\001\uffac\000\010\011\172\115\u036a" +
    "\117\056\001\002\000\006\110\u037c\125\u036c\001\002\000" +
    "\002\001\uffa6\000\014\011\172\046\u0366\047\u0369\115\u036a" +
    "\117\056\001\002\000\006\110\u0383\125\u0384\001\002\000" +
    "\010\011\172\115\u036a\117\056\001\002\000\002\001\uffa2" +
    "\000\002\001\uffa3\000\002\001\uffa1\000\002\001\uffa5\000" +
    "\014\011\172\046\u0366\047\u0369\115\u036a\117\056\001\002" +
    "\000\002\001\uffa4\000\002\001\uffad\000\006\011\172\117" +
    "\056\001\uff9a\000\002\001\uff75\000\006\125\u020e\150\u038a" +
    "\001\002\000\002\001\uff74\000\002\001\uff81\000\002\001" +
    "\uff5d\000\002\001\ufeab\000\162\004\154\006\115\007\010" +
    "\010\065\011\172\013\063\020\136\035\112\046\177\051" +
    "\012\052\043\063\157\064\032\074\160\075\014\076\021" +
    "\077\047\100\050\101\142\102\006\103\036\112\176\113" +
    "\137\114\041\115\072\117\056\120\031\121\074\122\052" +
    "\123\132\124\114\131\067\155\u0304\170\113\171\073\176" +
    "\155\177\016\201\054\202\162\203\030\204\141\205\040" +
    "\206\134\207\077\210\144\211\075\212\037\213\053\215" +
    "\101\221\175\227\161\232\106\233\120\234\062\235\102" +
    "\241\122\001\ufe31\000\004\230\u0390\001\002\000\002\001" +
    "\ufe53\000\052\034\321\073\u0392\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\001\ufe0c\000\160\004\154\006\115\007" +
    "\010\010\065\011\172\013\063\020\136\035\112\046\177" +
    "\051\012\052\043\063\157\064\032\074\160\075\014\076" +
    "\021\077\047\100\050\101\142\102\006\103\036\112\176" +
    "\113\137\114\041\115\072\117\056\120\031\121\074\122" +
    "\052\123\132\124\114\131\067\170\113\171\073\176\155" +
    "\177\016\201\054\202\162\203\030\204\141\205\040\206" +
    "\134\207\077\210\144\211\075\212\037\213\053\215\101" +
    "\221\175\227\161\232\106\233\120\234\062\235\102\241" +
    "\122\001\002\000\050\034\321\156\327\157\314\160\275" +
    "\161\312\162\326\163\325\164\306\165\324\166\320\167" +
    "\315\170\330\171\307\172\317\173\303\174\316\175\276" +
    "\200\304\243\310\001\ufe0b\000\002\001\uff15\000\006\125" +
    "\u0396\150\u0397\001\002\000\006\013\063\232\106\001\002" +
    "\000\002\001\uff85\000\002\001\uff16\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0397\000\006\002\003\017\004\001\001\000\002\001" +
    "\001\000\072\006\152\020\163\021\155\056\126\070\147" +
    "\071\044\074\014\076\017\077\150\113\070\114\132\115" +
    "\120\117\060\120\107\133\110\134\130\135\023\136\116" +
    "\137\104\140\134\141\054\145\142\146\025\147\050\155" +
    "\065\156\022\176\012\205\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\u0394\056" +
    "\u0393\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u0390\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u038c\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\006\152\056\126\064\u0388\070\147\071\044\074\014\076" +
    "\u020b\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\152\021\u0387\056\126\070\147\071\044\074" +
    "\014\076\017\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\002\001\001\000\022" +
    "\006\u0362\007\u0367\010\u0364\011\u0363\015\u036a\016\u0366\026" +
    "\241\114\132\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u0361\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\u0360\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\107\u0347\111\u0272\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u0346\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u0345\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u032f\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\006\057" +
    "\u0328\060\u0329\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\152\056\126\070\147\071\044" +
    "\074\014\076\u0304\077\150\105\u0306\106\u0305\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\036\006\152\056\126\071\044\077\150\114\132\117\060" +
    "\120\107\135\u0302\136\116\137\104\140\134\141\u014c\155" +
    "\u014b\156\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u0300\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\107\u02f2\110\u02f1\111\u0272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u02ef\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\004\022\u02ed\001\001\000\002" +
    "\001\001\000\006\006\u02ec\114\132\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\u02eb\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u02ea\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u02e9\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u02e6\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\002\001\001\000" +
    "\020\006\152\056\346\114\132\117\344\120\342\157\343" +
    "\161\u02d5\001\001\000\006\107\u02d3\111\u0272\001\001\000" +
    "\002\001\001\000\006\006\u02c4\114\132\001\001\000\002" +
    "\001\001\000\004\056\u02b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u0299\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\052\006\152\056\126\070\147\071\044\074\014\076\u0298" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\052\006\152\056\126\070\147\071" +
    "\044\074\014\076\u0297\077\150\113\070\114\132\117\060" +
    "\120\107\135\023\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\002\001\001" +
    "\000\004\063\u028e\001\001\000\002\001\001\000\006\107" +
    "\u0271\111\u0272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\006\152\021\u0213\056\126\070" +
    "\147\071\044\074\014\076\017\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u0211\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\002\001\001\000\054" +
    "\006\152\056\126\064\u020c\070\147\071\044\074\014\076" +
    "\u020b\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\052\006\152" +
    "\056\126\070\147\071\044\074\014\076\u020a\077\150\113" +
    "\070\114\132\117\060\120\107\135\023\136\116\137\104" +
    "\140\134\141\054\155\065\156\022\176\012\205\145\001" +
    "\001\000\002\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u0209\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u01ec\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u01eb\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\006\034\u01e9\114\170\001\001" +
    "\000\002\001\001\000\052\006\152\056\126\070\u01c8\071" +
    "\044\074\014\076\u01c6\077\150\113\070\114\132\117\060" +
    "\120\107\135\u01c7\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\u016c\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u016a\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\006\152" +
    "\056\126\070\147\071\044\074\014\076\u0154\077\150\113" +
    "\070\114\132\117\060\120\107\135\023\136\116\137\104" +
    "\140\134\141\054\155\065\156\022\176\012\205\145\001" +
    "\001\000\036\006\152\056\126\071\044\077\150\114\132" +
    "\117\060\120\107\135\u014d\136\116\137\104\140\134\141" +
    "\u014c\155\u014b\156\022\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u0149\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\167\114\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\173\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\203\045\213\051\205\052\212\114\132\123\210\153\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\260\114\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\216\001\001" +
    "\000\002\001\001\000\004\122\217\001\001\000\002\001" +
    "\001\000\012\006\152\114\132\120\221\121\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\226\001\001\000\072\006\152" +
    "\021\235\023\227\056\126\070\147\071\044\074\014\076" +
    "\017\077\150\113\070\114\132\115\120\117\060\120\107" +
    "\133\232\134\234\135\023\136\116\137\104\140\134\141" +
    "\054\145\142\146\025\147\050\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\004\026\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\252\050\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\262\001\001\000\002\001\001\000\006\006\264" +
    "\114\132\001\001\000\002\001\001\000\014\006\203\052" +
    "\266\114\132\123\210\153\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\006\152\056\126\070\147\071\044\074\014\076\273" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\u0110\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u010f\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u010e\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\u010d\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u010c\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u010b\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\052\006\152\056\126\070\147\071\044\074\014\076\u010a" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\052\006\152\056\126\070\147\071" +
    "\044\074\014\076\u0109\077\150\113\070\114\132\117\060" +
    "\120\107\135\023\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\052\006\152" +
    "\056\126\070\147\071\044\074\014\076\u0104\077\150\113" +
    "\070\114\132\117\060\120\107\135\023\136\116\137\104" +
    "\140\134\141\054\155\065\156\022\176\012\205\145\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u0103\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u0102\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\052" +
    "\006\152\056\126\070\147\071\044\074\014\076\u0101\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u0100\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\377\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\376\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\375\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\374\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\373\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\372\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\052\006\152\056\126\070\147\071\044\074\014\076\371" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\020\006\152\056\346\114\132\117" +
    "\344\120\342\157\343\161\341\001\001\000\052\006\152" +
    "\056\126\070\147\071\044\074\014\076\340\077\150\113" +
    "\070\114\132\117\060\120\107\135\023\136\116\137\104" +
    "\140\134\141\054\155\065\156\022\176\012\205\145\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\337\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\336\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\052" +
    "\006\152\056\126\070\147\071\044\074\014\076\335\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\334\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\333\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\332\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\331\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\350\001\001\000\002\001\001\000\052" +
    "\006\152\056\126\070\147\071\044\074\014\076\367\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\054\006\152\056\126\070\147\071\044" +
    "\074\014\076\364\077\150\100\365\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\004\056" +
    "\363\001\001\000\010\056\355\102\356\114\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\361\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u0106\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u0108\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\006\152\056\126\070\147\071\044\074\014\076\u0114" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0118\114\132\001\001\000\002" +
    "\001\001\000\004\063\u011a\001\001\000\002\001\001\000" +
    "\020\006\203\045\u011c\051\205\052\212\114\132\123\210" +
    "\153\204\001\001\000\002\001\001\000\004\046\u011e\001" +
    "\001\000\004\122\u011f\001\001\000\002\001\001\000\004" +
    "\022\u0121\001\001\000\072\006\152\021\235\023\227\056" +
    "\126\070\147\071\044\074\014\076\017\077\150\113\070" +
    "\114\132\115\120\117\060\120\107\133\232\134\234\135" +
    "\023\136\116\137\104\140\134\141\054\145\142\146\025" +
    "\147\050\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\056\006\152\021\u012a\033\u0128\056\126" +
    "\070\147\071\044\074\014\076\017\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\004\114\u0125\001\001\000\002\001\001\000\052\006\152" +
    "\056\126\070\147\071\044\074\014\076\u0127\077\150\113" +
    "\070\114\132\117\060\120\107\135\023\136\116\137\104" +
    "\140\134\141\054\155\065\156\022\176\012\205\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u012b" +
    "\001\001\000\002\001\001\000\072\006\152\021\235\023" +
    "\227\056\126\070\147\071\044\074\014\076\017\077\150" +
    "\113\070\114\132\115\120\117\060\120\107\133\232\134" +
    "\234\135\023\136\116\137\104\140\134\141\054\145\142" +
    "\146\025\147\050\155\065\156\022\176\012\205\145\001" +
    "\001\000\002\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u012e\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\054\006\152\021\u0131\056\126\070\147\071\044" +
    "\074\014\076\017\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\004\022\u013b\001" +
    "\001\000\004\041\u0132\001\001\000\004\043\u0133\001\001" +
    "\000\002\001\001\000\054\006\152\021\u013a\056\126\070" +
    "\147\071\044\074\014\076\017\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u0137\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\002\001\001\000\054" +
    "\006\152\021\u0139\056\126\070\147\071\044\074\014\076" +
    "\017\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\006\152\021\235\023\227\042\u013c\056\126\070" +
    "\147\071\044\074\014\076\017\077\150\113\070\114\132" +
    "\115\120\117\060\120\107\133\232\134\234\135\023\136" +
    "\116\137\104\140\134\141\054\145\142\146\025\147\050" +
    "\155\065\156\022\176\012\205\145\001\001\000\004\044" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u0141\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0144\001\001\000\072\006\152\021" +
    "\235\023\227\056\126\070\147\071\044\074\014\076\017" +
    "\077\150\113\070\114\132\115\120\117\060\120\107\133" +
    "\232\134\234\135\023\136\116\137\104\140\134\141\054" +
    "\145\142\146\025\147\050\155\065\156\022\176\012\205" +
    "\145\001\001\000\004\022\u0146\001\001\000\072\006\152" +
    "\021\235\023\227\056\126\070\147\071\044\074\014\076" +
    "\017\077\150\113\070\114\132\115\120\117\060\120\107" +
    "\133\232\134\234\135\023\136\116\137\104\140\134\141" +
    "\054\145\142\146\025\147\050\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u014f\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\006\152\056\126\070" +
    "\147\071\044\074\014\076\364\077\150\100\u0152\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\006\152\056\126\071\044\077\150" +
    "\103\u0158\104\u0159\114\132\117\060\120\107\135\u015a\136" +
    "\116\137\104\140\134\141\u014c\155\u014b\156\022\202\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\152" +
    "\056\126\071\044\077\150\103\u015d\104\u0159\114\132\117" +
    "\060\120\107\135\u015a\136\116\137\104\140\134\141\u014c" +
    "\155\u014b\156\022\202\u0157\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\152\056\126\071\044\077\150" +
    "\104\u0160\114\132\117\060\120\107\135\u015a\136\116\137" +
    "\104\140\134\141\u014c\155\u014b\156\022\202\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\u0163\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\040\006\152\056\126\071\044\077" +
    "\150\114\132\117\060\120\107\135\u0165\136\116\137\104" +
    "\140\134\141\u014c\155\u014b\156\022\160\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\152\056\126\071\044\077\150\114\132\117\060\120" +
    "\107\135\u0169\136\116\137\104\140\134\141\u014c\155\u014b" +
    "\156\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\006\152\056\126\070\147\071\044\074\014\076\u016d" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\u019f\004\u017f" +
    "\005\u0193\056\u01a6\101\u01a0\114\u01a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\u01c3\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\006\152\053\u01ba\054\u01bd\056\126\067\u01bc\070" +
    "\147\071\044\074\014\076\u01bb\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u01bf\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\054\006" +
    "\152\056\126\067\u01c1\070\147\071\044\074\014\076\u01bb" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u01e8\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u01e6\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\052" +
    "\006\152\056\126\070\147\071\044\074\014\076\u01e4\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u01e3\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\u01e2\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u01e1\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u01e0\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\u01df\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\052\006\152\056\126\070\147\071\044\074" +
    "\014\076\u01de\077\150\113\070\114\132\117\060\120\107" +
    "\135\023\136\116\137\104\140\134\141\054\155\065\156" +
    "\022\176\012\205\145\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u01dd\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u01dc\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\u01db\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\u01da\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\152\056\126\071\044" +
    "\077\150\114\132\117\060\120\107\135\u01e7\136\116\137" +
    "\104\140\134\141\u014c\155\u014b\156\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\152\056\126\070\147\071\044\074\014\076" +
    "\u01ee\077\150\113\070\114\132\117\060\120\107\135\023" +
    "\136\116\137\104\140\134\141\054\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\004\035\u01f0" +
    "\001\001\000\002\001\001\000\004\036\u0201\001\001\000" +
    "\004\036\u01f3\001\001\000\002\001\001\000\004\036\u01f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\006" +
    "\152\056\126\070\147\071\044\074\014\076\u01fd\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\004\037\u01f9\001\001\000\004\022\u01fc\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\006\152" +
    "\021\235\023\227\056\126\070\147\071\044\074\014\076" +
    "\017\077\150\113\070\114\132\115\120\117\060\120\107" +
    "\133\232\134\234\135\023\136\116\137\104\140\134\141" +
    "\054\145\142\146\025\147\050\155\065\156\022\176\012" +
    "\205\145\001\001\000\004\037\u01fe\001\001\000\004\022" +
    "\u01ff\001\001\000\072\006\152\021\235\023\227\056\126" +
    "\070\147\071\044\074\014\076\017\077\150\113\070\114" +
    "\132\115\120\117\060\120\107\133\232\134\234\135\023" +
    "\136\116\137\104\140\134\141\054\145\142\146\025\147" +
    "\050\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u0203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\006\152\053\u0207\054\u01bd\056\126\067\u01bc\070\147\071" +
    "\044\074\014\076\u01bb\077\150\113\070\114\132\117\060" +
    "\120\107\135\023\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u020f\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u0216\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u021a\001\001\000\002" +
    "\001\001\000\012\006\203\114\132\123\u021d\152\u021c\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\203" +
    "\114\132\123\u021f\001\001\000\002\001\001\000\004\061" +
    "\u0221\001\001\000\016\062\u0223\127\u0232\131\u022f\132\u0228" +
    "\154\u022c\162\u0222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\203" +
    "\114\132\123\u0253\163\u0252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\124\u0249\001\001\000\002\001\001\000" +
    "\016\003\u019f\004\u017f\005\u0242\114\u01a8\125\u0243\126\u0241" +
    "\001\001\000\004\132\u0240\001\001\000\002\001\001\000" +
    "\054\006\152\021\u023f\056\126\070\147\071\044\074\014" +
    "\076\017\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\004\063" +
    "\u0234\001\001\000\012\003\u019f\004\u017f\005\u0235\114\u01a8" +
    "\001\001\000\002\001\001\000\020\006\203\045\u0237\051" +
    "\205\052\212\114\132\123\210\153\204\001\001\000\002" +
    "\001\001\000\004\122\u0239\001\001\000\004\130\u023a\001" +
    "\001\000\002\001\001\000\004\022\u023d\001\001\000\002" +
    "\001\001\000\072\006\152\021\235\023\227\056\126\070" +
    "\147\071\044\074\014\076\017\077\150\113\070\114\132" +
    "\115\120\117\060\120\107\133\232\134\234\135\023\136" +
    "\116\137\104\140\134\141\054\145\142\146\025\147\050" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u019f\004" +
    "\u017f\005\u0242\114\u01a8\126\u0246\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\006\152\056\126\070\147\071" +
    "\044\074\014\076\u0248\077\150\113\070\114\132\117\060" +
    "\120\107\135\023\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\006\152\056" +
    "\126\070\147\071\044\074\014\076\u024c\077\150\113\070" +
    "\114\132\117\060\120\107\135\023\136\116\137\104\140" +
    "\134\141\054\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u0251\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\002\001\001\000" +
    "\004\164\u0256\001\001\000\002\001\001\000\010\006\203" +
    "\114\132\123\u0270\001\001\000\026\006\203\114\132\123" +
    "\u025d\165\u025b\166\u025a\167\u025f\170\u025e\172\u0258\173\u025c" +
    "\174\u0259\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\203\114\132" +
    "\123\u025d\167\u026a\170\u025e\172\u0258\173\u025c\174\u0259\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\203\114\132\123\u0266\171\u0265\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\203\114\132\123\u0268" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\132\u026e\175\u026d\001\001" +
    "\000\012\003\u019f\004\u017f\005\u026f\114\u01a8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\u028a\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\152\056\126\071\044\077\150\114\132\117\060" +
    "\120\107\135\u0280\136\116\137\104\140\134\141\u014c\155" +
    "\u014b\156\022\001\001\000\052\006\152\056\126\070\147" +
    "\071\044\074\014\076\u0278\077\150\113\070\114\132\117" +
    "\060\120\107\135\023\136\116\137\104\140\134\141\054" +
    "\155\065\156\022\176\012\205\145\001\001\000\004\111" +
    "\u0277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u027c\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\112\u0285" +
    "\114\u0287\001\001\000\004\114\u0284\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\u028f\001\001\000\002\001\001\000\020\006\203\045" +
    "\u0291\051\205\052\212\114\132\123\210\153\204\001\001" +
    "\000\002\001\001\000\004\122\u0293\001\001\000\002\001" +
    "\001\000\004\022\u0295\001\001\000\072\006\152\021\235" +
    "\023\227\056\126\070\147\071\044\074\014\076\017\077" +
    "\150\113\070\114\132\115\120\117\060\120\107\133\232" +
    "\134\234\135\023\136\116\137\104\140\134\141\054\145" +
    "\142\146\025\147\050\155\065\156\022\176\012\205\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\006\152\053\u029b\054\u01bd" +
    "\056\126\067\u01bc\070\147\071\044\074\014\076\u01bb\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\006\152\056\126\070\u029f\071\044\074\014\076\u01c6\077" +
    "\150\113\070\114\132\117\060\120\107\135\u029e\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\203" +
    "\u02a0\205\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\006\152\027\u02a7\030\u02a3\056" +
    "\126\071\044\077\150\114\132\117\060\120\107\135\u02a5" +
    "\136\116\137\104\140\134\141\u014c\155\u014b\156\022\202" +
    "\u02a2\204\u02a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\152\056" +
    "\126\071\044\077\150\114\132\117\060\120\107\135\u02b0" +
    "\136\116\137\104\140\134\141\u014c\155\u014b\156\022\001" +
    "\001\000\044\006\152\030\u02a8\056\126\071\044\077\150" +
    "\114\132\117\060\120\107\135\u02a5\136\116\137\104\140" +
    "\134\141\u014c\155\u014b\156\022\202\u02a2\204\u02a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\152\021" +
    "\u02ac\032\u02ad\056\126\070\147\071\044\074\014\076\017" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\004\022\u02ae\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\006\152\021\235\023\227" +
    "\056\126\070\147\071\044\074\014\076\017\077\150\113" +
    "\070\114\132\115\120\117\060\120\107\133\232\134\234" +
    "\135\023\136\116\137\104\140\134\141\054\145\142\146" +
    "\025\147\050\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\152\021" +
    "\u02ac\032\u02b2\056\126\070\147\071\044\074\014\076\017" +
    "\077\150\113\070\114\132\117\060\120\107\135\023\136" +
    "\116\137\104\140\134\141\054\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u02b6\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\006\152\056\126\070\147\071\044" +
    "\074\014\076\u02c1\077\150\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\054\006\152\056" +
    "\126\070\147\071\044\074\014\076\364\077\150\100\u02bf" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\010\056\355\102\u02bb\114\360\001\001\000" +
    "\002\001\001\000\060\006\152\053\u02bd\054\u01bd\056\126" +
    "\067\u01bc\070\147\071\044\074\014\076\u01bb\077\150\113" +
    "\070\114\132\117\060\120\107\135\023\136\116\137\104" +
    "\140\134\141\054\155\065\156\022\176\012\205\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u02c9\001\001\000\002\001\001\000\004\017\u02c7" +
    "\001\001\000\002\001\001\000\072\006\152\020\163\021" +
    "\155\056\126\070\147\071\044\074\014\076\017\077\150" +
    "\113\070\114\132\115\120\117\060\120\107\133\110\134" +
    "\130\135\023\136\116\137\104\140\134\141\054\145\142" +
    "\146\025\147\050\155\065\156\022\176\012\205\145\001" +
    "\001\000\002\001\001\000\072\006\152\020\163\021\155" +
    "\056\126\070\147\071\044\074\014\076\017\077\150\113" +
    "\070\114\132\115\120\117\060\120\107\133\110\134\130" +
    "\135\023\136\116\137\104\140\134\141\054\145\142\146" +
    "\025\147\050\155\065\156\022\176\012\205\145\001\001" +
    "\000\002\001\001\000\042\006\152\024\u02ce\025\u02cc\056" +
    "\126\071\044\077\150\114\132\117\060\120\107\135\u02cd" +
    "\136\116\137\104\140\134\141\u014c\155\u014b\156\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\152\025\u02d1\056\126\071" +
    "\044\077\150\114\132\117\060\120\107\135\u02cd\136\116" +
    "\137\104\140\134\141\u014c\155\u014b\156\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\u028a\001\001" +
    "\000\002\001\001\000\004\073\u02e5\001\001\000\004\073" +
    "\u02d7\001\001\000\006\150\u02dd\177\u02db\001\001\000\060" +
    "\006\152\053\u02d9\054\u01bd\056\126\067\u01bc\070\147\071" +
    "\044\074\014\076\u01bb\077\150\113\070\114\132\117\060" +
    "\120\107\135\023\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\203\114" +
    "\132\123\u02e4\001\001\000\004\151\u02de\001\001\000\002" +
    "\001\001\000\012\006\203\114\132\123\u021d\152\u02e0\001" +
    "\001\000\002\001\001\000\004\061\u02e2\001\001\000\016" +
    "\062\u0223\127\u0232\131\u022f\132\u0228\154\u022c\162\u0222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\006\152\021\235\023\227\056\126\070" +
    "\147\071\044\074\014\076\017\077\150\113\070\114\132" +
    "\115\120\117\060\120\107\133\232\134\234\135\023\136" +
    "\116\137\104\140\134\141\054\145\142\146\025\147\050" +
    "\155\065\156\022\176\012\205\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u028a\001\001\000\004\111\u0277\001\001\000" +
    "\002\001\001\000\016\003\u019f\004\u017f\005\u02f6\056\u02f8" +
    "\101\u02f7\114\u01a8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\006\152\053\u02fa\054\u01bd" +
    "\056\126\067\u01bc\070\147\071\044\074\014\076\u01bb\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\152\056\126\071\044\077\150\114\132\117" +
    "\060\120\107\135\u0315\136\116\137\104\140\134\141\u014c" +
    "\155\u014b\156\022\001\001\000\002\001\001\000\004\075" +
    "\u0309\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\006\152\056\126\070\147\071\044\074\014\076\u030b\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\002\001\001\000\036\006\152\056\126" +
    "\071\044\077\150\114\132\117\060\120\107\135\u0310\136" +
    "\116\137\104\140\134\141\u014c\155\u014b\156\022\001\001" +
    "\000\002\001\001\000\052\006\152\056\126\070\147\071" +
    "\044\074\014\076\u030e\077\150\113\070\114\132\117\060" +
    "\120\107\135\023\136\116\137\104\140\134\141\054\155" +
    "\065\156\022\176\012\205\145\001\001\000\036\006\152" +
    "\056\126\071\044\077\150\114\132\117\060\120\107\135" +
    "\u030f\136\116\137\104\140\134\141\u014c\155\u014b\156\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u0313\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\036\006\152\056\126\071" +
    "\044\077\150\114\132\117\060\120\107\135\u0314\136\116" +
    "\137\104\140\134\141\u014c\155\u014b\156\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\006\152\056\126\070\147\071\044\074\014\076\u0317\077" +
    "\150\113\070\114\132\117\060\120\107\135\023\136\116" +
    "\137\104\140\134\141\054\155\065\156\022\176\012\205" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\150\u031a\001\001\000\004\151\u031b\001\001\000\002\001" +
    "\001\000\004\061\u031d\001\001\000\016\062\u0223\127\u0232" +
    "\131\u022f\132\u0228\154\u022c\162\u0222\001\001\000\002\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u0320\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\056\006" +
    "\152\021\u0324\040\u0323\056\126\070\147\071\044\074\014" +
    "\076\017\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\004\022\u0325\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\006\152\021\235" +
    "\023\227\056\126\070\147\071\044\074\014\076\017\077" +
    "\150\113\070\114\132\115\120\117\060\120\107\133\232" +
    "\134\234\135\023\136\116\137\104\140\134\141\054\145" +
    "\142\146\025\147\050\155\065\156\022\176\012\205\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u032c\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u032e\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0331\001\001\000" +
    "\072\006\152\021\235\023\227\056\126\070\147\071\044" +
    "\074\014\076\017\077\150\113\070\114\132\115\120\117" +
    "\060\120\107\133\232\134\234\135\023\136\116\137\104" +
    "\140\134\141\054\145\142\146\025\147\050\155\065\156" +
    "\022\176\012\205\145\001\001\000\010\142\u0335\143\u0336" +
    "\144\u0334\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\200\u0339\201\u0338\001\001\000\004\144\u0337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u033c\001\001\000\072\006\152" +
    "\021\235\023\227\056\126\070\147\071\044\074\014\076" +
    "\017\077\150\113\070\114\132\115\120\117\060\120\107" +
    "\133\232\134\234\135\023\136\116\137\104\140\134\141" +
    "\054\145\142\146\025\147\050\155\065\156\022\176\012" +
    "\205\145\001\001\000\002\001\001\000\010\006\203\114" +
    "\132\123\u033f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u0343\001\001\000\072\006" +
    "\152\021\235\023\227\056\126\070\147\071\044\074\014" +
    "\076\017\077\150\113\070\114\132\115\120\117\060\120" +
    "\107\133\232\134\234\135\023\136\116\137\104\140\134" +
    "\141\054\145\142\146\025\147\050\155\065\156\022\176" +
    "\012\205\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\u028a\001\001\000\002\001" +
    "\001\000\004\111\u0277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\152\056\126\065" +
    "\u034f\066\u0350\070\147\071\044\074\014\076\u034e\077\150" +
    "\113\070\114\132\117\060\120\107\135\023\136\116\137" +
    "\104\140\134\141\054\155\065\156\022\176\012\205\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\152\056\126\070\147\071\044\074\014" +
    "\076\u0352\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\056\006" +
    "\152\056\126\065\u0354\066\u0350\070\147\071\044\074\014" +
    "\076\u034e\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\056\006" +
    "\152\056\126\065\u0356\066\u0350\070\147\071\044\074\014" +
    "\076\u034e\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\056\006" +
    "\152\021\u035a\031\u0358\056\126\070\147\071\044\074\014" +
    "\076\017\077\150\113\070\114\132\117\060\120\107\135" +
    "\023\136\116\137\104\140\134\141\054\155\065\156\022" +
    "\176\012\205\145\001\001\000\002\001\001\000\004\022" +
    "\u035b\001\001\000\002\001\001\000\072\006\152\021\235" +
    "\023\227\056\126\070\147\071\044\074\014\076\017\077" +
    "\150\113\070\114\132\115\120\117\060\120\107\133\232" +
    "\134\234\135\023\136\116\137\104\140\134\141\054\145" +
    "\142\146\025\147\050\155\065\156\022\176\012\205\145" +
    "\001\001\000\002\001\001\000\052\006\152\056\126\070" +
    "\147\071\044\074\014\076\u035e\077\150\113\070\114\132" +
    "\117\060\120\107\135\023\136\116\137\104\140\134\141" +
    "\054\155\065\156\022\176\012\205\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\u0362\007\u0367\010\u0374\012" +
    "\u0375\015\u0376\114\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0371\114\132\001\001\000\002\001" +
    "\001\000\010\006\u036e\007\u036d\114\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\u036e\007\u0367\015\u037a\114\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\u036e\007\u037f\013\u037d" +
    "\014\u0380\016\u037e\114\132\001\001\000\002\001\001\000" +
    "\010\006\u036e\007\u0381\114\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\u036e\007\u037f\014\u0384\016\u037e\114\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\114\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\152\056\126\070\147\071\044\074\014\076\u0304" +
    "\077\150\105\u038e\106\u0305\113\070\114\132\117\060\120" +
    "\107\135\023\136\116\137\104\140\134\141\054\155\065" +
    "\156\022\176\012\205\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\152\056\126" +
    "\070\147\071\044\074\014\076\u0392\077\150\113\070\114" +
    "\132\117\060\120\107\135\023\136\116\137\104\140\134" +
    "\141\054\155\065\156\022\176\012\205\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u0397\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = Integer.valueOf(Modifiers.AccPublic);
	protected final static Integer PRIVATE = Integer.valueOf(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = Integer.valueOf(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = Integer.valueOf(Modifiers.AccAbstract);
	protected final static Integer FINAL = Integer.valueOf(Modifiers.AccFinal);
	protected final static Integer STATIC = Integer.valueOf(Modifiers.AccStatic);

	AST ast;

	/**
	 * XXX: Reimplement scalars as NamespaceName
	 */
	protected VariableBase detectScalar(VariableBase expr) {
		if (expr instanceof NamespaceName) {
			NamespaceName name = (NamespaceName) expr;
			if (name.segments().size() == 1) {
				Identifier i = name.segments().get(0);
				if (!name.isGlobal() && !name.isCurrent()) {
					return new Scalar(i.getStart(), i.getEnd(), ast, i.getName(), Scalar.TYPE_STRING);
				}
			}
		}
		return expr;
	}

	public final void setAST (AST ast) {
		this.ast = ast;
	}

	/** Report a non fatal error (or warning).  This method takes a message
	 *  string and an additional object (to be used by specializations
	 *  implemented in subclasses). Here in the base class a very simple
	 *  implementation is provided which simply prints the message to
	 *  System.err.
	 *
	 * @param message an error message.
	 * @param info    an extra object reserved for use by specialized subclasses.
	 */
	public void report_error(String message, Object info)
	{
		if (DLTKCore.DEBUG) {
			super.report_error(message, info);
		}
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}

	public void report_fatal_error(
	String message,
	Object info)
	throws java.lang.Exception
	{
		/* stop parsing (not really necessary since we throw an exception, but) */
		done_parsing();

		/* use the normal error message reporting to put out the message */
		report_error(message, info);

		/* throw an exception */
		// throw new Exception("Can't recover from previous error(s)");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PHPAstParser$actions {
  private final PHPAstParser parser;

  /** Constructor */
  CUP$PHPAstParser$actions(PHPAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000000(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	PHPAstLexer phpAstLexer = (PHPAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	RESULT = new Program(sListleft, sListright, parser.ast, sList, commentList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAstParser$parser.done_parsing();
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // reserved_non_modifiers ::= T_INCLUDE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // reserved_non_modifiers ::= T_INCLUDE_ONCE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reserved_non_modifiers ::= T_EVAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reserved_non_modifiers ::= T_REQUIRE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // reserved_non_modifiers ::= T_REQUIRE_ONCE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reserved_non_modifiers ::= T_LOGICAL_OR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reserved_non_modifiers ::= T_LOGICAL_XOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reserved_non_modifiers ::= T_LOGICAL_AND 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reserved_non_modifiers ::= T_INSTANCEOF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reserved_non_modifiers ::= T_NEW 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reserved_non_modifiers ::= T_CLONE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reserved_non_modifiers ::= T_EXIT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reserved_non_modifiers ::= T_IF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reserved_non_modifiers ::= T_ELSEIF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reserved_non_modifiers ::= T_ELSE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reserved_non_modifiers ::= T_ENDIF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reserved_non_modifiers ::= T_ECHO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reserved_non_modifiers ::= T_DO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // reserved_non_modifiers ::= T_WHILE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reserved_non_modifiers ::= T_ENDWHILE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reserved_non_modifiers ::= T_FOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reserved_non_modifiers ::= T_ENDFOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // reserved_non_modifiers ::= T_FOREACH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // reserved_non_modifiers ::= T_ENDFOREACH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // reserved_non_modifiers ::= T_DECLARE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // reserved_non_modifiers ::= T_ENDDECLARE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reserved_non_modifiers ::= T_AS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reserved_non_modifiers ::= T_TRY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reserved_non_modifiers ::= T_CATCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reserved_non_modifiers ::= T_FINALLY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reserved_non_modifiers ::= T_THROW 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // reserved_non_modifiers ::= T_USE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // reserved_non_modifiers ::= T_INSTEADOF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // reserved_non_modifiers ::= T_GLOBAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reserved_non_modifiers ::= T_VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reserved_non_modifiers ::= T_UNSET 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // reserved_non_modifiers ::= T_ISSET 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // reserved_non_modifiers ::= T_EMPTY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // reserved_non_modifiers ::= T_CONTINUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // reserved_non_modifiers ::= T_GOTO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // reserved_non_modifiers ::= T_FUNCTION 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reserved_non_modifiers ::= T_CONST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reserved_non_modifiers ::= T_RETURN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reserved_non_modifiers ::= T_PRINT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reserved_non_modifiers ::= T_YIELD 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reserved_non_modifiers ::= T_LIST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reserved_non_modifiers ::= T_SWITCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reserved_non_modifiers ::= T_ENDSWITCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reserved_non_modifiers ::= T_CASE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reserved_non_modifiers ::= T_DEFAULT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reserved_non_modifiers ::= T_BREAK 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reserved_non_modifiers ::= T_ARRAY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reserved_non_modifiers ::= T_CALLABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reserved_non_modifiers ::= T_EXTENDS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // reserved_non_modifiers ::= T_IMPLEMENTS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reserved_non_modifiers ::= T_NAMESPACE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // reserved_non_modifiers ::= T_TRAIT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // reserved_non_modifiers ::= T_INTERFACE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reserved_non_modifiers ::= T_CLASS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // semi_reserved ::= reserved_non_modifiers 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // semi_reserved ::= T_STATIC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // semi_reserved ::= T_ABSTRACT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // semi_reserved ::= T_FINAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // semi_reserved ::= T_PRIVATE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // semi_reserved ::= T_PROTECTED 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // semi_reserved ::= T_PUBLIC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identifier ::= string_st 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifier ::= semi_reserved 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // namespace_name ::= string_st 
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // namespace_name ::= namespace_name T_NS_SEPARATOR string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // name ::= namespace_name 
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // name ::= T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			// EmptyStatement length == 2 means it is "?>",
			// equals to 1 means it is ";"
			if (!(statement instanceof EmptyStatement && statement.getLength() >= 2) && lastStatement instanceof NamespaceDeclaration && !((NamespaceDeclaration) lastStatement).isBracketed()) {
				((NamespaceDeclaration) lastStatement).addStatement(statement);
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // top_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, null,
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // top_statement ::= T_USE mixed_group_use_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int useStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int useStatementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		UseStatement useStatement = (UseStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	useStatement.setSourceRange(sleft, eright - sleft);
	RESULT = useStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // top_statement ::= T_USE use_type group_use_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int useStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int useStatementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		UseStatement useStatement = (UseStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	useStatement.setSourceRange(sleft, eright - sleft);
	useStatement.setStatementType(useType);
	RESULT = useStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List<UseStatementPart> list = (List<UseStatementPart>)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // top_statement ::= T_USE use_type use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List<UseStatementPart> list = (List<UseStatementPart>)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(sleft, eright, parser.ast, list, useType);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // top_statement ::= T_CONST const_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String left = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List[] list = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConstantDeclaration(leftleft, eright, parser.ast, list[0], list[1]);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // use_type ::= T_FUNCTION 
            {
              Integer RESULT =null;
		
	RESULT = UseStatement.T_FUNCTION;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_type",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // use_type ::= T_CONST 
            {
              Integer RESULT =null;
		
	RESULT = UseStatement.T_CONST;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_type",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // group_use_declaration ::= use_namespace_name T_CURLY_OPEN use_declarations T_CURLY_CLOSE 
            {
              UseStatement RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		NamespaceName ns = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List<UseStatementPart> useDeclList = (List<UseStatementPart>)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(nsleft, endright, parser.ast, ns, useDeclList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("group_use_declaration",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // mixed_group_use_declaration ::= use_namespace_name T_CURLY_OPEN inline_use_declarations T_CURLY_CLOSE 
            {
              UseStatement RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		NamespaceName ns = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List<UseStatementPart> useDeclList = (List<UseStatementPart>)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(nsleft, endright, parser.ast, ns, useDeclList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("mixed_group_use_declaration",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inline_use_declarations ::= inline_use_declarations T_COMMA inline_use_declaration 
            {
              List<UseStatementPart> RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List<UseStatementPart> useDeclList = (List<UseStatementPart>)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declarations",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // inline_use_declarations ::= inline_use_declaration 
            {
              List<UseStatementPart> RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<UseStatementPart> useDeclList = new LinkedList<UseStatementPart>();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declarations",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inline_use_declaration ::= use_declaration 
            {
              UseStatementPart RESULT =null;
		int useDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDeclaration = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = useDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declaration",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // inline_use_declaration ::= use_type use_declaration 
            {
              UseStatementPart RESULT =null;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int useDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDeclaration = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	useDeclaration.setStatementType(useType);
	RESULT = useDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declaration",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List<UseStatementPart> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List<UseStatementPart> list = (List<UseStatementPart>)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(useDecl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",11, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // use_declarations ::= use_declaration 
            {
              List<UseStatementPart> RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",11, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // use_declaration ::= namespace_name 
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(sleft, listright, parser.ast,
		new NamespaceName(sleft, listright, parser.ast, list, true, false), null);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(sleft, aliasNameright, parser.ast,
		new NamespaceName(sleft, listright, parser.ast, list, true, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // use_namespace_name ::= namespace_name T_NS_SEPARATOR 
            {
              NamespaceName RESULT =null;
		int nnListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int nnListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List nnList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(nnListleft, endright, parser.ast, nnList, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_namespace_name",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		sList.add(statement);
	}
	RESULT = sList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(tokenleft, eright, parser.ast, sList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int s = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int s = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List conds = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForStatement(tokenleft, statementright, parser.ast, initializations, conds, increasements, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // statement ::= T_GLOBAL simple_variable_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GlobalStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(sleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, exprright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "use")), list));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, closeParright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "unset")), list));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_key foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, key, var, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // statement ::= T_DECLARE T_OPEN_PARENTHESE const_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new DeclareStatement(sleft, statementright, parser.ast, lists[0], lists[1], statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int finallyClauseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int finallyClauseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FinallyClause finallyClause = (FinallyClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TryStatement s = new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright, parser.ast, new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList), catchesList, finallyClause);

	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(sleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statement ::= T_VAR_COMMENT statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // catches_list ::= non_empty_catches_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // catches_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_empty_catches_list ::= catch_clause 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_catches_list ::= non_empty_catches_list catch_clause 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		String catch_word = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className,
		new Variable(varleft, varright, parser.ast, var),
		new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("catch_clause",98, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // finally_clause ::= non_empty_finally_clause 
            {
              FinallyClause RESULT =null;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FinallyClause clause = (FinallyClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = clause;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",126, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // finally_clause ::= 
            {
              FinallyClause RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",126, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String finally_word = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, parser.ast, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, parser.ast, finallyBlock);
	RESULT = finallyClause;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_finally_clause",127, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",90, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Identifier returnType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(fnleft, fnright, parser.ast, fn), paramList,
		new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue(), returnType);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (modifier.intValue() == ClassDeclaration.MODIFIER_TRAIT) {
		RESULT = new TraitDeclaration(modifierleft, blockEndright, parser.ast, ClassDeclaration.MODIFIER_NONE,
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}else{
		RESULT = new ClassDeclaration(modifierleft, blockEndright, parser.ast, modifier.intValue(),
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",100, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InterfaceDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(classNameleft, classNameright, parser.ast, className), interfaces,
		new Block(blockStartleft, blockEndright, parser.ast, sList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",100, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // class_entry_type ::= T_TRAIT 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_TRAIT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // extends_from ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",102, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",102, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",75, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",76, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",76, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",103, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",103, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",104, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",104, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // list_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              ListVariable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(sleft, eright, parser.ast, varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("list_variable",128, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // foreach_expr ::= variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",129, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // foreach_expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",129, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // foreach_key ::= foreach_variable T_DOUBLE_ARROW 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_key",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // foreach_value ::= foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",130, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // foreach_value ::= list_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ListVariable var = (ListVariable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",130, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Reference (sleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // const_list ::= string_st T_EQUAL expr 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
	listValues.add(expr);

	RESULT = new List[] { listKeys, listValues };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("const_list",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // const_list ::= const_list T_COMMA string_st T_EQUAL expr 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
	lists[1].add(expr);
	RESULT = lists;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("const_list",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(cond);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, sListright, parser.ast, sList, false);
	((LinkedList) elseifList[0]).addFirst(cond);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(colonleft, listright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // parameter ::= optional_class_type T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v, null, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // parameter ::= optional_class_type T_REFERENCE T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var, null, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // parameter ::= optional_class_type T_VARIABLE T_EQUAL expr 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, exprright, parser.ast, classType, v, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL expr 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, exprright, parser.ast, classType, ref_var, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // optional_class_type ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // optional_class_type ::= fully_qualified_class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // optional_class_type ::= T_ARRAY 
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // optional_class_type ::= T_CALLABLE 
            {
              Expression RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String callable = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(callableleft, callableright, parser.ast, "callable");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // function_call_parameter_list ::= non_empty_argument_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // non_empty_argument_list ::= argument 
            {
              List RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression argument = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(argument);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_argument_list",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // non_empty_argument_list ::= non_empty_argument_list T_COMMA argument 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_argument_list",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // argument ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("argument",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // argument ::= T_ELLIPSIS expr 
            {
              Expression RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(ellleft, exprright, parser.ast, expr, PrefixExpression.OP_UNPACK);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("argument",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // type ::= T_ARRAY 
            {
              Identifier RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("type",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // type ::= T_CALLABLE 
            {
              Identifier RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String callable = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(callableleft, callableright, parser.ast, "callable");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("type",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // type ::= name 
            {
              Identifier RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("type",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // return_type ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("return_type",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // return_type ::= T_NEKUDOTAIM type 
            {
              Identifier RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Identifier type = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = type;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("return_type",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // simple_variable_list ::= simple_variable_list T_COMMA simple_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable_list",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // simple_variable_list ::= simple_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable_list",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // simple_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // simple_variable ::= T_DOLLAR simple_variable 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // simple_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // static_var_list ::= static_var 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // static_var_list ::= static_var_list T_COMMA static_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // static_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // static_var ::= T_VARIABLE T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // class_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // class_statement ::= variable_modifiers property_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // class_statement ::= T_CONST class_const_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String left = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConstantDeclaration(leftleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // class_statement ::= method_modifiers T_FUNCTION is_reference identifier T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE return_type method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Identifier returnType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	modifier = modifier == null ? PHPAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue(), returnType);
	RESULT = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // class_statement ::= T_VAR_COMMENT statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // class_statement ::= trait_use_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, parser.ast, list, adaptations);
	RESULT = traitUseStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",112, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<NamespaceName> traitList = new LinkedList<NamespaceName>();
	traitList.add(name);
	RESULT = traitList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",113, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",113, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",114, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",114, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",115, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",115, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",116, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",116, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, parser.ast, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",117, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, parser.ast, alias);
	RESULT = traitAliasStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",117, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, parser.ast, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",118, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<NamespaceName> trList = new LinkedList<NamespaceName>();
	trList.add(className);
	RESULT = trList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",119, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",119, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	//FunctionName name = new FunctionName(sleft, sright, parser.ast,
	//		new Identifier(sleft, sright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new Identifier(sleft, sright, parser.ast, s);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",120, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",120, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	//FunctionName name = new FunctionName(functionNameleft, functionNameright, parser.ast,
	//		new Identifier(functionNameleft, functionNameright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, parser.ast, className, name);
	RESULT = methodReference;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",121, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // trait_alias ::= trait_method_reference T_AS trait_modifiers identifier 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? functionNameleft : modifierleft;
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	TraitAlias alias = new TraitAlias(referenceleft, functionNameright, parser.ast, reference, modifierValue, modifierOffset, name);
	RESULT = alias;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",122, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // trait_alias ::= trait_method_reference T_AS member_modifier 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? asright + 1 : modifierleft;
	TraitAlias alias = new TraitAlias(referenceleft, modifierright, parser.ast, reference, modifierValue, modifierOffset, null);
	RESULT = alias;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",122, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // trait_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",123, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // trait_modifiers ::= member_modifier 
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",123, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",86, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(sleft, eright, parser.ast, list);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",86, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",85, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",85, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PROTECTED;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PRIVATE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.STATIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.ABSTRACT;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.FINAL;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // property_list ::= property_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_list",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // property_list ::= property_list T_COMMA T_VARIABLE T_EQUAL expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_list",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // property_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_list",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // property_list ::= T_VARIABLE T_EQUAL expr 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_list",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // class_const_list ::= class_const_list T_COMMA class_const_decl 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ASTNode[] decl = (ASTNode[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(decl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_const_list",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // class_const_list ::= class_const_decl 
            {
              List RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ASTNode[] decl = (ASTNode[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(decl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_const_list",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // class_const_decl ::= identifier T_EQUAL expr 
            {
              ASTNode[] RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ASTNode[] { new Identifier(constNameleft, constNameright, parser.ast, constName), expr};

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_const_decl",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // anonymous_class ::= extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              AnonymousClassDeclaration RESULT =null;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block body = new Block(blockStartleft, blockEndright, parser.ast, sList);
	RESULT = new AnonymousClassDeclaration(superClassleft, blockEndright, parser.ast, superClass, interfaces, body);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("anonymous_class",125, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000001(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // new_expr ::= T_NEW T_CLASS ctor_arguments anonymous_class 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tclassleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tclassright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String tclass = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		AnonymousClassDeclaration ac = (AnonymousClassDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ClassName className = new ClassName(tclassleft, tclassright, parser.ast, new Identifier(tclassleft, tclassright, parser.ast, "class"));
	RESULT = new ClassInstanceCreation(startleft, acright, parser.ast, className, ctor, ac);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
	RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr_without_variable ::= variable T_POW_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_POW_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_AND_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_OR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // expr_without_variable ::= variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // expr_without_variable ::= T_INC variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // expr_without_variable ::= variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // expr_without_variable ::= T_DEC variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MUL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // expr_without_variable ::= expr T_POW expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_POW, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_DIV, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MOD, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_NOT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_TILDA);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // expr_without_variable ::= expr T_SPACESHIP expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SPACESHIP, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // expr_without_variable ::= yield_expr 
            {
              Expression RESULT =null;
		int yieldleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int yieldright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		YieldExpression yield = (YieldExpression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = yield;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, ifTrue, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, null, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // expr_without_variable ::= expr T_COALESCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(expr1left, expr2right, parser.ast, expr1, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_OBJECT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_BOOL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_UNSET);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, s)), expList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "print")), expList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Identifier returnType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue(), false, -1, returnType);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Identifier returnType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue(), true, stleft, returnType);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // lexical_var_list ::= lexical_var_list T_COMMA lexical_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // lexical_var_list ::= lexical_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // lexical_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // lexical_var ::= T_REFERENCE T_VARIABLE 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Reference(refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // function_call ::= name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		NamespaceName list = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(listleft, eright, parser.ast,
		new FunctionName(listleft, listright, parser.ast, list), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM member_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM member_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase className = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // function_call ::= callable_expr T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(exprleft, eright, parser.ast,
		new FunctionName(exprleft, exprright, parser.ast, expr), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "static");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // class_name ::= name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // fully_qualified_class_name ::= namespace_name 
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // class_name_reference ::= class_name 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",111, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // class_name_reference ::= new_variable 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase className = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",111, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // scalar ::= T_BNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_BIN);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // scalar ::= T_TRAIT_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__TRAIT__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, parser.ast, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, parser.ast, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_SINGLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // scalar ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // scalar ::= constant 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase ref = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = ref;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // expr ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // variable ::= callable_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // variable ::= static_member 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // variable ::= dereferencable T_OBJECT_OPERATOR property_name 
            {
              VariableBase RESULT =null;
		int dispatchleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int dispatchright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase dispatch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable property = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(dispatchleft, propertyright, parser.ast, dispatch, property);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // dereferencable ::= variable 
            {
              VariableBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase v = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // dereferencable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // dereferencable ::= dereferencable_scalar 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // callable_expr ::= callable_variable 
            {
              VariableBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase v = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // callable_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // callable_expr ::= dereferencable_scalar 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // dereferencable_scalar ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, parser.ast, list, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // dereferencable_scalar ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // dereferencable_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // callable_variable ::= simple_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // callable_variable ::= dereferencable T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase d = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(dleft, eright, parser.ast, d, dim, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // callable_variable ::= constant T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase d = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(dleft, eright, parser.ast, d, dim, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // callable_variable ::= dereferencable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase d = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(dleft, eright, parser.ast, d, dim, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // callable_variable ::= dereferencable T_OBJECT_OPERATOR property_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable memberProperty = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
			new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // callable_variable ::= function_call 
            {
              VariableBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase c = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = c;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // constant ::= name 
            {
              VariableBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = detectScalar(name);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant",107, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM identifier 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, constNameright, parser.ast, className, new Identifier(constNameleft, constNameright, parser.ast, constName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant",107, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM identifier 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase className = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, constNameright, parser.ast, className, new Identifier(constNameleft, constNameright, parser.ast, constName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant",107, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase className = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // new_variable ::= simple_variable 
            {
              VariableBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // new_variable ::= new_variable T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase varName = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // new_variable ::= new_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase varName = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // new_variable ::= new_variable T_OBJECT_OPERATOR property_name 
            {
              VariableBase RESULT =null;
		int dispatcherleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int dispatcherright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase dispatcher = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable property = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(dispatcherleft, propertyright, parser.ast, dispatcher, property);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // new_variable ::= class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // new_variable ::= new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase className = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // variable_class_name ::= dereferencable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // optional_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_expr",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // optional_expr ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_expr",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // member_name ::= identifier 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_name",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // member_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_name",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // member_name ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_name",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // property_name ::= string_st 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_name",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // property_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_name",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // property_name ::= simple_variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("property_name",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // assignment_list_element ::= list_variable 
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ListVariable list = (ListVariable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // array_pair_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // non_empty_array_pair_list ::= T_REFERENCE variable 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // encaps_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // encaps_var ::= T_VARIABLE T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(varNameleft, stringright, ast, new Variable(varNameleft, varNameright, parser.ast, varName), new Variable(stringleft, stringright, parser.ast, string));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new Variable(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new ArrayAccess(varNameleft, cright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(stringleft, stringright, parser.ast, string);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(numleft, numright, parser.ast, num, Scalar.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // encaps_var_offset ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "isset")), varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "empty")), exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "eval")), exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",110, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",110, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // yield_expr ::= T_YIELD 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, tokenright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",131, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // yield_expr ::= T_YIELD expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",131, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // yield_expr ::= T_YIELD expr T_DOUBLE_ARROW expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, key, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",131, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // yield_expr ::= T_YIELD_FROM expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, expr, YieldExpression.OP_FROM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",131, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$PHPAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$PHPAstParser$do_action_part00000000(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$PHPAstParser$do_action_part00000001(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
