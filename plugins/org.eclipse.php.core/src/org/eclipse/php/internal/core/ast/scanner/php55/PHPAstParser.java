
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package org.eclipse.php.internal.core.ast.scanner.php55;

import java.util.*;
import org.eclipse.dltk.core.DLTKCore;
import org.eclipse.php.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PHPAstParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public PHPAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PHPAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01d9\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\003\000\002\006\004" +
    "\000\002\006\002\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\006\000\002\007\005\000\002" +
    "\007\007\000\002\007\006\000\002\007\005\000\002\007" +
    "\004\000\002\005\005\000\002\005\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\004\000\002\004\006\000" +
    "\002\011\004\000\002\011\002\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\010" +
    "\003\000\002\010\004\000\002\013\005\000\002\013\011" +
    "\000\002\013\014\000\002\013\007\000\002\013\011\000" +
    "\002\013\013\000\002\013\007\000\002\013\004\000\002" +
    "\013\005\000\002\013\004\000\002\013\005\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\004\000\002\013\005\000\002" +
    "\013\007\000\002\013\011\000\002\013\012\000\002\013" +
    "\007\000\002\013\003\000\002\013\010\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\013\004\000" +
    "\002\013\005\000\002\132\003\000\002\132\002\000\002" +
    "\133\003\000\002\133\004\000\002\134\012\000\002\200" +
    "\003\000\002\200\002\000\002\201\006\000\002\014\003" +
    "\000\002\014\005\000\002\015\003\000\002\016\003\000" +
    "\002\016\005\000\002\127\003\000\002\130\003\000\002" +
    "\051\002\000\002\051\003\000\002\135\013\000\002\136" +
    "\011\000\002\136\010\000\002\137\003\000\002\137\004" +
    "\000\002\137\004\000\002\137\003\000\002\140\002\000" +
    "\002\140\004\000\002\114\003\000\002\115\002\000\002" +
    "\115\004\000\002\141\002\000\002\141\004\000\002\142" +
    "\003\000\002\142\005\000\002\202\006\000\002\203\003" +
    "\000\002\203\003\000\002\017\004\000\002\204\003\000" +
    "\002\204\003\000\002\020\003\000\002\020\004\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\023\003\000\002\023\005\000\002\024\005" +
    "\000\002\024\007\000\002\025\005\000\002\025\006\000" +
    "\002\025\005\000\002\025\006\000\002\026\002\000\002" +
    "\026\007\000\002\026\006\000\002\027\003\000\002\027" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\002" +
    "\000\002\031\010\000\002\032\002\000\002\032\011\000" +
    "\002\033\002\000\002\033\004\000\002\034\002\000\002" +
    "\034\005\000\002\035\003\000\002\035\002\000\002\040" +
    "\003\000\002\040\005\000\002\041\004\000\002\041\005" +
    "\000\002\041\006\000\002\041\007\000\002\143\002\000" +
    "\002\143\003\000\002\143\003\000\002\143\003\000\002" +
    "\042\003\000\002\042\002\000\002\043\003\000\002\043" +
    "\003\000\002\043\004\000\002\043\005\000\002\043\005" +
    "\000\002\043\006\000\002\044\005\000\002\044\003\000" +
    "\002\045\003\000\002\045\004\000\002\045\006\000\002" +
    "\046\005\000\002\046\007\000\002\046\003\000\002\046" +
    "\005\000\002\047\004\000\002\047\002\000\002\050\005" +
    "\000\002\050\004\000\002\050\012\000\002\050\004\000" +
    "\002\050\003\000\002\162\005\000\002\163\003\000\002" +
    "\163\005\000\002\164\003\000\002\164\005\000\002\165" +
    "\002\000\002\165\003\000\002\166\003\000\002\166\004" +
    "\000\002\167\004\000\002\167\004\000\002\170\005\000" +
    "\002\171\003\000\002\171\005\000\002\172\003\000\002" +
    "\172\003\000\002\173\005\000\002\174\006\000\002\174" +
    "\005\000\002\175\002\000\002\175\003\000\002\124\003" +
    "\000\002\124\005\000\002\145\003\000\002\145\003\000" +
    "\002\123\002\000\002\123\003\000\002\125\003\000\002" +
    "\125\004\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\126\003\000\002\126\003\000\002\126\003" +
    "\000\002\121\005\000\002\121\007\000\002\121\003\000" +
    "\002\121\005\000\002\122\007\000\002\122\006\000\002" +
    "\052\005\000\002\052\003\000\002\053\002\000\002\053" +
    "\003\000\002\054\005\000\002\054\003\000\002\176\005" +
    "\000\002\176\005\000\002\176\005\000\002\176\011\000" +
    "\002\176\011\000\002\177\005\000\002\055\010\000\002" +
    "\055\005\000\002\055\006\000\002\055\010\000\002\055" +
    "\004\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\055\004\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\003\000\002\055\005\000\002\055\003\000\002" +
    "\055\007\000\002\055\006\000\002\055\003\000\002\055" +
    "\004\000\002\055\004\000\002\055\004\000\002\055\004" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\003\000\002" +
    "\055\003\000\002\055\005\000\002\055\004\000\002\055" +
    "\013\000\002\055\014\000\002\207\006\000\002\207\005" +
    "\000\002\210\006\000\002\210\006\000\002\036\002\000" +
    "\002\036\006\000\002\037\005\000\002\037\006\000\002" +
    "\037\003\000\002\037\004\000\002\056\006\000\002\056" +
    "\010\000\002\056\007\000\002\056\010\000\002\056\010" +
    "\000\002\056\010\000\002\056\010\000\002\056\006\000" +
    "\002\056\006\000\002\117\003\000\002\117\003\000\002" +
    "\117\005\000\002\117\004\000\002\120\003\000\002\120" +
    "\005\000\002\120\004\000\002\153\003\000\002\153\003" +
    "\000\002\155\003\000\002\157\003\000\002\157\005\000" +
    "\002\157\005\000\002\057\002\000\002\057\004\000\002" +
    "\057\005\000\002\107\002\000\002\107\003\000\002\107" +
    "\003\000\002\060\002\000\002\060\005\000\002\213\006" +
    "\000\002\213\006\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\005\000\002\061\004\000\002\211\006\000" +
    "\002\211\005\000\002\212\006\000\002\212\006\000\002" +
    "\214\006\000\002\214\006\000\002\062\003\000\002\062" +
    "\003\000\002\062\005\000\002\062\004\000\002\062\004" +
    "\000\002\062\004\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\160\005\000\002" +
    "\160\005\000\002\063\003\000\002\063\003\000\002\063" +
    "\005\000\002\063\004\000\002\063\003\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\003\000" +
    "\002\064\002\000\002\064\004\000\002\065\002\000\002" +
    "\065\003\000\002\066\007\000\002\066\005\000\002\066" +
    "\005\000\002\066\003\000\002\067\003\000\002\067\003" +
    "\000\002\144\003\000\002\116\003\000\002\146\003\000" +
    "\002\131\003\000\002\131\005\000\002\131\005\000\002" +
    "\131\011\000\002\131\011\000\002\147\003\000\002\147" +
    "\004\000\002\076\003\000\002\076\004\000\002\075\006" +
    "\000\002\075\006\000\002\075\003\000\002\150\005\000" +
    "\002\150\005\000\002\071\003\000\002\161\003\000\002" +
    "\161\003\000\002\156\003\000\002\156\004\000\002\156" +
    "\003\000\002\070\006\000\002\070\006\000\002\070\003" +
    "\000\002\070\003\000\002\072\003\000\002\072\006\000" +
    "\002\073\002\000\002\073\003\000\002\077\002\000\002" +
    "\077\006\000\002\074\006\000\002\074\006\000\002\074" +
    "\003\000\002\100\003\000\002\100\005\000\002\101\003" +
    "\000\002\101\004\000\002\102\005\000\002\102\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\002\000\002" +
    "\104\002\000\002\104\004\000\002\105\007\000\002\105" +
    "\005\000\002\105\005\000\002\105\003\000\002\105\010" +
    "\000\002\105\006\000\002\105\006\000\002\105\004\000" +
    "\002\106\004\000\002\106\004\000\002\106\004\000\002" +
    "\106\003\000\002\106\004\000\002\110\003\000\002\110" +
    "\006\000\002\110\005\000\002\110\005\000\002\110\010" +
    "\000\002\110\005\000\002\110\005\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\112\006\000\002" +
    "\112\006\000\002\112\004\000\002\112\004\000\002\112" +
    "\006\000\002\112\004\000\002\112\004\000\002\151\003" +
    "\000\002\151\005\000\002\154\005\000\002\154\005\000" +
    "\002\154\005\000\002\152\003\000\002\113\003\000\002" +
    "\113\003\000\002\205\003\000\002\205\003\000\002\206" +
    "\003\000\002\206\004\000\002\206\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03b8\000\002\001\ufffb\000\004\002\u03ba\001\002\000" +
    "\252\003\133\004\162\005\175\006\122\007\011\010\071" +
    "\011\037\013\067\015\106\020\145\021\024\022\140\023" +
    "\134\024\050\026\036\030\115\032\176\035\116\037\146" +
    "\043\062\044\137\045\103\046\123\047\153\050\155\051" +
    "\013\052\045\054\173\056\031\057\012\061\111\062\166" +
    "\063\034\064\064\065\035\066\161\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\106\073" +
    "\111\112\112\144\113\044\114\075\115\026\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\146\010" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\046\217\070\220\020\224" +
    "\170\227\114\230\126\231\065\232\110\234\136\236\132" +
    "\001\001\000\002\001\ufeb0\000\004\224\u03b7\001\002\000" +
    "\002\001\uffca\000\002\001\ufeb4\000\006\013\u03ac\227\u03ad" +
    "\001\002\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\ufe2b\000\004\224\u03a3\001" +
    "\002\000\002\001\ufef4\000\002\001\ufee5\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\004\065\u03a1\001\002\000\070\034\u0129\125" +
    "\u0121\126\u0130\127\u011a\145\u011e\146\u03a0\147\u011b\150\u012a" +
    "\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157" +
    "\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125" +
    "\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001" +
    "\002\000\004\210\u039d\001\ufe8d\000\002\001\ufeae\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\002\001\ufe6c\000\234\003\133\004" +
    "\162\005\175\006\122\007\011\010\071\011\222\013\067" +
    "\015\106\020\145\021\024\022\140\023\134\024\050\026" +
    "\036\030\115\032\176\035\116\037\146\043\062\044\137" +
    "\045\103\046\307\050\155\051\013\052\045\054\173\056" +
    "\303\057\012\061\111\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\106" +
    "\073\111\305\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\040\071" +
    "\u0114\131\u010b\132\u010f\133\u010c\134\u0116\135\u010e\136\u0115" +
    "\137\u0111\140\u0113\141\u010d\142\u010a\143\u0110\144\u0112\176" +
    "\ufe80\177\ufe80\001\ufe82\000\002\001\uffb5\000\014\011\222" +
    "\020\u01db\114\u0390\116\063\224\u01da\001\002\000\154\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\002\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\004\224\u0389" +
    "\001\002\000\002\001\uffaf\000\004\224\u0379\001\002\000" +
    "\004\226\u0378\001\uffff\000\014\013\067\017\u0376\103\273" +
    "\104\u02bc\105\u02bb\001\002\000\154\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\002\001\ufe70\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\002\001\ufeaf" +
    "\000\004\106\u035e\001\002\000\006\013\u0355\046\u01ce\001" +
    "\ufecc\000\004\210\u0352\001\ufe6f\000\004\224\u034a\001\002" +
    "\000\002\001\ufeac\000\004\210\u0347\001\ufe68\000\004\011" +
    "\u033d\001\002\000\002\001\ufeab\000\002\001\ufe7f\000\004" +
    "\224\u033a\001\002\000\156\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\153\u0327\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\ufe55\000" +
    "\024\011\222\013\067\074\014\111\u01a9\114\u01a5\116\063" +
    "\210\057\216\220\227\114\001\002\000\012\106\u0150\110" +
    "\ufe71\210\u0151\224\ufe7a\001\ufe6e\000\156\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\146\u0323\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\002\001\ufffd\000\004\224\u0320\001\002\000" +
    "\012\013\067\017\u031e\104\u02bc\105\u02bb\001\ufebc\000\004" +
    "\110\u0319\001\002\000\002\001\ufe30\000\004\065\u0318\001" +
    "\002\000\002\001\ufeb3\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\002" +
    "\001\uffea\000\002\001\ufeef\000\006\011\222\116\063\001" +
    "\002\000\004\210\u0172\001\ufee4\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\002" +
    "\000\154\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\227\114\230\126\231\065" +
    "\232\110\236\132\001\002\000\012\013\067\074\014\210" +
    "\057\227\u015a\001\002\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\004" +
    "\011\u030e\001\002\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\002\001" +
    "\ufe95\000\002\001\uffd1\000\024\011\222\013\067\074\014" +
    "\111\u0144\114\u013d\116\063\210\057\216\220\227\114\001" +
    "\002\000\012\013\067\017\u02bd\104\u02bc\105\u02bb\001\002" +
    "\000\004\224\u0301\001\002\000\012\011\222\106\u02f9\114" +
    "\374\116\063\001\002\000\006\176\u02f7\177\u02f8\001\002" +
    "\000\004\106\u015b\001\ufe5c\000\004\224\u02e0\001\002\000" +
    "\154\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\002\001\ufff9\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\002\001\ufeb5\000" +
    "\004\153\311\001\uffb4\000\002\001\ufe91\000\002\001\uffe5" +
    "\000\012\013\067\017\u02bd\104\u02bc\105\u02bb\001\002\000" +
    "\002\001\ufe67\000\004\011\u0268\001\002\000\006\124\u0263" +
    "\146\u0264\001\002\000\002\001\ufead\000\002\001\uffc6\000" +
    "\234\003\133\004\162\005\175\006\122\007\011\010\071" +
    "\011\037\013\067\015\106\020\145\021\024\022\140\023" +
    "\134\024\050\026\036\030\115\032\176\035\116\037\146" +
    "\043\062\044\137\045\103\046\307\050\155\051\013\052" +
    "\045\054\173\056\303\057\012\061\111\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\106\073\111\305\112\144\113\044\114\075" +
    "\115\026\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\146\010\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\046" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\002\001\ufe69\000\002\001\uffac\000\156\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\146\u025a\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\002\001" +
    "\ufff8\000\154\004\162\006\122\007\011\010\071\011\222" +
    "\013\067\020\145\035\116\046\307\062\166\063\034\073" +
    "\171\074\014\075\023\076\051\077\054\100\150\101\006" +
    "\102\040\111\305\112\144\113\044\114\075\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\002" +
    "\000\002\001\ufeaa\000\004\210\u0250\001\ufeb2\000\004\224" +
    "\u0237\001\002\000\002\001\uffb6\000\002\001\ufeb1\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\004\011" +
    "\u0232\001\002\000\004\146\u0231\001\002\000\156\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\146\u022c\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\002\001\ufe83\000\004\110\u022a\001" +
    "\002\000\002\001\ufe84\000\002\001\uffa9\000\004\224\u0225" +
    "\001\ufebf\000\010\110\ufecb\114\227\224\u01ab\001\ufe94\000" +
    "\154\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\002\001\ufffa\000\004\224\u021e" +
    "\001\002\000\004\071\u0213\001\ufef2\000\156\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\051\013\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\002\000\004\224\u01ff\001\002\000\024\011\222" +
    "\013\067\074\014\111\u01a9\114\u01a5\116\063\210\057\216" +
    "\220\227\114\001\002\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\002" +
    "\001\ufffc\000\004\224\u01df\001\002\000\004\224\177\001" +
    "\002\000\006\011\203\116\201\001\002\000\006\124\277" +
    "\225\276\001\002\000\002\001\ufe2e\000\004\131\204\001" +
    "\002\000\002\001\ufe2f\000\056\006\122\007\011\010\071" +
    "\011\222\020\221\074\212\075\023\076\051\077\054\100" +
    "\150\101\006\102\205\111\225\112\144\113\044\114\211" +
    "\116\063\166\223\167\207\210\214\216\220\236\132\001" +
    "\002\000\006\017\274\103\273\001\002\000\002\001\ufea1" +
    "\000\056\006\122\007\011\010\071\011\222\020\221\074" +
    "\212\075\023\076\051\077\054\100\150\101\006\102\205" +
    "\111\225\112\144\113\044\114\211\116\063\166\223\167" +
    "\207\210\214\216\220\236\132\001\002\000\002\001\ufe98" +
    "\000\006\011\222\116\063\001\002\000\004\224\266\001" +
    "\002\000\004\210\263\001\ufe9a\000\056\006\122\007\011" +
    "\010\071\011\222\020\221\074\212\075\023\076\051\077" +
    "\054\100\150\101\006\102\205\111\225\112\144\113\044" +
    "\114\211\116\063\166\223\167\207\210\214\216\220\236" +
    "\132\001\ufe8c\000\004\210\245\001\ufe99\000\004\110\242" +
    "\001\002\000\002\001\uff94\000\002\001\ufecc\000\004\210" +
    "\237\001\ufeb2\000\002\001\uffff\000\056\006\122\007\011" +
    "\010\071\011\222\020\221\074\212\075\023\076\051\077" +
    "\054\100\150\101\006\102\205\111\225\112\144\113\044" +
    "\114\211\116\063\166\223\167\207\210\214\216\220\236" +
    "\132\001\002\000\004\210\233\001\ufe9b\000\004\114\231" +
    "\001\002\000\006\110\ufecb\114\227\001\ufea0\000\004\011" +
    "\230\001\002\000\002\001\ufffe\000\006\011\222\116\063" +
    "\001\002\000\006\110\ufeca\114\227\001\ufe9f\000\056\006" +
    "\122\007\011\010\071\011\222\020\221\074\212\075\023" +
    "\076\051\077\054\100\150\101\006\102\205\111\225\112" +
    "\144\113\044\114\211\116\063\166\223\167\207\210\214" +
    "\216\220\236\132\001\002\000\004\211\235\001\002\000" +
    "\002\001\ufea5\000\002\001\ufe9d\000\056\006\122\007\011" +
    "\010\071\011\222\020\221\074\212\075\023\076\051\077" +
    "\054\100\150\101\006\102\205\111\225\112\144\113\044" +
    "\114\211\116\063\166\223\167\207\210\214\216\220\236" +
    "\132\001\002\000\004\211\241\001\002\000\002\001\ufea3" +
    "\000\006\011\243\065\244\001\002\000\002\001\ufe97\000" +
    "\002\001\ufe96\000\056\006\122\007\011\010\071\011\222" +
    "\020\221\074\212\075\023\076\051\077\054\100\150\101" +
    "\006\102\205\111\225\112\144\113\044\114\211\116\063" +
    "\166\223\167\207\210\214\216\220\236\132\001\002\000" +
    "\004\211\247\001\002\000\002\001\ufea2\000\004\211\262" +
    "\001\002\000\004\124\255\001\ufe8a\000\004\072\253\001" +
    "\ufe85\000\056\006\122\007\011\010\071\011\222\020\221" +
    "\074\212\075\023\076\051\077\054\100\150\101\006\102" +
    "\205\111\225\112\144\113\044\114\211\116\063\166\223" +
    "\167\207\210\214\216\220\236\132\001\002\000\002\001" +
    "\ufe86\000\056\006\122\007\011\010\071\011\222\020\221" +
    "\074\212\075\023\076\051\077\054\100\150\101\006\102" +
    "\205\111\225\112\144\113\044\114\211\116\063\166\223" +
    "\167\207\210\214\216\220\236\132\001\ufe89\000\002\001" +
    "\ufe8b\000\004\072\260\001\ufe87\000\056\006\122\007\011" +
    "\010\071\011\222\020\221\074\212\075\023\076\051\077" +
    "\054\100\150\101\006\102\205\111\225\112\144\113\044" +
    "\114\211\116\063\166\223\167\207\210\214\216\220\236" +
    "\132\001\002\000\002\001\ufe88\000\002\001\ufea6\000\056" +
    "\006\122\007\011\010\071\011\222\020\221\074\212\075" +
    "\023\076\051\077\054\100\150\101\006\102\205\111\225" +
    "\112\144\113\044\114\211\116\063\166\223\167\207\210" +
    "\214\216\220\236\132\001\002\000\004\211\265\001\002" +
    "\000\002\001\ufea4\000\056\006\122\007\011\010\071\011" +
    "\222\020\221\074\212\075\023\076\051\077\054\100\150" +
    "\101\006\102\205\111\225\112\144\113\044\114\211\116" +
    "\063\166\223\167\207\210\214\216\220\236\132\001\ufe8c" +
    "\000\004\225\270\001\002\000\002\001\ufea7\000\006\110" +
    "\ufec9\114\227\001\ufe9e\000\002\001\ufe9c\000\002\001\ufea8" +
    "\000\004\103\275\001\002\000\002\001\ufea9\000\236\003" +
    "\133\004\162\005\175\006\122\007\011\010\071\011\037" +
    "\013\067\015\106\020\145\021\024\022\140\023\134\024" +
    "\050\026\036\030\115\032\176\035\116\037\146\043\062" +
    "\044\137\045\103\046\307\050\155\051\013\052\045\054" +
    "\173\056\303\057\012\061\111\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\106\073\111\305\112\144\113\044\114\075\115\026" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\146\010\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\046\224\170" +
    "\226\306\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\006\011\203\116\201\001\002\000\004\131\301" +
    "\001\002\000\056\006\122\007\011\010\071\011\222\020" +
    "\221\074\212\075\023\076\051\077\054\100\150\101\006" +
    "\102\205\111\225\112\144\113\044\114\211\116\063\166" +
    "\223\167\207\210\214\216\220\236\132\001\002\000\002" +
    "\001\uff93\000\006\020\u01db\224\u01da\001\002\000\002\001" +
    "\uffcb\000\004\114\374\001\002\000\002\001\uffea\000\004" +
    "\153\311\001\uffb4\000\002\001\uff96\000\002\001\uffb3\000" +
    "\004\224\313\001\002\000\020\011\222\074\314\111\321" +
    "\114\324\116\063\225\uff7e\235\320\001\uff77\000\002\001" +
    "\uff75\000\004\114\227\001\ufec8\000\006\013\364\153\363" +
    "\001\002\000\004\124\361\001\uff7f\000\002\001\uff74\000" +
    "\004\114\357\001\002\000\002\001\uff76\000\002\001\uff7d" +
    "\000\006\011\222\116\063\001\002\000\004\225\326\001" +
    "\002\000\004\056\327\001\ufedb\000\004\224\344\001\002" +
    "\000\004\106\331\001\002\000\002\001\uffea\000\252\003" +
    "\133\004\162\005\175\006\122\007\011\010\071\011\037" +
    "\013\067\015\106\020\145\021\024\022\140\023\134\024" +
    "\050\026\036\030\115\032\176\035\116\037\146\043\062" +
    "\044\137\045\103\046\123\050\155\051\013\052\045\054" +
    "\173\056\303\057\012\061\111\062\166\063\034\064\334" +
    "\065\035\066\161\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\106\073\107\336\111\305" +
    "\112\144\113\044\114\075\115\026\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\146\010\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\046\217\070\220\020\224\170\227" +
    "\114\230\126\231\065\232\110\234\136\236\132\001\002" +
    "\000\002\001\uffeb\000\004\224\341\001\002\000\002\001" +
    "\uffe8\000\002\001\ufee1\000\002\001\uffe7\000\002\001\uffe9" +
    "\000\004\225\342\001\002\000\004\146\343\001\002\000" +
    "\002\001\uffe6\000\006\013\347\153\345\001\002\000\004" +
    "\013\355\001\002\000\006\124\351\225\350\001\002\000" +
    "\002\001\ufed7\000\002\001\ufeda\000\006\013\353\153\352" +
    "\001\002\000\004\013\354\001\002\000\002\001\ufed9\000" +
    "\002\001\ufed8\000\002\001\ufed6\000\004\114\227\001\ufec6" +
    "\000\006\011\222\116\063\001\002\000\004\114\227\001" +
    "\ufec7\000\016\011\222\074\314\111\321\114\324\116\063" +
    "\235\320\001\uff77\000\002\001\uff7c\000\004\013\367\001" +
    "\002\000\004\131\365\001\uff7b\000\056\006\122\007\011" +
    "\010\071\011\222\020\221\074\212\075\023\076\051\077" +
    "\054\100\150\101\006\102\205\111\225\112\144\113\044" +
    "\114\211\116\063\166\223\167\207\210\214\216\220\236" +
    "\132\001\002\000\002\001\uff79\000\004\131\370\001\uff7a" +
    "\000\056\006\122\007\011\010\071\011\222\020\221\074" +
    "\212\075\023\076\051\077\054\100\150\101\006\102\205" +
    "\111\225\112\144\113\044\114\211\116\063\166\223\167" +
    "\207\210\214\216\220\236\132\001\002\000\002\001\uff78" +
    "\000\252\003\133\004\162\005\175\006\122\007\011\010" +
    "\071\011\037\013\067\015\106\020\145\021\024\022\140" +
    "\023\134\024\050\026\036\030\115\032\176\033\373\035" +
    "\116\037\146\043\062\044\137\045\103\046\123\050\155" +
    "\051\013\052\045\054\173\056\303\057\012\061\111\062" +
    "\166\063\034\064\334\065\035\066\161\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\106" +
    "\073\111\305\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\217\070\220\020" +
    "\224\170\227\114\230\126\231\065\232\110\234\136\236" +
    "\132\001\002\000\002\001\uff95\000\006\011\222\116\063" +
    "\001\002\000\010\110\ufeca\114\227\224\376\001\ufe93\000" +
    "\156\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\153\u0100\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\uff72\000\004\225\u01d8\001\002" +
    "\000\024\011\222\013\067\074\014\111\u01a9\114\u01a5\116" +
    "\063\210\057\216\220\227\114\001\002\000\066\034\u0129" +
    "\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151" +
    "\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122" +
    "\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166" +
    "\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\002" +
    "\000\044\071\u0114\124\uff70\131\u010b\132\u010f\133\u010c\134" +
    "\u0116\135\u010e\136\u0115\137\u0111\140\u0113\141\u010d\142\u010a" +
    "\143\u0110\144\u0112\176\ufe80\177\ufe80\225\uff70\001\ufe82\000" +
    "\004\046\u01ce\001\ufecc\000\004\124\u0106\001\uff73\000\006" +
    "\124\uff71\225\uff71\001\ufe83\000\156\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\153\u0107\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\024\011\222\013\067\074\014\111\u01a9\114\u01a5" +
    "\116\063\210\057\216\220\227\114\001\002\000\044\071" +
    "\u0114\124\uff6d\131\u010b\132\u010f\133\u010c\134\u0116\135\u010e" +
    "\136\u0115\137\u0111\140\u0113\141\u010d\142\u010a\143\u0110\144" +
    "\u0112\176\ufe80\177\ufe80\225\uff6d\001\ufe82\000\006\124\uff6e" +
    "\225\uff6e\001\ufe83\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\156\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\153\u01a2\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\154\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\002\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\154\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\111\305\112\144" +
    "\113\044\114\075\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\020\011\203\013\067\074\014\106\u014e\116\201" +
    "\210\057\227\114\001\002\000\154\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\154\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\060\034\u0129\145\u011e\147\u011b" +
    "\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\001\uff1f\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\154\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\111\305\112\144" +
    "\113\044\114\075\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\154\004\162\006\122\007\011\010\071\011\222" +
    "\013\067\020\145\035\116\046\307\062\166\063\034\073" +
    "\171\074\014\075\023\076\051\077\054\100\150\101\006" +
    "\102\040\111\305\112\144\113\044\114\075\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\002" +
    "\000\156\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\226\u0182\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\154\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\111\305\112\144" +
    "\113\044\114\075\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\154\004\162\006\122\007\011\010\071\011\222" +
    "\013\067\020\145\035\116\046\307\062\166\063\034\073" +
    "\171\074\014\075\023\076\051\077\054\100\150\101\006" +
    "\102\040\111\305\112\144\113\044\114\075\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\002" +
    "\000\154\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\227\114\230\126\231\065" +
    "\232\110\236\132\001\002\000\154\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\154\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\154\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\002\000\024\011\222\013\067\074\014\111\u0144" +
    "\114\u013d\116\063\210\057\216\220\227\114\001\002\000" +
    "\154\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\154\004\162\006\122\007\011\010" +
    "\071\011\222\013\067\020\145\035\116\046\307\062\166" +
    "\063\034\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\111\305\112\144\113\044\114\075" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\154\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\002\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\012\034\u0129\170" +
    "\u0127\171\u0126\172\u0119\001\uff09\000\062\034\u0129\127\u011a" +
    "\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154" +
    "\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f" +
    "\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\001\uff0e\000\034\034\u0129\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\ufefc\000\024" +
    "\034\u0129\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\001\ufef9\000\024\034\u0129\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\001\ufef7\000\024\034\u0129\164\u0128\165\u0125\166\u0131" +
    "\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\ufef8\000" +
    "\044\034\u0129\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff0c\000\052" +
    "\034\u0129\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\001\uff11\000\002\001\ufec4\000\004\110\u0175\001\002" +
    "\000\004\210\u0172\001\002\000\006\011\222\116\063\001" +
    "\002\000\010\106\u0150\110\ufe71\210\u0151\001\ufe6e\000\004" +
    "\110\u0165\001\ufec5\000\002\001\ufef6\000\002\001\ufec2\000" +
    "\012\013\067\074\014\210\057\227\u015a\001\002\000\004" +
    "\071\u0148\001\ufec3\000\004\114\u0146\001\002\000\004\114" +
    "\227\001\ufecb\000\006\011\222\116\063\001\002\000\004" +
    "\114\227\001\ufeca\000\020\011\203\013\067\074\014\106" +
    "\u014e\116\201\210\057\227\114\001\002\000\002\001\ufe5e" +
    "\000\002\001\ufe5f\000\002\001\ufec1\000\006\106\u015e\210" +
    "\u015f\001\ufec0\000\012\013\067\074\014\210\057\227\u015a" +
    "\001\002\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\006\106\u0150\210" +
    "\u0151\001\ufe7a\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\ufe65\000\066\034\u0129\125\u0121\126\u0130\127\u011a\145" +
    "\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\001\ufe64\000\004\211\u0154\001\002\000" +
    "\002\001\ufe6b\000\070\034\u0129\107\u0156\125\u0121\126\u0130" +
    "\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153" +
    "\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\002\000\002\001\ufe6a" +
    "\000\070\034\u0129\107\u0158\125\u0121\126\u0130\127\u011a\145" +
    "\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\001\002\000\002\001\ufe5d\000\006\106" +
    "\u0150\210\u0151\001\ufe79\000\004\106\u015b\001\ufe5b\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\070\034\u0129\107\u015d\125\u0121\126" +
    "\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123" +
    "\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161" +
    "\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120" +
    "\170\u0127\171\u0126\172\u0119\175\u011d\001\002\000\002\001" +
    "\ufe66\000\154\004\162\006\122\007\011\010\071\011\222" +
    "\013\067\020\145\035\116\046\307\062\166\063\034\073" +
    "\171\074\014\075\023\076\051\077\054\100\150\101\006" +
    "\102\040\111\305\112\144\113\044\114\075\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\ufe65" +
    "\000\004\211\u0161\001\002\000\002\001\ufe61\000\070\034" +
    "\u0129\107\u0163\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b" +
    "\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\001\002\000\002\001\ufe60\000\006\106\u0150\210\u0151" +
    "\001\ufe6d\000\006\013\067\227\114\001\002\000\006\106" +
    "\u016b\210\u016c\001\ufe78\000\006\013\067\227\u015a\001\002" +
    "\000\002\001\ufe73\000\002\001\ufe74\000\006\106\u016b\210" +
    "\u016c\001\ufe77\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\ufe65\000\004\211\u016e\001\002\000\002\001\ufe76\000" +
    "\070\034\u0129\107\u0170\125\u0121\126\u0130\127\u011a\145\u011e" +
    "\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155" +
    "\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c" +
    "\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172" +
    "\u0119\175\u011d\001\002\000\002\001\ufe75\000\004\114\227" +
    "\001\ufec9\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\ufe65\000\004\211\u0174\001" +
    "\002\000\002\001\ufedd\000\006\013\067\227\114\001\002" +
    "\000\002\001\ufe72\000\020\034\u0129\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\uff04\000\004\034\u0129" +
    "\001\uff07\000\004\034\u0129\001\uff06\000\020\034\u0129\166" +
    "\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff03" +
    "\000\034\034\u0129\160\u012e\161\u012d\162\u011f\163\u012c\164" +
    "\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119" +
    "\175\u011d\001\ufefb\000\046\034\u0129\153\u012b\154\u012f\155" +
    "\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c" +
    "\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172" +
    "\u0119\175\u011d\001\uff0b\000\034\034\u0129\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\ufefd\000\064\034\u0129" +
    "\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152" +
    "\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff10\000\012" +
    "\034\u0129\170\u0127\171\u0126\172\u0119\001\uff08\000\024\034" +
    "\u0129\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\001\ufefa\000\070\034\u0129\125\u0121\126" +
    "\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123" +
    "\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161" +
    "\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120" +
    "\170\u0127\171\u0126\172\u0119\175\u011d\226\u0184\001\002\000" +
    "\154\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\002\000\066\034\u0129\125\u0121\126\u0130" +
    "\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153" +
    "\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\ufef0\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\066\034\u0129\125\u0121\126\u0130\127\u011a\145" +
    "\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\001\ufef1\000\012\034\u0129\170\u0127\171" +
    "\u0126\172\u0119\001\uff0a\000\050\034\u0129\152\u0123\153\u012b" +
    "\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162" +
    "\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127" +
    "\171\u0126\172\u0119\175\u011d\001\uff0d\000\054\034\u0129\150" +
    "\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118" +
    "\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165" +
    "\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d" +
    "\001\uff12\000\060\034\u0129\145\u011e\147\u011b\150\u012a\151" +
    "\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122" +
    "\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166" +
    "\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff0f" +
    "\000\004\034\u0129\001\uff05\000\034\034\u0129\160\u012e\161" +
    "\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120" +
    "\170\u0127\171\u0126\172\u0119\175\u011d\001\ufefe\000\060\034" +
    "\u0129\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b" +
    "\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162" +
    "\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127" +
    "\171\u0126\172\u0119\175\u011d\001\uff1d\000\004\224\u0196\001" +
    "\ufe7e\000\010\106\u015e\210\u015f\224\u018f\001\ufe7d\000\156" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\153\u0100\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\227\114\230\126\231\065" +
    "\232\110\236\132\001\uff72\000\004\225\u0191\001\002\000" +
    "\002\001\ufe63\000\004\210\u0193\001\ufe7b\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\ufe65\000\004\211\u0195\001\002\000\002\001\ufe62\000" +
    "\156\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\153\u0100\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\uff72\000\004\225\u0198\001\002" +
    "\000\002\001\ufe63\000\004\210\u0193\001\ufe7c\000\060\034" +
    "\u0129\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b" +
    "\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162" +
    "\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127" +
    "\171\u0126\172\u0119\175\u011d\001\uff1b\000\060\034\u0129\145" +
    "\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\001\uff17\000\060\034\u0129\145\u011e\147" +
    "\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124" +
    "\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164" +
    "\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119" +
    "\175\u011d\001\uff1c\000\060\034\u0129\145\u011e\147\u011b\150" +
    "\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118" +
    "\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165" +
    "\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d" +
    "\001\uff18\000\060\034\u0129\145\u011e\147\u011b\150\u012a\151" +
    "\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122" +
    "\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166" +
    "\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff21" +
    "\000\060\034\u0129\145\u011e\147\u011b\150\u012a\151\u011c\152" +
    "\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff1e\000\060" +
    "\034\u0129\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153" +
    "\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\uff1a\000\060\034\u0129" +
    "\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154" +
    "\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f" +
    "\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\001\uff20\000\026\011\222\013\067" +
    "\074\014\111\u01a9\114\u01a5\116\063\210\057\212\u01a8\216" +
    "\220\227\114\001\002\000\060\034\u0129\145\u011e\147\u011b" +
    "\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\001\uff25\000\004\110\u01c2\001\002\000\006\011\222" +
    "\116\063\001\002\000\004\110\u01b5\001\002\000\004\071" +
    "\u0114\001\uff24\000\024\011\222\013\067\074\014\111\u0144" +
    "\114\u013d\116\063\210\057\216\220\227\114\001\002\000" +
    "\004\114\u01ae\001\002\000\006\114\227\224\u01ab\001\ufecb" +
    "\000\156\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\153\u0100\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\uff72\000\004\225\u01ad\001" +
    "\002\000\002\001\ufed5\000\006\011\222\116\063\001\002" +
    "\000\006\114\227\224\376\001\ufeca\000\004\224\u01b2\001" +
    "\ufeb9\000\002\001\uff23\000\156\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\153\u0100\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\uff72" +
    "\000\004\225\u01b4\001\002\000\002\001\ufeb8\000\014\011" +
    "\203\013\067\106\u014e\116\201\227\114\001\002\000\004" +
    "\224\u01bb\001\002\000\004\224\u01b8\001\ufe73\000\156\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\153\u0100\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\u0103\224\170\227\114\230\126\231\065\232" +
    "\110\236\132\001\uff72\000\004\225\u01ba\001\002\000\002" +
    "\001\ufed1\000\156\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\153" +
    "\u0100\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\uff72\000\004\225" +
    "\u01bd\001\002\000\002\001\ufed2\000\006\114\227\224\u01bf" +
    "\001\ufec9\000\156\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\153" +
    "\u0100\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\uff72\000\004\225" +
    "\u01c1\001\002\000\002\001\ufed3\000\014\011\203\013\067" +
    "\106\u014e\116\201\227\114\001\002\000\004\224\u01c8\001" +
    "\002\000\004\224\u01c5\001\ufe72\000\156\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\153\u0100\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\uff72\000\004\225\u01c7\001\002\000\002\001\ufed0\000" +
    "\156\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\153\u0100\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\uff72\000\004\225\u01ca\001\002" +
    "\000\002\001\ufecf\000\060\034\u0129\145\u011e\147\u011b\150" +
    "\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118" +
    "\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165" +
    "\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d" +
    "\001\uff19\000\002\001\uff6c\000\004\071\u0114\001\ufe81\000" +
    "\004\153\311\001\uffb4\000\004\224\u01d0\001\002\000\020" +
    "\011\222\074\314\111\321\114\324\116\063\225\uff7e\235" +
    "\320\001\uff77\000\004\225\u01d2\001\002\000\004\056\327" +
    "\001\ufedb\000\004\106\u01d4\001\002\000\002\001\uffea\000" +
    "\252\003\133\004\162\005\175\006\122\007\011\010\071" +
    "\011\037\013\067\015\106\020\145\021\024\022\140\023" +
    "\134\024\050\026\036\030\115\032\176\035\116\037\146" +
    "\043\062\044\137\045\103\046\123\050\155\051\013\052" +
    "\045\054\173\056\303\057\012\061\111\062\166\063\034" +
    "\064\334\065\035\066\161\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\106\073\107\u01d6" +
    "\111\305\112\144\113\044\114\075\115\026\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\146\010" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\046\217\070\220\020\224" +
    "\170\227\114\230\126\231\065\232\110\234\136\236\132" +
    "\001\002\000\002\001\ufee0\000\002\001\uff6f\000\002\001" +
    "\ufed4\000\004\146\u01de\001\002\000\004\020\u01dc\001\002" +
    "\000\002\001\uffb8\000\004\225\u01dd\001\002\000\002\001" +
    "\uffb7\000\002\001\uffcf\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\070" +
    "\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150" +
    "\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118" +
    "\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165" +
    "\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d" +
    "\225\u01e1\001\002\000\236\003\133\004\162\005\175\006" +
    "\122\007\011\010\071\011\037\013\067\015\106\020\145" +
    "\021\024\022\140\023\134\024\050\026\036\030\115\032" +
    "\176\035\116\037\146\043\062\044\137\045\103\046\307" +
    "\050\155\051\013\052\045\054\173\056\303\057\012\061" +
    "\111\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\106\073\111\305\112" +
    "\144\113\044\114\075\115\026\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\146\010\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\046\224\170\226\u01e2\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\002\001\uffea\000" +
    "\002\001\uff87\000\006\214\u01e7\215\u01e6\001\uff83\000\002" +
    "\001\uffe2\000\234\003\133\004\162\005\175\006\122\007" +
    "\011\010\071\011\037\013\067\015\106\020\145\021\024" +
    "\022\140\023\134\024\050\026\036\030\115\032\176\035" +
    "\116\037\146\043\062\044\137\045\103\046\307\050\155" +
    "\051\013\052\045\054\173\056\303\057\012\061\111\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\106\073\111\305\112\144\113" +
    "\044\114\075\115\026\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\146\010\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\046\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\004\224\u01e8\001\002\000\154\004" +
    "\162\006\122\007\011\010\071\011\222\013\067\020\145" +
    "\035\116\046\307\062\166\063\034\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\111\305" +
    "\112\144\113\044\114\075\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\002\000\070\034\u0129\125\u0121\126\u0130\127\u011a" +
    "\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154" +
    "\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f" +
    "\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\225\u01ea\001\002\000\234\003\133" +
    "\004\162\005\175\006\122\007\011\010\071\011\037\013" +
    "\067\015\106\020\145\021\024\022\140\023\134\024\050" +
    "\026\036\030\115\032\176\035\116\037\146\043\062\044" +
    "\137\045\103\046\307\050\155\051\013\052\045\054\173" +
    "\056\303\057\012\061\111\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\106\073\111\305\112\144\113\044\114\075\115\026\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\146\010\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\046\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\002" +
    "\001\uff86\000\002\001\uff82\000\250\003\133\004\162\005" +
    "\175\006\122\007\011\010\071\011\037\013\067\015\106" +
    "\020\145\021\024\022\140\023\134\024\050\026\036\030" +
    "\115\032\176\035\116\037\146\043\062\044\137\045\103" +
    "\046\123\050\155\051\013\052\045\054\173\056\303\057" +
    "\012\061\111\062\166\063\034\064\334\065\035\066\161" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\106\073\111\305\112\144\113\044\114\075" +
    "\115\026\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\146\010\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\046" +
    "\217\070\220\020\224\170\227\114\230\126\231\065\232" +
    "\110\234\136\236\132\001\uff85\000\006\214\u01f1\215\u01f0" +
    "\001\uff81\000\004\213\u01f9\001\002\000\004\226\u01f7\001" +
    "\002\000\004\224\u01f2\001\002\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\002" +
    "\000\070\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\147" +
    "\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124" +
    "\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164" +
    "\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119" +
    "\175\u011d\225\u01f4\001\002\000\004\226\u01f5\001\002\000" +
    "\002\001\uffea\000\250\003\133\004\162\005\175\006\122" +
    "\007\011\010\071\011\037\013\067\015\106\020\145\021" +
    "\024\022\140\023\134\024\050\026\036\030\115\032\176" +
    "\035\116\037\146\043\062\044\137\045\103\046\123\050" +
    "\155\051\013\052\045\054\173\056\303\057\012\061\111" +
    "\062\166\063\034\064\334\065\035\066\161\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\106\073\111\305\112\144\113\044\114\075\115\026\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\146\010\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\046\217\070\220" +
    "\020\224\170\227\114\230\126\231\065\232\110\234\136" +
    "\236\132\001\uff84\000\002\001\uffea\000\250\003\133\004" +
    "\162\005\175\006\122\007\011\010\071\011\037\013\067" +
    "\015\106\020\145\021\024\022\140\023\134\024\050\026" +
    "\036\030\115\032\176\035\116\037\146\043\062\044\137" +
    "\045\103\046\123\050\155\051\013\052\045\054\173\056" +
    "\303\057\012\061\111\062\166\063\034\064\334\065\035" +
    "\066\161\073\171\074\014\075\023\076\051\077\054\100" +
    "\150\101\006\102\040\106\073\111\305\112\144\113\044" +
    "\114\075\115\026\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\146\010\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\046\217\070\220\020\224\170\227\114\230\126\231" +
    "\065\232\110\234\136\236\132\001\uff80\000\004\146\u01fa" +
    "\001\002\000\002\001\uffe1\000\070\034\u0129\125\u0121\126" +
    "\u0130\127\u011a\145\u011e\146\u01fc\147\u011b\150\u012a\151\u011c" +
    "\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160" +
    "\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131" +
    "\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\002\000" +
    "\002\001\uffc8\000\002\001\uff13\000\004\071\u0114\001\ufe80" +
    "\000\026\011\222\013\067\073\u0204\074\014\111\u01a9\114" +
    "\u01a5\116\063\210\057\216\220\227\114\001\ufe56\000\002" +
    "\001\ufe57\000\006\124\u0208\225\u020a\001\002\000\002\001" +
    "\ufe59\000\004\071\u0114\001\ufe58\000\004\224\u0205\001\002" +
    "\000\026\011\222\013\067\073\u0204\074\014\111\u01a9\114" +
    "\u01a5\116\063\210\057\216\220\227\114\001\ufe56\000\006" +
    "\124\u0208\225\u0207\001\002\000\002\001\uffa2\000\026\011" +
    "\222\013\067\073\u0204\074\014\111\u01a9\114\u01a5\116\063" +
    "\210\057\216\220\227\114\001\ufe56\000\002\001\ufe5a\000" +
    "\004\131\u020b\001\002\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\060" +
    "\034\u0129\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153" +
    "\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\uff26\000\004\225\u0212" +
    "\001\ufef4\000\070\034\u0129\125\u0121\126\u0130\127\u011a\145" +
    "\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\225\u0211\001\002\000\004\225\u0210\001" +
    "\002\000\002\001\ufef3\000\002\001\ufef5\000\002\001\uff2c" +
    "\000\020\011\203\013\067\074\014\106\u014e\116\201\210" +
    "\057\227\114\001\002\000\004\224\u021a\001\uff2b\000\010" +
    "\106\u015e\210\u015f\224\u0216\001\uff2a\000\156\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\111\305\112\144" +
    "\113\044\114\075\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\153\u0100\166\120\167\077\173\164" +
    "\174\017\176\060\177\172\200\032\201\151\202\043\203" +
    "\143\204\104\205\152\206\102\207\041\210\057\212\107" +
    "\216\u0103\224\170\227\114\230\126\231\065\232\110\236" +
    "\132\001\uff72\000\004\225\u0218\001\002\000\002\001\ufe63" +
    "\000\004\210\u0193\001\uff28\000\156\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\153\u0100\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\uff72\000\004\225\u021c\001\002\000\002\001\ufe63\000\004" +
    "\210\u0193\001\uff29\000\024\011\222\013\067\074\014\111" +
    "\u01a9\114\u01a5\116\063\210\057\216\220\227\114\001\002" +
    "\000\004\071\u0114\001\ufe35\000\006\124\u0222\225\u0221\001" +
    "\002\000\002\001\ufe3c\000\024\011\222\013\067\074\014" +
    "\111\u01a9\114\u01a5\116\063\210\057\216\220\227\114\001" +
    "\002\000\004\071\u0114\001\ufe34\000\004\034\u0129\001\uff00" +
    "\000\156\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\225\u0228\227\114\230\126" +
    "\231\065\232\110\236\132\001\002\000\002\001\ufee7\000" +
    "\070\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b" +
    "\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\225\u0229\001\002\000\002\001\ufebe\000\002\001\ufebd" +
    "\000\014\011\u022b\013\067\106\u014e\116\201\227\114\001" +
    "\002\000\004\224\ufe2f\001\ufe31\000\002\001\uffd8\000\042" +
    "\071\u0114\131\u010b\132\u010f\133\u010c\134\u0116\135\u010e\136" +
    "\u0115\137\u0111\140\u0113\141\u010d\142\u010a\143\u0110\144\u0112" +
    "\146\u0230\176\ufe80\177\ufe80\001\ufe82\000\004\146\u022f\001" +
    "\ufe83\000\002\001\uffd7\000\002\001\uffd6\000\002\001\uffd5" +
    "\000\004\131\u0233\001\002\000\056\006\122\007\011\010" +
    "\071\011\222\020\221\074\212\075\023\076\051\077\054" +
    "\100\150\101\006\102\205\111\225\112\144\113\044\114" +
    "\211\116\063\166\223\167\207\210\214\216\220\236\132" +
    "\001\002\000\002\001\uff33\000\002\001\ufee9\000\002\001" +
    "\ufeed\000\154\004\162\006\122\007\011\010\071\011\222" +
    "\013\067\020\145\035\116\046\307\062\166\063\034\073" +
    "\171\074\014\075\023\076\051\077\054\100\150\101\006" +
    "\102\040\111\305\112\144\113\044\114\075\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\070\034\u0129\125\u0121" +
    "\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152" +
    "\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\225\u0239\001\002" +
    "\000\006\106\u023b\226\u023c\001\002\000\002\001\uffdd\000" +
    "\004\146\u024c\001\uff8e\000\004\146\u023e\001\uff8e\000\010" +
    "\040\u024a\041\u0241\042\u0242\001\002\000\002\001\uff8e\000" +
    "\010\040\u0240\041\u0241\042\u0242\001\002\000\002\001\uff8f" +
    "\000\154\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\227\114\230\126\231\065" +
    "\232\110\236\132\001\002\000\006\146\u0244\226\u0245\001" +
    "\002\000\002\001\uffea\000\002\001\uff8a\000\002\001\uff8b" +
    "\000\250\003\133\004\162\005\175\006\122\007\011\010" +
    "\071\011\037\013\067\015\106\020\145\021\024\022\140" +
    "\023\134\024\050\026\036\030\115\032\176\035\116\037" +
    "\146\043\062\044\137\045\103\046\123\050\155\051\013" +
    "\052\045\054\173\056\303\057\012\061\111\062\166\063" +
    "\034\064\334\065\035\066\161\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\111" +
    "\305\112\144\113\044\114\075\115\026\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\146\010\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\046\217\070\220\020\224\170" +
    "\227\114\230\126\231\065\232\110\234\136\236\132\001" +
    "\uff8c\000\072\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e" +
    "\146\u0244\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154" +
    "\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f" +
    "\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\226\u0245\001\002\000\002\001\uffea" +
    "\000\250\003\133\004\162\005\175\006\122\007\011\010" +
    "\071\011\037\013\067\015\106\020\145\021\024\022\140" +
    "\023\134\024\050\026\036\030\115\032\176\035\116\037" +
    "\146\043\062\044\137\045\103\046\123\050\155\051\013" +
    "\052\045\054\173\056\303\057\012\061\111\062\166\063" +
    "\034\064\334\065\035\066\161\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\111" +
    "\305\112\144\113\044\114\075\115\026\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\146\010\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\046\217\070\220\020\224\170" +
    "\227\114\230\126\231\065\232\110\234\136\236\132\001" +
    "\uff8d\000\002\001\uff90\000\010\041\u0241\042\u0242\107\u024f" +
    "\001\002\000\002\001\uff8e\000\010\041\u0241\042\u0242\107" +
    "\u024e\001\002\000\002\001\uff91\000\002\001\uff92\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\070\034\u0129\125\u0121\126\u0130\127" +
    "\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b" +
    "\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162" +
    "\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127" +
    "\171\u0126\172\u0119\175\u011d\211\u0252\001\002\000\002\001" +
    "\ufeb7\000\002\001\ufeeb\000\066\034\u0129\125\u0121\126\u0130" +
    "\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153" +
    "\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\ufe37\000\066\034\u0129" +
    "\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151" +
    "\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122" +
    "\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166" +
    "\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff31" +
    "\000\006\124\u0257\146\u0258\001\002\000\154\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\111\305\112\144" +
    "\113\044\114\075\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\002\000\002\001\uffd2\000\066\034\u0129\125\u0121\126\u0130" +
    "\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153" +
    "\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d" +
    "\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170" +
    "\u0127\171\u0126\172\u0119\175\u011d\001\uff32\000\002\001\uffda" +
    "\000\070\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\146" +
    "\u025c\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\001\002\000\002\001\uffd9\000\004\024" +
    "\u025e\001\002\000\004\224\u025f\001\002\000\154\004\162" +
    "\006\122\007\011\010\071\011\222\013\067\020\145\035" +
    "\116\046\307\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\111\305\112" +
    "\144\113\044\114\075\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\166\120\167\077\173\164\174" +
    "\017\176\060\177\172\200\032\201\151\202\043\203\143" +
    "\204\104\205\152\206\102\207\041\210\057\212\107\216" +
    "\u0103\224\170\227\114\230\126\231\065\232\110\236\132" +
    "\001\002\000\070\034\u0129\125\u0121\126\u0130\127\u011a\145" +
    "\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f" +
    "\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163" +
    "\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126" +
    "\172\u0119\175\u011d\225\u0261\001\002\000\004\146\u0262\001" +
    "\002\000\002\001\uffdf\000\004\011\u0265\001\002\000\002" +
    "\001\ufff2\000\004\131\u0266\001\002\000\056\006\122\007" +
    "\011\010\071\011\222\020\221\074\212\075\023\076\051" +
    "\077\054\100\150\101\006\102\205\111\225\112\144\113" +
    "\044\114\211\116\063\166\223\167\207\210\214\216\220" +
    "\236\132\001\002\000\002\001\uff34\000\004\067\u026a\001" +
    "\uffa8\000\004\106\u026f\001\002\000\012\011\222\111\321" +
    "\114\324\116\063\001\002\000\004\124\u026d\001\uffa7\000" +
    "\002\001\uffa4\000\012\011\222\111\321\114\324\116\063" +
    "\001\002\000\002\001\uffa3\000\002\001\uff61\000\030\047" +
    "\153\056\u027e\060\u0281\107\u027b\115\u027a\216\u027d\217\u0274" +
    "\220\u0275\221\u0278\222\u0273\223\u027c\001\uff42\000\004\046" +
    "\u02ad\001\002\000\002\001\uff5c\000\002\001\uff3d\000\002" +
    "\001\uff3a\000\002\001\uff39\000\002\001\uff62\000\020\046" +
    "\uff41\216\u027d\217\u0274\220\u0275\221\u0278\222\u0273\223\u027c" +
    "\001\uff44\000\002\001\uff3c\000\002\001\uff40\000\234\003" +
    "\133\004\162\005\175\006\122\007\011\010\071\011\222" +
    "\013\067\015\106\020\145\021\024\022\140\023\134\024" +
    "\050\026\036\030\115\032\176\035\116\037\146\043\062" +
    "\044\137\045\103\046\307\050\155\051\013\052\045\054" +
    "\173\056\303\057\012\061\111\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\106\073\111\305\112\144\113\044\114\075\115\026" +
    "\116\063\117\033\120\100\121\056\122\142\123\121\130" +
    "\072\146\010\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\046\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\002\001\uffb0\000\002\001\uff3e\000\002\001\uff3b\000\012" +
    "\011\222\111\321\114\324\116\063\001\002\000\004\013" +
    "\u0283\001\002\000\006\124\u0263\146\u0282\001\002\000\002" +
    "\001\uff43\000\002\001\uff5f\000\004\131\u028a\001\uff36\000" +
    "\006\124\u0285\146\u0286\001\002\000\004\013\u0287\001\002" +
    "\000\002\001\uff60\000\004\131\u0288\001\uff38\000\056\006" +
    "\122\007\011\010\071\011\222\020\221\074\212\075\023" +
    "\076\051\077\054\100\150\101\006\102\205\111\225\112" +
    "\144\113\044\114\211\116\063\166\223\167\207\210\214" +
    "\216\220\236\132\001\002\000\002\001\uff37\000\056\006" +
    "\122\007\011\010\071\011\222\020\221\074\212\075\023" +
    "\076\051\077\054\100\150\101\006\102\205\111\225\112" +
    "\144\113\044\114\211\116\063\166\223\167\207\210\214" +
    "\216\220\236\132\001\002\000\002\001\uff35\000\010\106" +
    "\u028f\124\u028e\146\u0291\001\002\000\002\001\uff5a\000\012" +
    "\011\222\111\321\114\324\116\063\001\002\000\012\011" +
    "\u029a\111\321\114\324\116\063\001\uff56\000\002\001\uff5b" +
    "\000\002\001\uff58\000\004\036\u02a6\001\002\000\004\146" +
    "\u02a5\001\002\000\012\011\u029a\111\321\114\324\116\063" +
    "\001\uff55\000\004\107\u02a3\001\002\000\004\233\u029e\001" +
    "\uff4c\000\004\110\u029c\001\002\000\002\001\uff54\000\004" +
    "\146\u029b\001\002\000\004\036\uff4d\001\uffff\000\002\001" +
    "\uff52\000\004\011\u029d\001\002\000\002\001\uff4b\000\012" +
    "\011\222\111\321\114\324\116\063\001\002\000\004\124" +
    "\u02a1\001\uff50\000\002\001\uff4f\000\012\011\222\111\321" +
    "\114\324\116\063\001\002\000\002\001\uff4e\000\002\001" +
    "\uff57\000\002\001\uff53\000\002\001\uff51\000\016\216\u027d" +
    "\217\u0274\220\u0275\221\u0278\222\u0273\223\u027c\001\uff48\000" +
    "\004\011\u02a9\001\002\000\004\146\uff49\001\uff47\000\002" +
    "\001\uff4a\000\002\001\uff59\000\002\001\uff5d\000\002\001" +
    "\uff3f\000\004\153\311\001\uffb4\000\006\011\203\116\201" +
    "\001\002\000\004\224\u02b0\001\002\000\020\011\222\074" +
    "\314\111\321\114\324\116\063\225\uff7e\235\320\001\uff77" +
    "\000\004\225\u02b2\001\002\000\006\106\u02b4\146\u02b5\001" +
    "\002\000\002\001\uff5e\000\002\001\uffea\000\002\001\uff46" +
    "\000\252\003\133\004\162\005\175\006\122\007\011\010" +
    "\071\011\037\013\067\015\106\020\145\021\024\022\140" +
    "\023\134\024\050\026\036\030\115\032\176\035\116\037" +
    "\146\043\062\044\137\045\103\046\123\050\155\051\013" +
    "\052\045\054\173\056\303\057\012\061\111\062\166\063" +
    "\034\064\334\065\035\066\161\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\107" +
    "\u02b7\111\305\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\217\070\220\020" +
    "\224\170\227\114\230\126\231\065\232\110\234\136\236" +
    "\132\001\002\000\002\001\uff45\000\006\071\u02ce\210\u02cd" +
    "\001\ufe46\000\016\013\067\016\u02cb\017\u02cc\104\u02bc\105" +
    "\u02bb\230\u02ca\001\002\000\002\001\ufe48\000\024\011\222" +
    "\013\067\074\014\111\u01a9\114\u01a5\116\063\210\057\216" +
    "\220\227\114\001\002\000\156\004\162\006\122\007\011" +
    "\010\071\011\222\012\u02c0\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\002" +
    "\000\010\013\067\104\u02bc\105\u02bb\001\002\000\002\001" +
    "\ufe47\000\070\034\u0129\107\u02c6\125\u0121\126\u0130\127\u011a" +
    "\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154" +
    "\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f" +
    "\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\001\002\000\006\107\u02c1\210\u02c2" +
    "\001\002\000\002\001\ufe41\000\154\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\070\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b" +
    "\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\211\u02c4\001\002\000\004\107\u02c5\001\002\000\002" +
    "\001\ufe42\000\002\001\ufe43\000\006\071\u0114\107\u02c8\001" +
    "\002\000\002\001\ufe40\000\002\001\ufe4b\000\002\001\ufe90" +
    "\000\002\001\ufe49\000\002\001\ufe4a\000\012\011\203\013" +
    "\067\014\u02d3\116\201\001\002\000\006\011\203\116\201" +
    "\001\002\000\002\001\ufe44\000\002\001\ufe3d\000\004\211" +
    "\u02d4\001\002\000\002\001\ufe3f\000\002\001\ufe3e\000\002" +
    "\001\ufe45\000\010\011\203\116\201\224\313\001\002\000" +
    "\004\224\u02d7\001\002\000\020\011\222\074\314\111\321" +
    "\114\324\116\063\225\uff7e\235\320\001\uff77\000\004\225" +
    "\u02d9\001\002\000\004\106\u02da\001\002\000\002\001\uffea" +
    "\000\252\003\133\004\162\005\175\006\122\007\011\010" +
    "\071\011\037\013\067\015\106\020\145\021\024\022\140" +
    "\023\134\024\050\026\036\030\115\032\176\035\116\037" +
    "\146\043\062\044\137\045\103\046\123\050\155\051\013" +
    "\052\045\054\173\056\303\057\012\061\111\062\166\063" +
    "\034\064\334\065\035\066\161\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\107" +
    "\u02dc\111\305\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\217\070\220\020" +
    "\224\170\227\114\230\126\231\065\232\110\234\136\236" +
    "\132\001\002\000\002\001\uffb2\000\066\034\u0129\125\u0121" +
    "\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152" +
    "\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\ufe36\000\012" +
    "\034\u0129\170\u0127\171\u0126\172\u0119\001\uff02\000\002\001" +
    "\uff22\000\154\004\162\006\122\007\011\010\071\011\222" +
    "\013\067\020\145\035\116\046\307\062\166\063\034\073" +
    "\171\074\014\075\023\076\051\077\054\100\150\101\006" +
    "\102\040\111\305\112\144\113\044\114\075\116\063\117" +
    "\033\120\100\121\056\122\142\123\121\130\072\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\042\036\uffa1\071\u0114" +
    "\131\u010b\132\u010f\133\u010c\134\u0116\135\u010e\136\u0115\137" +
    "\u0111\140\u0113\141\u010d\142\u010a\143\u0110\144\u0112\176\ufe80" +
    "\177\ufe80\001\ufe82\000\004\036\uffa0\001\ufe83\000\004\036" +
    "\u02e4\001\002\000\030\011\222\013\067\073\u0204\074\014" +
    "\111\u01a9\114\u01a5\116\063\153\u02e9\210\057\216\220\227" +
    "\114\001\002\000\004\072\u02f6\001\uff9e\000\002\001\uff9d" +
    "\000\004\225\u02f4\001\002\000\004\071\u0114\001\uff9c\000" +
    "\024\011\222\013\067\074\014\111\u01a9\114\u01a5\116\063" +
    "\210\057\216\220\227\114\001\002\000\030\011\222\013" +
    "\067\073\u0204\074\014\111\u01a9\114\u01a5\116\063\153\u02e9" +
    "\210\057\216\220\227\114\001\002\000\002\001\uff9e\000" +
    "\004\225\u02ed\001\002\000\236\003\133\004\162\005\175" +
    "\006\122\007\011\010\071\011\037\013\067\015\106\020" +
    "\145\021\024\022\140\023\134\024\050\026\036\030\115" +
    "\032\176\035\116\037\146\043\062\044\137\045\103\046" +
    "\307\050\155\051\013\052\045\054\173\056\303\057\012" +
    "\061\111\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\106\073\111\305" +
    "\112\144\113\044\114\075\115\026\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\146\010\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\046\224\170\226\u02ee\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\002\001\uffea" +
    "\000\002\001\uff98\000\002\001\uffcc\000\252\003\133\004" +
    "\162\005\175\006\122\007\011\010\071\011\037\013\067" +
    "\015\106\020\145\021\024\022\140\023\134\024\050\026" +
    "\036\030\115\031\u02f2\032\176\035\116\037\146\043\062" +
    "\044\137\045\103\046\123\050\155\051\013\052\045\054" +
    "\173\056\303\057\012\061\111\062\166\063\034\064\334" +
    "\065\035\066\161\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\106\073\111\305\112\144" +
    "\113\044\114\075\115\026\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\146\010\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\046\217\070\220\020\224\170\227\114\230" +
    "\126\231\065\232\110\234\136\236\132\001\002\000\002" +
    "\001\uff97\000\004\071\u0114\001\uff9b\000\236\003\133\004" +
    "\162\005\175\006\122\007\011\010\071\011\037\013\067" +
    "\015\106\020\145\021\024\022\140\023\134\024\050\026" +
    "\036\030\115\032\176\035\116\037\146\043\062\044\137" +
    "\045\103\046\307\050\155\051\013\052\045\054\173\056" +
    "\303\057\012\061\111\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\106" +
    "\073\111\305\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\224\170\226\u02ee" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\002\001\uffcd\000\002\001\uff9f\000\002\001\uff16\000\002" +
    "\001\uff14\000\002\001\ufffb\000\010\106\u02fb\114\227\146" +
    "\u02fc\001\002\000\002\001\ufffb\000\002\001\ufff6\000\254" +
    "\003\133\004\162\005\175\006\122\007\011\010\071\011" +
    "\037\013\067\015\106\020\145\021\024\022\140\023\134" +
    "\024\050\026\036\030\115\032\176\035\116\037\146\043" +
    "\062\044\137\045\103\046\123\047\153\050\155\051\013" +
    "\052\045\054\173\056\031\057\012\061\111\062\166\063" +
    "\034\064\064\065\035\066\161\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\107" +
    "\u02fe\111\112\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\217\070\220\020" +
    "\224\170\227\114\230\126\231\065\232\110\234\136\236" +
    "\132\001\002\000\002\001\ufff5\000\254\003\133\004\162" +
    "\005\175\006\122\007\011\010\071\011\037\013\067\015" +
    "\106\020\145\021\024\022\140\023\134\024\050\026\036" +
    "\030\115\032\176\035\116\037\146\043\062\044\137\045" +
    "\103\046\123\047\153\050\155\051\013\052\045\054\173" +
    "\056\031\057\012\061\111\062\166\063\034\064\064\065" +
    "\035\066\161\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\106\073\107\u0300\111\112\112" +
    "\144\113\044\114\075\115\026\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\146\010\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\046\217\070\220\020\224\170\227\114" +
    "\230\126\231\065\232\110\234\136\236\132\001\002\000" +
    "\002\001\ufff4\000\024\011\222\013\067\074\014\111\u01a9" +
    "\114\u01a5\116\063\210\057\216\220\227\114\001\002\000" +
    "\002\001\uffbb\000\004\071\u0114\001\uffb9\000\006\124\u0306" +
    "\225\u0305\001\002\000\004\146\u0308\001\002\000\024\011" +
    "\222\013\067\074\014\111\u01a9\114\u01a5\116\063\210\057" +
    "\216\220\227\114\001\002\000\002\001\uffba\000\002\001" +
    "\uffce\000\016\013\067\016\u02cb\017\u02cc\104\u02bc\105\u02bb" +
    "\232\u030a\001\002\000\002\001\ufe8f\000\004\224\u01b2\001" +
    "\ufeb9\000\002\001\uff27\000\002\001\ufeea\000\004\146\u030f" +
    "\001\002\000\002\001\uffc7\000\002\001\ufee8\000\010\106" +
    "\u0150\210\u0151\224\ufe79\001\ufe6d\000\066\034\u0129\125\u0121" +
    "\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152" +
    "\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\ufe39\000\012" +
    "\034\u0129\170\u0127\171\u0126\172\u0119\001\uff01\000\010\110" +
    "\ufec9\114\227\224\u01bf\001\ufe92\000\252\003\133\004\162" +
    "\005\175\006\122\007\011\010\071\011\037\013\067\015" +
    "\106\020\145\021\024\022\140\023\134\024\050\026\036" +
    "\030\115\032\176\035\116\037\146\043\062\044\137\045" +
    "\103\046\123\050\155\051\013\052\045\054\173\056\303" +
    "\057\012\061\111\062\166\063\034\064\334\065\035\066" +
    "\161\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\106\073\107\u0316\111\305\112\144\113" +
    "\044\114\075\115\026\116\063\117\033\120\100\121\056" +
    "\122\142\123\121\130\072\146\010\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\046\217\070\220\020\224\170\227\114\230\126" +
    "\231\065\232\110\234\136\236\132\001\002\000\002\001" +
    "\uffe3\000\060\034\u0129\145\u011e\147\u011b\150\u012a\151\u011c" +
    "\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160" +
    "\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131" +
    "\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\ufee2\000" +
    "\002\001\uffae\000\016\011\u031b\013\067\065\u031a\106\u014e" +
    "\116\201\227\114\001\002\000\002\001\ufe32\000\004\224" +
    "\ufe2f\001\ufe33\000\004\231\u031f\001\002\000\014\013\067" +
    "\016\u02cb\017\u02cc\104\u02bc\105\u02bb\001\ufeba\000\010\013" +
    "\067\104\u02bc\105\u02bb\001\ufebb\000\002\001\ufee3\000\004" +
    "\225\u0321\001\002\000\004\146\u0322\001\002\000\002\001" +
    "\ufff7\000\002\001\uffdc\000\070\034\u0129\125\u0121\126\u0130" +
    "\127\u011a\145\u011e\146\u0325\147\u011b\150\u012a\151\u011c\152" +
    "\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e" +
    "\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167" +
    "\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\002\000\002" +
    "\001\uffdb\000\002\001\uff15\000\024\011\222\013\067\074" +
    "\014\111\u01a9\114\u01a5\116\063\210\057\216\220\227\114" +
    "\001\002\000\070\034\u0129\072\u0335\125\u0121\126\u0130\127" +
    "\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b" +
    "\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162" +
    "\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127" +
    "\171\u0126\172\u0119\175\u011d\001\ufe50\000\004\124\u032c\001" +
    "\ufe8a\000\004\211\u032b\001\002\000\002\001\ufede\000\156" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\153\u032e\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\227\114\230\126\231\065" +
    "\232\110\236\132\001\ufe89\000\002\001\ufe54\000\024\011" +
    "\222\013\067\074\014\111\u01a9\114\u01a5\116\063\210\057" +
    "\216\220\227\114\001\002\000\070\034\u0129\072\u0330\125" +
    "\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c" +
    "\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160" +
    "\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131" +
    "\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\ufe52\000" +
    "\156\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\153\u0331\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\002\000\024\011\222\013\067" +
    "\074\014\111\u01a9\114\u01a5\116\063\210\057\216\220\227" +
    "\114\001\002\000\066\034\u0129\125\u0121\126\u0130\127\u011a" +
    "\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154" +
    "\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f" +
    "\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171" +
    "\u0126\172\u0119\175\u011d\001\ufe53\000\002\001\ufe4f\000\002" +
    "\001\ufe4e\000\156\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\153" +
    "\u0336\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\024\011" +
    "\222\013\067\074\014\111\u01a9\114\u01a5\116\063\210\057" +
    "\216\220\227\114\001\002\000\066\034\u0129\125\u0121\126" +
    "\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123" +
    "\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161" +
    "\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120" +
    "\170\u0127\171\u0126\172\u0119\175\u011d\001\ufe51\000\002\001" +
    "\ufe4d\000\002\001\ufe4c\000\154\004\162\006\122\007\011" +
    "\010\071\011\222\013\067\020\145\035\116\046\307\062" +
    "\166\063\034\073\171\074\014\075\023\076\051\077\054" +
    "\100\150\101\006\102\040\111\305\112\144\113\044\114" +
    "\075\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\u0103\224\170\227" +
    "\114\230\126\231\065\232\110\236\132\001\002\000\070" +
    "\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150" +
    "\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118" +
    "\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165" +
    "\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d" +
    "\225\u033c\001\002\000\002\001\ufe38\000\004\067\u033e\001" +
    "\uffab\000\012\011\222\111\321\114\324\116\063\001\002" +
    "\000\004\070\u0341\001\uffa6\000\004\106\u0343\001\002\000" +
    "\012\011\222\111\321\114\324\116\063\001\002\000\004" +
    "\124\u026d\001\uffa5\000\002\001\uff61\000\030\047\153\056" +
    "\u027e\060\u0281\107\u0345\115\u027a\216\u027d\217\u0274\220\u0275" +
    "\221\u0278\222\u0273\223\u027c\001\uff42\000\002\001\uffb1\000" +
    "\002\001\uffaa\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\ufe65\000\004\211\u0349" +
    "\001\002\000\002\001\ufedc\000\154\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\070\034\u0129\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b" +
    "\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156" +
    "\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128" +
    "\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175" +
    "\u011d\225\u034c\001\002\000\236\003\133\004\162\005\175" +
    "\006\122\007\011\010\071\011\037\013\067\015\106\020" +
    "\145\021\024\022\140\023\134\024\050\026\036\030\115" +
    "\032\176\035\116\037\146\043\062\044\137\045\103\046" +
    "\307\050\155\051\013\052\045\054\173\056\303\057\012" +
    "\061\111\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\106\073\111\305" +
    "\112\144\113\044\114\075\115\026\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\146\010\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\046\224\170\226\u034d\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\002\001\uffea" +
    "\000\002\001\uffe0\000\002\001\uff89\000\252\003\133\004" +
    "\162\005\175\006\122\007\011\010\071\011\037\013\067" +
    "\015\106\020\145\021\024\022\140\023\134\024\050\025" +
    "\u0351\026\036\030\115\032\176\035\116\037\146\043\062" +
    "\044\137\045\103\046\123\050\155\051\013\052\045\054" +
    "\173\056\303\057\012\061\111\062\166\063\034\064\334" +
    "\065\035\066\161\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\106\073\111\305\112\144" +
    "\113\044\114\075\115\026\116\063\117\033\120\100\121" +
    "\056\122\142\123\121\130\072\146\010\166\120\167\077" +
    "\173\164\174\017\176\060\177\172\200\032\201\151\202" +
    "\043\203\143\204\104\205\152\206\102\207\041\210\057" +
    "\212\107\216\046\217\070\220\020\224\170\227\114\230" +
    "\126\231\065\232\110\234\136\236\132\001\002\000\002" +
    "\001\uff88\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\ufe65\000\004\211\u0354\001" +
    "\002\000\002\001\ufecd\000\004\131\u035c\001\uff64\000\006" +
    "\124\u0357\146\u0358\001\002\000\004\013\u0359\001\002\000" +
    "\002\001\uffd3\000\004\131\u035a\001\uff66\000\056\006\122" +
    "\007\011\010\071\011\222\020\221\074\212\075\023\076" +
    "\051\077\054\100\150\101\006\102\205\111\225\112\144" +
    "\113\044\114\211\116\063\166\223\167\207\210\214\216" +
    "\220\236\132\001\002\000\002\001\uff65\000\056\006\122" +
    "\007\011\010\071\011\222\020\221\074\212\075\023\076" +
    "\051\077\054\100\150\101\006\102\205\111\225\112\144" +
    "\113\044\114\211\116\063\166\223\167\207\210\214\216" +
    "\220\236\132\001\002\000\002\001\uff63\000\002\001\uffea" +
    "\000\252\003\133\004\162\005\175\006\122\007\011\010" +
    "\071\011\037\013\067\015\106\020\145\021\024\022\140" +
    "\023\134\024\050\026\036\030\115\032\176\035\116\037" +
    "\146\043\062\044\137\045\103\046\123\050\155\051\013" +
    "\052\045\054\173\056\303\057\012\061\111\062\166\063" +
    "\034\064\334\065\035\066\161\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\107" +
    "\u0360\111\305\112\144\113\044\114\075\115\026\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\146" +
    "\010\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\046\217\070\220\020" +
    "\224\170\227\114\230\126\231\065\232\110\234\136\236" +
    "\132\001\002\000\004\053\u0361\001\uffc2\000\004\224\u036c" +
    "\001\002\000\002\001\uffc1\000\004\055\u0368\001\uffbd\000" +
    "\004\053\u0361\001\uffc3\000\002\001\uffc0\000\002\001\uffbe" +
    "\000\002\001\uffc9\000\004\106\u0369\001\002\000\002\001" +
    "\uffea\000\252\003\133\004\162\005\175\006\122\007\011" +
    "\010\071\011\037\013\067\015\106\020\145\021\024\022" +
    "\140\023\134\024\050\026\036\030\115\032\176\035\116" +
    "\037\146\043\062\044\137\045\103\046\123\050\155\051" +
    "\013\052\045\054\173\056\303\057\012\061\111\062\166" +
    "\063\034\064\334\065\035\066\161\073\171\074\014\075" +
    "\023\076\051\077\054\100\150\101\006\102\040\106\073" +
    "\107\u036b\111\305\112\144\113\044\114\075\115\026\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\146\010\166\120\167\077\173\164\174\017\176\060\177" +
    "\172\200\032\201\151\202\043\203\143\204\104\205\152" +
    "\206\102\207\041\210\057\212\107\216\046\217\070\220" +
    "\020\224\170\227\114\230\126\231\065\232\110\234\136" +
    "\236\132\001\002\000\002\001\uffbc\000\012\011\222\111" +
    "\321\114\324\116\063\001\002\000\004\013\u036e\001\002" +
    "\000\004\225\u036f\001\002\000\004\106\u0370\001\002\000" +
    "\002\001\uffea\000\252\003\133\004\162\005\175\006\122" +
    "\007\011\010\071\011\037\013\067\015\106\020\145\021" +
    "\024\022\140\023\134\024\050\026\036\030\115\032\176" +
    "\035\116\037\146\043\062\044\137\045\103\046\123\050" +
    "\155\051\013\052\045\054\173\056\303\057\012\061\111" +
    "\062\166\063\034\064\334\065\035\066\161\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\106\073\107\u0372\111\305\112\144\113\044\114\075\115" +
    "\026\116\063\117\033\120\100\121\056\122\142\123\121" +
    "\130\072\146\010\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\046\217" +
    "\070\220\020\224\170\227\114\230\126\231\065\232\110" +
    "\234\136\236\132\001\002\000\002\001\uffbf\000\002\001" +
    "\ufeec\000\002\001\ufee6\000\016\013\067\016\u02cb\017\u02cc" +
    "\103\u0377\104\u02bc\105\u02bb\001\002\000\012\013\067\103" +
    "\275\104\u02bc\105\u02bb\001\002\000\002\001\ufe8e\000\002" +
    "\001\uffe4\000\154\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\u0103\224\170\227\114\230\126" +
    "\231\065\232\110\236\132\001\uff30\000\066\034\u0129\125" +
    "\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c" +
    "\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160" +
    "\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131" +
    "\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\001\uff2d\000" +
    "\004\146\u037f\001\002\000\004\124\u037d\001\uff2f\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\066\034\u0129\125\u0121\126\u0130\127" +
    "\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b" +
    "\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162" +
    "\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127" +
    "\171\u0126\172\u0119\175\u011d\001\uff2e\000\154\004\162\006" +
    "\122\007\011\010\071\011\222\013\067\020\145\035\116" +
    "\046\307\062\166\063\034\073\171\074\014\075\023\076" +
    "\051\077\054\100\150\101\006\102\040\111\305\112\144" +
    "\113\044\114\075\116\063\117\033\120\100\121\056\122" +
    "\142\123\121\130\072\166\120\167\077\173\164\174\017" +
    "\176\060\177\172\200\032\201\151\202\043\203\143\204" +
    "\104\205\152\206\102\207\041\210\057\212\107\216\u0103" +
    "\224\170\227\114\230\126\231\065\232\110\236\132\001" +
    "\uff30\000\004\146\u0381\001\002\000\154\004\162\006\122" +
    "\007\011\010\071\011\222\013\067\020\145\035\116\046" +
    "\307\062\166\063\034\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\111\305\112\144\113" +
    "\044\114\075\116\063\117\033\120\100\121\056\122\142" +
    "\123\121\130\072\166\120\167\077\173\164\174\017\176" +
    "\060\177\172\200\032\201\151\202\043\203\143\204\104" +
    "\205\152\206\102\207\041\210\057\212\107\216\u0103\224" +
    "\170\227\114\230\126\231\065\232\110\236\132\001\uff30" +
    "\000\004\225\u0383\001\002\000\236\003\133\004\162\005" +
    "\175\006\122\007\011\010\071\011\037\013\067\015\106" +
    "\020\145\021\024\022\140\023\134\024\050\026\036\030" +
    "\115\032\176\035\116\037\146\043\062\044\137\045\103" +
    "\046\307\050\155\051\013\052\045\054\173\056\303\057" +
    "\012\061\111\062\166\063\034\073\171\074\014\075\023" +
    "\076\051\077\054\100\150\101\006\102\040\106\073\111" +
    "\305\112\144\113\044\114\075\115\026\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\146\010\166" +
    "\120\167\077\173\164\174\017\176\060\177\172\200\032" +
    "\201\151\202\043\203\143\204\104\205\152\206\102\207" +
    "\041\210\057\212\107\216\046\224\170\226\u0385\227\114" +
    "\230\126\231\065\232\110\236\132\001\002\000\002\001" +
    "\uffde\000\002\001\uffea\000\002\001\uff9a\000\252\003\133" +
    "\004\162\005\175\006\122\007\011\010\071\011\037\013" +
    "\067\015\106\020\145\021\024\022\140\023\134\024\050" +
    "\026\036\027\u0388\030\115\032\176\035\116\037\146\043" +
    "\062\044\137\045\103\046\123\050\155\051\013\052\045" +
    "\054\173\056\303\057\012\061\111\062\166\063\034\064" +
    "\334\065\035\066\161\073\171\074\014\075\023\076\051" +
    "\077\054\100\150\101\006\102\040\106\073\111\305\112" +
    "\144\113\044\114\075\115\026\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\146\010\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\046\217\070\220\020\224\170\227\114" +
    "\230\126\231\065\232\110\234\136\236\132\001\002\000" +
    "\002\001\uff99\000\154\004\162\006\122\007\011\010\071" +
    "\011\222\013\067\020\145\035\116\046\307\062\166\063" +
    "\034\073\171\074\014\075\023\076\051\077\054\100\150" +
    "\101\006\102\040\111\305\112\144\113\044\114\075\116" +
    "\063\117\033\120\100\121\056\122\142\123\121\130\072" +
    "\166\120\167\077\173\164\174\017\176\060\177\172\200" +
    "\032\201\151\202\043\203\143\204\104\205\152\206\102" +
    "\207\041\210\057\212\107\216\u0103\224\170\227\114\230" +
    "\126\231\065\232\110\236\132\001\002\000\070\034\u0129" +
    "\125\u0121\126\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151" +
    "\u011c\152\u0123\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122" +
    "\160\u012e\161\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166" +
    "\u0131\167\u0120\170\u0127\171\u0126\172\u0119\175\u011d\225\u038b" +
    "\001\002\000\002\001\ufe3b\000\066\034\u0129\125\u0121\126" +
    "\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123" +
    "\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161" +
    "\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120" +
    "\170\u0127\171\u0126\172\u0119\175\u011d\001\ufe3a\000\002\001" +
    "\ufeee\000\006\036\u0398\114\227\001\uffef\000\002\001\ufff0" +
    "\000\006\011\222\116\063\001\002\000\006\124\u0392\146" +
    "\u0393\001\002\000\010\011\222\114\u0390\116\063\001\002" +
    "\000\002\001\ufff3\000\002\001\ufff1\000\006\036\u0396\114" +
    "\227\001\uffed\000\004\011\u0397\001\002\000\002\001\uffec" +
    "\000\004\011\u0399\001\002\000\002\001\uffee\000\002\001" +
    "\uffc5\000\006\124\u0257\146\u039c\001\002\000\002\001\uffc4" +
    "\000\154\004\162\006\122\007\011\010\071\011\222\013" +
    "\067\020\145\035\116\046\307\062\166\063\034\073\171" +
    "\074\014\075\023\076\051\077\054\100\150\101\006\102" +
    "\040\111\305\112\144\113\044\114\075\116\063\117\033" +
    "\120\100\121\056\122\142\123\121\130\072\166\120\167" +
    "\077\173\164\174\017\176\060\177\172\200\032\201\151" +
    "\202\043\203\143\204\104\205\152\206\102\207\041\210" +
    "\057\212\107\216\u0103\224\170\227\114\230\126\231\065" +
    "\232\110\236\132\001\002\000\070\034\u0129\125\u0121\126" +
    "\u0130\127\u011a\145\u011e\147\u011b\150\u012a\151\u011c\152\u0123" +
    "\153\u012b\154\u012f\155\u0124\156\u0118\157\u0122\160\u012e\161" +
    "\u012d\162\u011f\163\u012c\164\u0128\165\u0125\166\u0131\167\u0120" +
    "\170\u0127\171\u0126\172\u0119\175\u011d\211\u039f\001\002\000" +
    "\002\001\ufeb6\000\002\001\uffd0\000\002\001\uffad\000\002" +
    "\001\ufeff\000\156\004\162\006\122\007\011\010\071\011" +
    "\222\013\067\020\145\035\116\046\307\062\166\063\034" +
    "\073\171\074\014\075\023\076\051\077\054\100\150\101" +
    "\006\102\040\111\305\112\144\113\044\114\075\116\063" +
    "\117\033\120\100\121\056\122\142\123\121\130\072\153" +
    "\u0327\166\120\167\077\173\164\174\017\176\060\177\172" +
    "\200\032\201\151\202\043\203\143\204\104\205\152\206" +
    "\102\207\041\210\057\212\107\216\u0103\224\170\227\114" +
    "\230\126\231\065\232\110\236\132\001\ufe55\000\004\225" +
    "\u03a5\001\002\000\002\001\ufedf\000\004\072\u03a9\001\ufe2a" +
    "\000\046\071\u0114\072\ufe2d\131\u010b\132\u010f\133\u010c\134" +
    "\u0116\135\u010e\136\u0115\137\u0111\140\u0113\141\u010d\142\u010a" +
    "\143\u0110\144\u0112\146\ufe2d\176\ufe80\177\ufe80\225\ufe2d\001" +
    "\ufe82\000\010\072\ufe2c\146\ufe2c\225\ufe2c\001\ufe83\000\154" +
    "\004\162\006\122\007\011\010\071\011\222\013\067\020" +
    "\145\035\116\046\307\062\166\063\034\073\171\074\014" +
    "\075\023\076\051\077\054\100\150\101\006\102\040\111" +
    "\305\112\144\113\044\114\075\116\063\117\033\120\100" +
    "\121\056\122\142\123\121\130\072\166\120\167\077\173" +
    "\164\174\017\176\060\177\172\200\032\201\151\202\043" +
    "\203\143\204\104\205\152\206\102\207\041\210\057\212" +
    "\107\216\u0103\224\170\227\114\230\126\231\065\232\110" +
    "\236\132\001\002\000\002\001\ufe29\000\006\124\u03b4\146" +
    "\u03b5\001\002\000\002\001\uff69\000\026\011\222\013\067" +
    "\074\014\106\u03b1\111\u01a9\114\u01a5\116\063\210\057\216" +
    "\220\227\114\001\002\000\002\001\uff6a\000\002\001\uff68" +
    "\000\004\071\u0114\001\ufe82\000\154\004\162\006\122\007" +
    "\011\010\071\011\222\013\067\020\145\035\116\046\307" +
    "\062\166\063\034\073\171\074\014\075\023\076\051\077" +
    "\054\100\150\101\006\102\040\111\305\112\144\113\044" +
    "\114\075\116\063\117\033\120\100\121\056\122\142\123" +
    "\121\130\072\166\120\167\077\173\164\174\017\176\060" +
    "\177\172\200\032\201\151\202\043\203\143\204\104\205" +
    "\152\206\102\207\041\210\057\212\107\216\u0103\224\170" +
    "\227\114\230\126\231\065\232\110\236\132\001\002\000" +
    "\070\034\u0129\107\u03b3\125\u0121\126\u0130\127\u011a\145\u011e" +
    "\147\u011b\150\u012a\151\u011c\152\u0123\153\u012b\154\u012f\155" +
    "\u0124\156\u0118\157\u0122\160\u012e\161\u012d\162\u011f\163\u012c" +
    "\164\u0128\165\u0125\166\u0131\167\u0120\170\u0127\171\u0126\172" +
    "\u0119\175\u011d\001\002\000\002\001\uff67\000\006\013\u03ac" +
    "\227\u03ad\001\002\000\002\001\uffd4\000\002\001\uff6b\000" +
    "\156\004\162\006\122\007\011\010\071\011\222\013\067" +
    "\020\145\035\116\046\307\062\166\063\034\073\171\074" +
    "\014\075\023\076\051\077\054\100\150\101\006\102\040" +
    "\111\305\112\144\113\044\114\075\116\063\117\033\120" +
    "\100\121\056\122\142\123\121\130\072\153\u0100\166\120" +
    "\167\077\173\164\174\017\176\060\177\172\200\032\201" +
    "\151\202\043\203\143\204\104\205\152\206\102\207\041" +
    "\210\057\212\107\216\u0103\224\170\227\114\230\126\231" +
    "\065\232\110\236\132\001\uff72\000\004\225\u03b9\001\002" +
    "\000\002\001\ufece\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03b8\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\114\003\162\007\173\010\164\013\124\055\155" +
    "\056\046\061\123\063\015\067\020\070\060\071\156\072" +
    "\134\101\100\112\073\114\127\117\065\122\130\127\116" +
    "\130\140\131\026\135\146\136\027\137\052\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\206\153\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u03aa\045\u03ad\001\001\000" +
    "\070\003\162\055\u03a7\056\046\061\123\063\015\067\u0100" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\u03a6\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\205\u03a5\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u03a1\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\162\052\u039a\055\155\056\046\061\123\063\015\067" +
    "\u0254\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\072\003\162\013" +
    "\u0399\055\155\056\046\061\123\063\015\067\020\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\206\153\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u038d\004\u038e\005\u0390\016\u01d8\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u038c\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\066\003\162\055\155\056\046\061\123\063\015" +
    "\067\u038b\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\106\u0374\110" +
    "\u02b9\152\u02b7\001\001\000\066\003\162\055\155\056\046" +
    "\061\123\063\015\067\u0373\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\002\001\001" +
    "\000\066\003\162\055\155\056\046\061\123\063\015\067" +
    "\u0372\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\003\162\055\155\056\046\061\123\063\015\067\u0327\070" +
    "\060\071\156\072\134\101\100\104\u0329\105\u0328\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\042\003\u01a9\056\046\070" +
    "\060\071\u01a3\072\134\101\100\117\u01a5\131\u01fd\146\u0325" +
    "\147\006\150\024\152\126\156\041\161\054\207\u013b\210" +
    "\051\001\001\000\002\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u0323\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\106\u031c\107\u031b\110" +
    "\u02b9\152\u02b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u0316\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\004\011\u0314\001\001\000\002\001\001\000\004\003\u0313" +
    "\001\001\000\002\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u0312\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0311\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\014\070\u0310\072\134\152\126\207\u013b\210\051" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u030f\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\002\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u030c\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0144" +
    "\070\u013d\071\u013a\072\134\101\u0141\117\u013e\150\024\152" +
    "\126\153\u030a\155\u0139\156\u0140\157\u0142\207\u013b\210\051" +
    "\001\001\000\010\106\u0308\110\u02b9\152\u02b7\001\001\000" +
    "\002\001\001\000\004\003\u02f9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u02de\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\002\001\001\000\066\003\162\055\155\056\046\061\123" +
    "\063\015\067\u02dd\070\060\071\156\072\134\101\100\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u02dc\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\004\051\u02d4\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\106\u02b8\110\u02b9\152\u02b7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\003\162\010\u025c" +
    "\013\124\055\155\056\046\061\123\063\015\067\020\070" +
    "\060\071\156\072\134\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\206\153\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u025a" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\070\003\162\052\u0255\055\155\056\046" +
    "\061\123\063\015\067\u0254\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\002\001\001" +
    "\000\066\003\162\055\155\056\046\061\123\063\015\067" +
    "\u0253\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u0252\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u0235\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u0234\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\003\162\055\u022d\056\046" +
    "\061\123\063\015\067\u0100\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\u022c\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u0225\001\001\000\002\001\001\000\066\003\162" +
    "\055\155\056\046\061\123\063\015\067\u0223\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\026\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\207\075\210\051\213\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\162\055\155\056\046\061\123\063\015\067\u020d" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\u020c\206\u020e\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\042\003\u01a9" +
    "\056\046\070\060\071\u01a3\072\134\101\100\117\u01a5\131" +
    "\u01fd\146\u01fc\147\006\150\024\152\126\156\041\161\054" +
    "\207\u013b\210\051\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u01fa\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\177" +
    "\113\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\225\061\205" +
    "\062\216\117\215\160\207\211\223\212\212\214\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\225" +
    "\061\205\062\271\117\215\160\207\211\223\212\212\214" +
    "\214\001\001\000\002\001\001\000\004\003\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\225\061" +
    "\205\062\251\064\247\066\250\117\215\160\207\211\223" +
    "\212\212\214\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\225\061\205\062\235\117" +
    "\215\160\207\211\223\212\212\214\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\231\001\001\000\002" +
    "\001\001\000\022\003\225\061\205\062\233\117\215\160" +
    "\207\211\223\212\212\214\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\225\061" +
    "\205\062\237\117\215\160\207\211\223\212\212\214\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\225" +
    "\061\205\062\245\117\215\160\207\211\223\212\212\214" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\255\001\001\000\002\001\001\000" +
    "\022\003\225\061\205\062\253\117\215\160\207\211\223" +
    "\212\212\214\214\001\001\000\002\001\001\000\022\003" +
    "\225\061\205\062\256\117\215\160\207\211\223\212\212" +
    "\214\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\225\061\205\062\260\117\215\160\207\211\223" +
    "\212\212\214\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\225\061\205\062\263\117\215\160\207" +
    "\211\223\212\212\214\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\225\061\205\062\251\064\266" +
    "\066\250\117\215\160\207\211\223\212\212\214\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\162\010\307\013\124\023\303" +
    "\055\155\056\046\061\123\063\015\067\020\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\026\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\206\153\207\075\210\051\213\021" +
    "\001\001\000\004\113\277\001\001\000\002\001\001\000" +
    "\022\003\225\061\205\062\301\117\215\160\207\211\223" +
    "\212\212\214\214\001\001\000\002\001\001\000\004\016" +
    "\u01d8\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\371\001\001\000\004\051\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\314" +
    "\035\324\040\316\041\322\120\321\143\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\355\001\001\000\002" +
    "\001\001\000\004\036\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\331\001\001\000\112\003\162" +
    "\010\337\012\332\013\124\055\155\056\046\061\123\063" +
    "\015\067\020\070\060\071\156\072\134\101\100\112\073" +
    "\114\127\117\065\127\334\130\336\131\026\135\146\136" +
    "\027\137\052\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\206\153\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\357\001\001\000\002\001\001\000\012\003\314\041" +
    "\361\120\321\143\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\225\061\205\062" +
    "\365\117\215\160\207\211\223\212\212\214\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\225\061" +
    "\205\062\370\117\215\160\207\211\223\212\212\214\214" +
    "\001\001\000\002\001\001\000\112\003\162\010\337\012" +
    "\332\013\124\055\155\056\046\061\123\063\015\067\020" +
    "\070\060\071\156\072\134\101\100\112\073\114\127\117" +
    "\065\127\334\130\336\131\026\135\146\136\027\137\052" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\206\153\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\004\003\374\001" +
    "\001\000\002\001\001\000\072\003\162\042\376\043\u0103" +
    "\055\u0104\056\046\061\123\063\015\067\u0100\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\u0101\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\207\075\210\051\213\021\001\001" +
    "\000\002\001\001\000\042\003\u01a9\056\046\070\060\071" +
    "\u01a3\072\134\101\100\116\u01d6\117\u01a5\131\u01cc\147\006" +
    "\150\024\152\126\156\041\161\054\207\u013b\210\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\162\055" +
    "\u0108\056\046\061\123\063\015\067\u0100\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\u0107\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\042\003\u01a9\056\046\070\060\071\u01a3\072\134\101\100" +
    "\116\u01cb\117\u01a5\131\u01cc\147\006\150\024\152\126\156" +
    "\041\161\054\207\u013b\210\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u01ca\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u01a2\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u01a0" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\066\003\162\055\155\056\046\061\123" +
    "\063\015\067\u019f\070\060\071\156\072\134\101\100\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u019e\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\066" +
    "\003\162\055\155\056\046\061\123\063\015\067\u019d\070" +
    "\060\071\156\072\134\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\207\075\210\051\213\021" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u019c\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u019b\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u019a\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\066\003\162\055\155\056\046\061\123\063\015" +
    "\067\u0199\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\026\070\u014e\072\134\074\u018d" +
    "\100\u0149\101\u014c\113\u0148\147\u018c\152\126\207\u013b\210" +
    "\051\001\001\000\066\003\162\055\155\056\046\061\123" +
    "\063\015\067\u018b\070\060\071\156\072\134\101\100\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u0116\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u018a\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u0189\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0188\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\066\003\162\055\155\056\046\061\123\063\015" +
    "\067\u0187\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\066\003\162\055\155\056\046" +
    "\061\123\063\015\067\u0186\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\066\003\162" +
    "\055\155\056\046\061\123\063\015\067\u0185\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\026\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\207\075\210\051\213\021\001\001" +
    "\000\066\003\162\055\155\056\046\061\123\063\015\067" +
    "\u0180\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u017f\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u017e\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u017d" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\066\003\162\055\155\056\046\061\123" +
    "\063\015\067\u017c\070\060\071\156\072\134\101\100\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u017b\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\066" +
    "\003\162\055\155\056\046\061\123\063\015\067\u017a\070" +
    "\060\071\156\072\134\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\207\075\210\051\213\021" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u0179\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u0178\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0177\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\066\003\162\055\155\056\046\061\123\063\015" +
    "\067\u0176\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\036\003\u0144\070\u013d\071\u013a" +
    "\072\134\101\u0141\117\u013e\150\024\152\126\153\u013f\155" +
    "\u0139\156\u0140\157\u0142\207\u013b\210\051\001\001\000\066" +
    "\003\162\055\155\056\046\061\123\063\015\067\u0138\070" +
    "\060\071\156\072\134\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\207\075\210\051\213\021" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u0137\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u0136\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0135\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\066\003\162\055\155\056\046\061\123\063\015" +
    "\067\u0134\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\066\003\162\055\155\056\046" +
    "\061\123\063\015\067\u0133\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\066\003\162" +
    "\055\155\056\046\061\123\063\015\067\u0132\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\026\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\207\075\210\051\213\021\001\001" +
    "\000\066\003\162\055\155\056\046\061\123\063\015\067" +
    "\u0131\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\070\u0163\072\134\152\126" +
    "\207\u013b\210\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u0146\001\001\000\002" +
    "\001\001\000\026\070\u014e\072\134\074\u014b\100\u0149\101" +
    "\u014c\113\u0148\147\u014a\152\126\207\u013b\210\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\070\u0158\072\134\152\126\207\u013b" +
    "\210\051\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u0156\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u0154" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\070\003\162\055\155\056\046\061\123" +
    "\063\015\067\u0151\070\060\071\156\072\134\073\u0152\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u015b\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\003\162\055\155\056\046" +
    "\061\123\063\015\067\u0161\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\070\003\162" +
    "\055\155\056\046\061\123\063\015\067\u0151\070\060\071" +
    "\156\072\134\073\u015f\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\207\075\210\051\213\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\072\u0168" +
    "\075\u0165\076\u0167\101\u0166\152\126\001\001\000\002\001" +
    "\001\000\010\072\u0168\075\u0169\152\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u016e\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\070\003\162\055\155\056\046\061\123\063\015" +
    "\067\u0151\070\060\071\156\072\134\073\u016c\101\100\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\162\055\155\056\046\061\123\063\015" +
    "\067\u0151\070\060\071\156\072\134\073\u0172\101\100\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\072\u0168\075\u0165\076\u0175\101\u0166\152" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u0182" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u0184\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\162\042\u018f\043\u0103\055\u0104\056\046\061\123" +
    "\063\015\067\u0100\070\060\071\156\072\134\101\100\112" +
    "\073\117\065\131\u0101\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\004" +
    "\077\u0191\001\001\000\002\001\001\000\070\003\162\055" +
    "\155\056\046\061\123\063\015\067\u0151\070\060\071\156" +
    "\072\134\073\u0193\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\003\162" +
    "\042\u0196\043\u0103\055\u0104\056\046\061\123\063\015\067" +
    "\u0100\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\u0101\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\004\077\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\u01a9\056\046\070\060\071\u01a3\072\134\101\100\117" +
    "\u01a5\131\u01a6\147\006\150\024\152\126\156\041\161\054" +
    "\207\u013b\210\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u01bd\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\u0144\070\u013d\071\u013a\072\134\101" +
    "\u0141\117\u013e\150\024\152\126\153\u01af\155\u0139\156\u0140" +
    "\157\u0142\207\u013b\210\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\162\042\u01ab\043\u0103\055\u0104" +
    "\056\046\061\123\063\015\067\u0100\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\u0101\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u01ae\001\001\000" +
    "\002\001\001\000\004\060\u01b0\001\001\000\002\001\001" +
    "\000\072\003\162\042\u01b2\043\u0103\055\u0104\056\046\061" +
    "\123\063\015\067\u0100\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\u0101\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\072\u0168\075\u0165\076\u01b6\100\u01b5" +
    "\101\u0166\113\u0148\152\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\162\042\u01b8\043\u0103\055\u0104" +
    "\056\046\061\123\063\015\067\u0100\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\u0101\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\162\042\u01bb\043" +
    "\u0103\055\u0104\056\046\061\123\063\015\067\u0100\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\u0101\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\003\162\042\u01bf\043\u0103\055\u0104\056\046\061" +
    "\123\063\015\067\u0100\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\u0101\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\072\u0168\075\u0165\076\u01c3\100\u01c2" +
    "\101\u0166\113\u0148\152\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\162\042\u01c5\043\u0103\055\u0104" +
    "\056\046\061\123\063\015\067\u0100\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\u0101\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\162\042\u01c8\043" +
    "\u0103\055\u0104\056\046\061\123\063\015\067\u0100\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\u0101\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u01ce\001" +
    "\001\000\002\001\001\000\016\003\314\035\u01d0\040\316" +
    "\041\322\120\321\143\315\001\001\000\002\001\001\000" +
    "\004\036\u01d2\001\001\000\002\001\001\000\004\011\u01d4" +
    "\001\001\000\112\003\162\010\337\012\332\013\124\055" +
    "\155\056\046\061\123\063\015\067\020\070\060\071\156" +
    "\072\134\101\100\112\073\114\127\117\065\127\334\130" +
    "\336\131\026\135\146\136\027\137\052\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\206\153\207\075\210\051\213\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u01df\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\074\003\162\010\u01e2\013\124" +
    "\055\155\056\046\061\123\063\015\067\020\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\026\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\206\153\207\075\210\051\213\021" +
    "\001\001\000\004\011\u01ec\001\001\000\004\031\u01e3\001" +
    "\001\000\004\033\u01e4\001\001\000\002\001\001\000\074" +
    "\003\162\010\u01eb\013\124\055\155\056\046\061\123\063" +
    "\015\067\020\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\206\153" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u01e8" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\074\003\162\010\u01ea" +
    "\013\124\055\155\056\046\061\123\063\015\067\020\070" +
    "\060\071\156\072\134\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\206\153\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\003\162\010\337\012\332\013\124\032\u01ed\055\155" +
    "\056\046\061\123\063\015\067\020\070\060\071\156\072" +
    "\134\101\100\112\073\114\127\117\065\127\334\130\336" +
    "\131\026\135\146\136\027\137\052\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\206\153\207\075\210\051\213\021\001\001\000" +
    "\004\034\u01ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u01f2\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u01f5\001\001\000\112\003\162" +
    "\010\337\012\332\013\124\055\155\056\046\061\123\063" +
    "\015\067\020\070\060\071\156\072\134\101\100\112\073" +
    "\114\127\117\065\127\334\130\336\131\026\135\146\136" +
    "\027\137\052\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\206\153\207" +
    "\075\210\051\213\021\001\001\000\004\011\u01f7\001\001" +
    "\000\112\003\162\010\337\012\332\013\124\055\155\056" +
    "\046\061\123\063\015\067\020\070\060\071\156\072\134" +
    "\101\100\112\073\114\127\117\065\127\334\130\336\131" +
    "\026\135\146\136\027\137\052\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\206\153\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\u01a9" +
    "\056\046\070\060\071\u01a3\072\134\101\100\102\u0200\103" +
    "\u0201\117\u01a5\131\u0202\147\006\150\024\152\126\156\041" +
    "\161\054\202\u01ff\207\u013b\210\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\u01a9\056\046\070\060\071" +
    "\u01a3\072\134\101\100\102\u0205\103\u0201\117\u01a5\131\u0202" +
    "\147\006\150\024\152\126\156\041\161\054\202\u01ff\207" +
    "\u013b\210\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\u01a9\056\046\070\060\071\u01a3\072\134\101" +
    "\100\103\u0208\117\u01a5\131\u0202\147\006\150\024\152\126" +
    "\156\041\161\054\202\u01ff\207\u013b\210\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\003\162\055\155" +
    "\056\046\061\123\063\015\067\u020b\070\060\071\156\072" +
    "\134\101\100\112\073\117\065\131\026\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\070\u014e\072\134\074\u0214\100\u0149\101\u014c\113" +
    "\u0148\147\u0213\152\126\207\u013b\210\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\162\042\u0216\043" +
    "\u0103\055\u0104\056\046\061\123\063\015\067\u0100\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\u0101\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\004\077\u0218\001\001\000\002" +
    "\001\001\000\072\003\162\042\u021a\043\u0103\055\u0104\056" +
    "\046\061\123\063\015\067\u0100\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\u0101\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\004\077\u021c\001\001\000\002\001\001\000\042" +
    "\003\u01a9\056\046\070\060\071\u01a3\072\134\101\100\117" +
    "\u01a5\131\u021e\147\006\150\024\151\u021f\152\126\156\041" +
    "\161\054\207\u013b\210\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\u01a9\056\046" +
    "\070\060\071\u01a3\072\134\101\100\117\u01a5\131\u0222\147" +
    "\006\150\024\152\126\156\041\161\054\207\u013b\210\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0226\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\072\u0168\075\u0165\076\u01c3\100" +
    "\u01c2\101\u0166\113\u0148\152\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\225\061\205\062\u0233\117\215\160" +
    "\207\211\223\212\212\214\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u0237\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\002\001\001\000\004\025\u0239\001\001\000\002\001\001" +
    "\000\004\026\u024a\001\001\000\004\026\u023c\001\001\000" +
    "\002\001\001\000\004\026\u023e\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\162\055\155\056\046\061" +
    "\123\063\015\067\u0246\070\060\071\156\072\134\101\100" +
    "\112\073\117\065\131\026\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\207\075\210\051\213\021\001\001\000\004\027\u0242\001" +
    "\001\000\004\011\u0245\001\001\000\002\001\001\000\002" +
    "\001\001\000\112\003\162\010\337\012\332\013\124\055" +
    "\155\056\046\061\123\063\015\067\020\070\060\071\156" +
    "\072\134\101\100\112\073\114\127\117\065\127\334\130" +
    "\336\131\026\135\146\136\027\137\052\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\206\153\207\075\210\051\213\021\001\001" +
    "\000\004\027\u0247\001\001\000\004\011\u0248\001\001\000" +
    "\112\003\162\010\337\012\332\013\124\055\155\056\046" +
    "\061\123\063\015\067\020\070\060\071\156\072\134\101" +
    "\100\112\073\114\127\117\065\127\334\130\336\131\026" +
    "\135\146\136\027\137\052\144\157\146\112\147\006\150" +
    "\024\152\126\154\104\156\041\161\054\176\166\177\014" +
    "\206\153\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u024c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0250\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u0258" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\003\162\055\155\056\046" +
    "\061\123\063\015\067\u025f\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\207\075\210\051\213\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\225\061\205" +
    "\062\u0266\117\215\160\207\211\223\212\212\214\214\001" +
    "\001\000\002\001\001\000\004\115\u0268\001\001\000\002" +
    "\001\001\000\010\003\314\120\u026b\142\u026a\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\314\120\u026d" +
    "\001\001\000\002\001\001\000\004\047\u026f\001\001\000" +
    "\020\050\u0275\122\u027f\123\u0270\125\u0276\126\u0278\145\u027e" +
    "\162\u0271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\126\u02ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\162\013\u02aa\055\155\056\046" +
    "\061\123\063\015\067\020\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\026\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\206\153\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\314\120\u028c\163\u028b\001\001\000\004\121\u0283\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\225\061\205\062" +
    "\u0288\117\215\160\207\211\223\212\212\214\214\001\001" +
    "\000\002\001\001\000\022\003\225\061\205\062\u028a\117" +
    "\215\160\207\211\223\212\212\214\214\001\001\000\002" +
    "\001\001\000\004\164\u028f\001\001\000\002\001\001\000" +
    "\006\003\314\120\u02a9\001\001\000\024\003\314\120\u0296" +
    "\165\u0294\166\u0293\167\u0297\170\u0298\172\u0291\173\u0295\174" +
    "\u0292\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\314\120\u0296\167" +
    "\u02a3\170\u0298\172\u0291\173\u0295\174\u0292\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\314\120" +
    "\u029f\171\u029e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\314\120\u02a1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\126\u02a7\175\u02a6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u02ad\001\001\000\004\113" +
    "\u02ae\001\001\000\002\001\001\000\016\003\314\035\u02b0" +
    "\040\316\041\322\120\321\143\315\001\001\000\002\001" +
    "\001\000\004\124\u02b2\001\001\000\002\001\001\000\004" +
    "\011\u02b5\001\001\000\002\001\001\000\112\003\162\010" +
    "\337\012\332\013\124\055\155\056\046\061\123\063\015" +
    "\067\020\070\060\071\156\072\134\101\100\112\073\114" +
    "\127\117\065\127\334\130\336\131\026\135\146\136\027" +
    "\137\052\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\206\153\207\075" +
    "\210\051\213\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\110\u02c8\152\u02b7\001\001\000\002\001\001" +
    "\000\040\003\u01a9\056\046\070\060\071\u01a3\072\134\101" +
    "\100\117\u01a5\131\u02c6\147\006\150\024\152\126\156\041" +
    "\161\054\207\u013b\210\051\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u02be\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\006\110\u02bd\152\u02b7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\162\055\155\056\046\061\123\063\015\067\u02c2\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\111\u02d0\113\u02d1\152\u02cf\001\001\000" +
    "\004\113\u02ce\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\u02d5\001\001\000\002\001\001" +
    "\000\016\003\314\035\u02d7\040\316\041\322\120\321\143" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u02da\001\001\000\112\003\162\010\337\012\332\013" +
    "\124\055\155\056\046\061\123\063\015\067\020\070\060" +
    "\071\156\072\134\101\100\112\073\114\127\117\065\127" +
    "\334\130\336\131\026\135\146\136\027\137\052\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\206\153\207\075\210\051\213\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\162\055\u02e1\056\046" +
    "\061\123\063\015\067\u0100\070\060\071\156\072\134\101" +
    "\100\112\073\117\065\131\u02e0\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\203\u02e2\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\u01a9\017\u02e9\020\u02e4\056\046\070\060\071\u01a3\072\134" +
    "\101\100\117\u01a5\131\u02e7\147\006\150\024\152\126\156" +
    "\041\161\054\202\u02e5\204\u02e6\207\u013b\210\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u01a9\056\046\070\060\071\u01a3" +
    "\072\134\101\100\117\u01a5\131\u02f2\147\006\150\024\152" +
    "\126\156\041\161\054\207\u013b\210\051\001\001\000\046" +
    "\003\u01a9\020\u02ea\056\046\070\060\071\u01a3\072\134\101" +
    "\100\117\u01a5\131\u02e7\147\006\150\024\152\126\156\041" +
    "\161\054\202\u02e5\204\u02eb\207\u013b\210\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\162\010\u02ee" +
    "\013\124\022\u02ef\055\155\056\046\061\123\063\015\067" +
    "\020\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\206\153\207\075" +
    "\210\051\213\021\001\001\000\004\011\u02f0\001\001\000" +
    "\002\001\001\000\002\001\001\000\112\003\162\010\337" +
    "\012\332\013\124\055\155\056\046\061\123\063\015\067" +
    "\020\070\060\071\156\072\134\101\100\112\073\114\127" +
    "\117\065\127\334\130\336\131\026\135\146\136\027\137" +
    "\052\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\206\153\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\162\010\u02ee\013\124\022\u02f4\055\155\056" +
    "\046\061\123\063\015\067\020\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\206\153\207\075\210\051\213\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u02fe\001\001\000\002\001\001\000" +
    "\004\006\u02fc\001\001\000\002\001\001\000\114\003\162" +
    "\007\173\010\164\013\124\055\155\056\046\061\123\063" +
    "\015\067\020\070\060\071\156\072\134\101\100\112\073" +
    "\114\127\117\065\122\130\127\116\130\140\131\026\135" +
    "\146\136\027\137\052\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\206" +
    "\153\207\075\210\051\213\021\001\001\000\002\001\001" +
    "\000\114\003\162\007\173\010\164\013\124\055\155\056" +
    "\046\061\123\063\015\067\020\070\060\071\156\072\134" +
    "\101\100\112\073\114\127\117\065\122\130\127\116\130" +
    "\140\131\026\135\146\136\027\137\052\144\157\146\112" +
    "\147\006\150\024\152\126\154\104\156\041\161\054\176" +
    "\166\177\014\206\153\207\075\210\051\213\021\001\001" +
    "\000\002\001\001\000\044\003\u01a9\014\u0303\015\u0301\056" +
    "\046\070\060\071\u01a3\072\134\101\100\117\u01a5\131\u0302" +
    "\147\006\150\024\152\126\156\041\161\054\207\u013b\210" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u01a9\015\u0306\056" +
    "\046\070\060\071\u01a3\072\134\101\100\117\u01a5\131\u0302" +
    "\147\006\150\024\152\126\156\041\161\054\207\u013b\210" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\110\u02c8\152\u02b7\001\001\000\002\001\001\000\004\060" +
    "\u030b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\003\162\010\337\012\332\013\124\055\155\056" +
    "\046\061\123\063\015\067\020\070\060\071\156\072\134" +
    "\101\100\112\073\114\127\117\065\127\334\130\336\131" +
    "\026\135\146\136\027\137\052\144\157\146\112\147\006" +
    "\150\024\152\126\154\104\156\041\161\054\176\166\177" +
    "\014\206\153\207\075\210\051\213\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\072" +
    "\u0168\075\u0165\076\u01b6\100\u01b5\101\u0166\113\u0148\152\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\110\u02c8\152\u02b7\001\001\000\006\110\u02bd" +
    "\152\u02b7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u01a9\056\046\070\060\071\u01a3\072\134\101\100\116\u0338" +
    "\117\u01a5\131\u01cc\147\006\150\024\152\126\156\041\161" +
    "\054\207\u013b\210\051\001\001\000\002\001\001\000\004" +
    "\065\u032c\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\162\055\155\056\046\061\123\063\015\067\u032e" +
    "\070\060\071\156\072\134\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\042\003\u01a9\056\046" +
    "\070\060\071\u01a3\072\134\101\100\116\u0333\117\u01a5\131" +
    "\u01cc\147\006\150\024\152\126\156\041\161\054\207\u013b" +
    "\210\051\001\001\000\002\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u0331\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\042\003\u01a9\056\046\070\060\071\u01a3\072\134\101\100" +
    "\116\u0332\117\u01a5\131\u01cc\147\006\150\024\152\126\156" +
    "\041\161\054\207\u013b\210\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u0336\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\042\003\u01a9\056\046\070\060\071\u01a3\072\134\101\100" +
    "\116\u0337\117\u01a5\131\u01cc\147\006\150\024\152\126\156" +
    "\041\161\054\207\u013b\210\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\162\055" +
    "\155\056\046\061\123\063\015\067\u033a\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\140\u033e\001\001" +
    "\000\006\003\314\120\u0345\001\001\000\004\141\u033f\001" +
    "\001\000\002\001\001\000\010\003\314\120\u026b\142\u0341" +
    "\001\001\000\002\001\001\000\004\047\u0343\001\001\000" +
    "\020\050\u0275\122\u027f\123\u0270\125\u0276\126\u0278\145\u027e" +
    "\162\u0271\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\162\055\155\056\046\061\123\063\015\067\u0151" +
    "\070\060\071\156\072\134\073\u0347\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\162\055\155\056\046\061\123\063\015\067" +
    "\u034a\070\060\071\156\072\134\101\100\112\073\117\065" +
    "\131\026\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\207\075\210\051" +
    "\213\021\001\001\000\002\001\001\000\076\003\162\010" +
    "\u034e\013\124\030\u034d\055\155\056\046\061\123\063\015" +
    "\067\020\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\206\153\207" +
    "\075\210\051\213\021\001\001\000\004\011\u034f\001\001" +
    "\000\002\001\001\000\002\001\001\000\112\003\162\010" +
    "\337\012\332\013\124\055\155\056\046\061\123\063\015" +
    "\067\020\070\060\071\156\072\134\101\100\112\073\114" +
    "\127\117\065\127\334\130\336\131\026\135\146\136\027" +
    "\137\052\144\157\146\112\147\006\150\024\152\126\154" +
    "\104\156\041\161\054\176\166\177\014\206\153\207\075" +
    "\210\051\213\021\001\001\000\002\001\001\000\070\003" +
    "\162\055\155\056\046\061\123\063\015\067\u0151\070\060" +
    "\071\156\072\134\073\u0352\101\100\112\073\117\065\131" +
    "\026\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\225\061\205\062\u035a" +
    "\117\215\160\207\211\223\212\212\214\214\001\001\000" +
    "\002\001\001\000\022\003\225\061\205\062\u035c\117\215" +
    "\160\207\211\223\212\212\214\214\001\001\000\002\001" +
    "\001\000\004\011\u035e\001\001\000\112\003\162\010\337" +
    "\012\332\013\124\055\155\056\046\061\123\063\015\067" +
    "\020\070\060\071\156\072\134\101\100\112\073\114\127" +
    "\117\065\127\334\130\336\131\026\135\146\136\027\137" +
    "\052\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\206\153\207\075\210" +
    "\051\213\021\001\001\000\010\132\u0362\133\u0363\134\u0361" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\200" +
    "\u0366\201\u0365\001\001\000\004\134\u0364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u0369\001\001\000\112\003\162\010\337" +
    "\012\332\013\124\055\155\056\046\061\123\063\015\067" +
    "\020\070\060\071\156\072\134\101\100\112\073\114\127" +
    "\117\065\127\334\130\336\131\026\135\146\136\027\137" +
    "\052\144\157\146\112\147\006\150\024\152\126\154\104" +
    "\156\041\161\054\176\166\177\014\206\153\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\006\003\314" +
    "\120\u036c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0370\001\001\000\112\003\162" +
    "\010\337\012\332\013\124\055\155\056\046\061\123\063" +
    "\015\067\020\070\060\071\156\072\134\101\100\112\073" +
    "\114\127\117\065\127\334\130\336\131\026\135\146\136" +
    "\027\137\052\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\206\153\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\110\u02c8\152\u02b7\001" +
    "\001\000\006\110\u02bd\152\u02b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\162\053\u037a\054\u037b\055" +
    "\155\056\046\061\123\063\015\067\u0379\070\060\071\156" +
    "\072\134\101\100\112\073\117\065\131\026\144\157\146" +
    "\112\147\006\150\024\152\126\154\104\156\041\161\054" +
    "\176\166\177\014\207\075\210\051\213\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\162\055\155\056\046\061\123\063\015\067\u037d\070" +
    "\060\071\156\072\134\101\100\112\073\117\065\131\026" +
    "\144\157\146\112\147\006\150\024\152\126\154\104\156" +
    "\041\161\054\176\166\177\014\207\075\210\051\213\021" +
    "\001\001\000\002\001\001\000\072\003\162\053\u037f\054" +
    "\u037b\055\155\056\046\061\123\063\015\067\u0379\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\207\075\210\051\213\021\001" +
    "\001\000\002\001\001\000\072\003\162\053\u0381\054\u037b" +
    "\055\155\056\046\061\123\063\015\067\u0379\070\060\071" +
    "\156\072\134\101\100\112\073\117\065\131\026\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\207\075\210\051\213\021\001\001" +
    "\000\002\001\001\000\076\003\162\010\u0385\013\124\021" +
    "\u0383\055\155\056\046\061\123\063\015\067\020\070\060" +
    "\071\156\072\134\101\100\112\073\117\065\131\026\144" +
    "\157\146\112\147\006\150\024\152\126\154\104\156\041" +
    "\161\054\176\166\177\014\206\153\207\075\210\051\213" +
    "\021\001\001\000\002\001\001\000\004\011\u0386\001\001" +
    "\000\002\001\001\000\112\003\162\010\337\012\332\013" +
    "\124\055\155\056\046\061\123\063\015\067\020\070\060" +
    "\071\156\072\134\101\100\112\073\114\127\117\065\127" +
    "\334\130\336\131\026\135\146\136\027\137\052\144\157" +
    "\146\112\147\006\150\024\152\126\154\104\156\041\161" +
    "\054\176\166\177\014\206\153\207\075\210\051\213\021" +
    "\001\001\000\002\001\001\000\066\003\162\055\155\056" +
    "\046\061\123\063\015\067\u0389\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\026\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0394\001" +
    "\001\000\002\001\001\000\006\003\u038d\004\u0393\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\003\162\055\155\056\046\061\123\063\015" +
    "\067\u039d\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\026\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\207\075\210" +
    "\051\213\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\162\055\155\056\046\061\123\063\015\067\u0327" +
    "\070\060\071\156\072\134\101\100\104\u03a3\105\u0328\112" +
    "\073\117\065\131\026\144\157\146\112\147\006\150\024" +
    "\152\126\154\104\156\041\161\054\176\166\177\014\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\162\055\u03a7\056\046\061\123\063\015" +
    "\067\u0100\070\060\071\156\072\134\101\100\112\073\117" +
    "\065\131\u03a6\144\157\146\112\147\006\150\024\152\126" +
    "\154\104\156\041\161\054\176\166\177\014\205\u03a9\207" +
    "\075\210\051\213\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u01a9\056\046\070" +
    "\060\071\u01a3\072\134\101\100\117\u01a5\131\u03af\144\u03ae" +
    "\147\006\150\024\152\126\156\041\161\054\207\u013b\210" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\003\162\055\155\056\046\061\123\063" +
    "\015\067\u03b1\070\060\071\156\072\134\101\100\112\073" +
    "\117\065\131\026\144\157\146\112\147\006\150\024\152" +
    "\126\154\104\156\041\161\054\176\166\177\014\207\075" +
    "\210\051\213\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u03b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\003\162\042\u03b7\043\u0103\055\u0104\056" +
    "\046\061\123\063\015\067\u0100\070\060\071\156\072\134" +
    "\101\100\112\073\117\065\131\u0101\144\157\146\112\147" +
    "\006\150\024\152\126\154\104\156\041\161\054\176\166" +
    "\177\014\207\075\210\051\213\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = Integer.valueOf(Modifiers.AccPublic);
	protected final static Integer PRIVATE = Integer.valueOf(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = Integer.valueOf(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = Integer.valueOf(Modifiers.AccAbstract);
	protected final static Integer FINAL = Integer.valueOf(Modifiers.AccFinal);
	protected final static Integer STATIC = Integer.valueOf(Modifiers.AccStatic);

	AST ast;

	public final void setAST (AST ast) {
		this.ast = ast;
	}

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable) property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (FunctionInvocation) property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

	protected VariableBase createDispatch(VariableBase dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected VariableBase resolveDimList(VariableBase variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			variable = new ArrayAccess(variable.getStart(), el.right, ast, variable, el.index, el.type);
		}
		return variable;
	}

	/** Report a non fatal error (or warning).  This method takes a message
	 *  string and an additional object (to be used by specializations
	 *  implemented in subclasses). Here in the base class a very simple
	 *  implementation is provided which simply prints the message to
	 *  System.err.
	 *
	 * @param message an error message.
	 * @param info    an extra object reserved for use by specialized subclasses.
	 */
	public void report_error(String message, Object info)
	{
		if (DLTKCore.DEBUG) {
			super.report_error(message, info);
		}
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}

	public void report_fatal_error(
	String message,
	Object info)
	throws java.lang.Exception
	{
		/* stop parsing (not really necessary since we throw an exception, but) */
		done_parsing();

		/* use the normal error message reporting to put out the message */
		report_error(message, info);

		/* throw an exception */
		// throw new Exception("Can't recover from previous error(s)");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PHPAstParser$actions {
  private final PHPAstParser parser;

  /** Constructor */
  CUP$PHPAstParser$actions(PHPAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000000(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	PHPAstLexer phpAstLexer = (PHPAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	RESULT = new Program(sListleft, sListright, parser.ast, sList, commentList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAstParser$parser.done_parsing();
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= T_STRING 
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= T_DEFINE 
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			// EmptyStatement length == 2 means it is "?>",
			// equals to 1 means it is ";"
			if (!(statement instanceof EmptyStatement && statement.getLength() >= 2) && lastStatement instanceof NamespaceDeclaration && !((NamespaceDeclaration) lastStatement).isBracketed()) {
				((NamespaceDeclaration) lastStatement).addStatement(statement);
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, null,
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(useDecl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_declaration ::= namespace_name 
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(sleft, listright, parser.ast,
		new NamespaceName(sleft, listright, parser.ast, list, true, false), null);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(sleft, aliasNameright, parser.ast,
		new NamespaceName(sleft, listright, parser.ast, list, true, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		sList.add(statement);
	}
	RESULT = sList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(tokenleft, eright, parser.ast, sList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int s = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int s = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List conds = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForStatement(tokenleft, statementright, parser.ast, initializations, conds, increasements, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= yield_expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		YieldExpression expr = (YieldExpression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GlobalStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(sleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, exprright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "use")), list));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, closeParright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "unset")), list));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_key foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, key, var, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new DeclareStatement(sleft, statementright, parser.ast, lists[0], lists[1], statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int finallyClauseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int finallyClauseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FinallyClause finallyClause = (FinallyClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TryStatement s = new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright, parser.ast, new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList), catchesList, finallyClause);

	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(sleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // catches_list ::= non_empty_catches_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // catches_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_empty_catches_list ::= catch_clause 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // non_empty_catches_list ::= non_empty_catches_list catch_clause 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className,
		new Variable(varleft, varright, parser.ast, var),
		new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("catch_clause",90, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // finally_clause ::= non_empty_finally_clause 
            {
              FinallyClause RESULT =null;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FinallyClause clause = (FinallyClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = clause;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",126, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // finally_clause ::= 
            {
              FinallyClause RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",126, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object finally_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, parser.ast, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, parser.ast, finallyBlock);
	RESULT = finallyClause;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_finally_clause",127, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",11, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",85, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",86, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(fnleft, fnright, parser.ast, fn), paramList,
		new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (modifier.intValue() == ClassDeclaration.MODIFIER_TRAIT) {
		RESULT = new TraitDeclaration(modifierleft, blockEndright, parser.ast, ClassDeclaration.MODIFIER_NONE,
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}else{
		RESULT = new ClassDeclaration(modifierleft, blockEndright, parser.ast, modifier.intValue(),
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InterfaceDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(classNameleft, classNameright, parser.ast, className), interfaces,
		new Block(blockStartleft, blockEndright, parser.ast, sList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // class_entry_type ::= T_TRAIT 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_TRAIT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // extends_from ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",75, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",75, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // list_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              ListVariable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(sleft, eright, parser.ast, varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("list_variable",128, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // foreach_expr ::= variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",129, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // foreach_expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",129, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // foreach_key ::= foreach_variable T_DOUBLE_ARROW 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_key",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // foreach_value ::= foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",130, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // foreach_value ::= list_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ListVariable var = (ListVariable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",130, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Reference (sleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
	listValues.add(value);

	RESULT = new List[] { listKeys, listValues };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(cond);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, sListright, parser.ast, sList, false);
	((LinkedList) elseifList[0]).addFirst(cond);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(colonleft, listright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, v, scalar);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, ref_var, scalar);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optional_class_type ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // optional_class_type ::= fully_qualified_class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // optional_class_type ::= T_ARRAY 
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // optional_class_type ::= T_CALLABLE 
            {
              Expression RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object callable = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(callableleft, callableright, parser.ast, "callable");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // class_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	modifier = modifier == null ? PHPAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	RESULT = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // class_statement ::= trait_use_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, parser.ast, list, adaptations);
	RESULT = traitUseStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",112, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<NamespaceName> traitList = new LinkedList<NamespaceName>();
	traitList.add(name);
	RESULT = traitList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",113, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",113, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",114, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",114, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",115, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",115, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",116, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",116, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, parser.ast, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",117, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, parser.ast, alias);
	RESULT = traitAliasStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",117, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, parser.ast, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",118, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<NamespaceName> trList = new LinkedList<NamespaceName>();
	trList.add(className);
	RESULT = trList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",119, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",119, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	//FunctionName name = new FunctionName(sleft, sright, parser.ast,
	//		new Identifier(sleft, sright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new Identifier(sleft, sright, parser.ast, s);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",120, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",120, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	//FunctionName name = new FunctionName(functionNameleft, functionNameright, parser.ast,
	//		new Identifier(functionNameleft, functionNameright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, parser.ast, className, name);
	RESULT = methodReference;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",121, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? functionNameleft : modifierleft;
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	TraitAlias alias = new TraitAlias(referenceleft, functionNameright, parser.ast, reference, modifierValue, modifierOffset, name);
	RESULT = alias;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",122, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // trait_alias ::= trait_method_reference T_AS member_modifier 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? asright + 1 : modifierleft;
	TraitAlias alias = new TraitAlias(referenceleft, modifierright, parser.ast, reference, modifierValue, modifierOffset, null);
	RESULT = alias;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",122, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // trait_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",123, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // trait_modifiers ::= member_modifier 
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",123, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(sleft, eright, parser.ast, list);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PROTECTED;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PRIVATE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.STATIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.ABSTRACT;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.FINAL;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // chain_instance_call ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int openleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(openleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Variable memberProperty = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.resolveDimList(new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList)), list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (memberProperty.list != null) {
		RESULT = new FunctionInvocation(chleft, endright, parser.ast,
				new FunctionName(chleft, memberPropertyright, parser.ast, parser.createDispatch(ch, memberProperty)), paramsList);
	} else {
		RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty.variable), paramsList));
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",125, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
	RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL,
		new Reference(reftokenleft, ctorright, parser.ast,
			new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor)));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_AND_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_OR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MUL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_DIV, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MOD, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_NOT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_TILDA);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= T_OPEN_PARENTHESE yield_expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		YieldExpression expr = (YieldExpression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(startleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= chain_instance_call 
            {
              Expression RESULT =null;
		int chainleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase chain = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = chain;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, ifTrue, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, null, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_OBJECT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_BOOL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_UNSET);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, s)), expList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable ::= array_creation 
            {
              Expression RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ArrayCreation creation = (ArrayCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = creation;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "print")), expList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue(), true, stleft);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // array_creation ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              ArrayCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, parser.ast, list, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_creation",133, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // array_creation ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              ArrayCreation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_creation",133, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // array_creation_dereference ::= array_creation T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ArrayCreation creation = (ArrayCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(creationleft, endright, parser.ast, creation, ex, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_creation_dereference",134, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // array_creation_dereference ::= array_creation_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable creation = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(creationleft, endright, parser.ast, creation, ex, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_creation_dereference",134, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Variable(varleft, varright, parser.ast, var));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000001(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(listleft, eright, parser.ast,
		new FunctionName(listleft, listright, parser.ast,
			new NamespaceName(listleft, listright, parser.ast, list, false, false)), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, listright, parser.ast,
			new NamespaceName(sleft, listright, parser.ast, list, false, true)), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, listright, parser.ast,
			new NamespaceName(sleft, listright, parser.ast, list, true, false)), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase fn = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast,
				fn), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList((VariableBase) finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariable(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, parser.ast, finalVar);
	}
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, finalVar), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList((VariableBase) finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariable(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, parser.ast, finalVar);
	}
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, finalVar), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase fn = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast,
				fn), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(reflectionNameleft, eright, parser.ast,
		new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // function_call ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase call = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(callleft, eright, parser.ast, call, expr, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "static");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // class_name ::= namespace_name 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // fully_qualified_class_name ::= namespace_name 
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // class_name_reference ::= class_name 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",107, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // dynamic_class_name_variable_property ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // string_dereference ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT expr T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(scalarleft, endright, parser.ast, new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING), index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_dereference",137, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // string_dereference ::= string_dereference T_OPEN_RECT expr T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable scalar = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(scalarleft, endright, parser.ast, scalar, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_dereference",137, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // common_scalar ::= T_LNUMBER 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // common_scalar ::= T_DNUMBER 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // common_scalar ::= T_BNUMBER 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_BIN);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // common_scalar ::= T_LINE 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // common_scalar ::= T_FILE 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // common_scalar ::= T_DIR 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // common_scalar ::= T_CLASS_C 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // common_scalar ::= T_TRAIT_C 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__TRAIT__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // common_scalar ::= T_METHOD_C 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // common_scalar ::= T_FUNC_C 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // common_scalar ::= T_NS_C 
            {
              VariableBase RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              VariableBase RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, parser.ast, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              VariableBase RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, parser.ast, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // static_array_creation ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              ArrayCreation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation",135, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // static_array_creation ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              ArrayCreation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation",135, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // static_array_creation_dereference ::= static_array_creation T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ArrayCreation ref = (ArrayCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(refleft, eright, parser.ast, ref, exp, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation_dereference",136, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // static_array_creation_dereference ::= static_array_creation_dereference T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable ref = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(refleft, eright, parser.ast, ref, exp, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation_dereference",136, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // static_string_dereference ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(scalarleft, endright, parser.ast, new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING), index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_string_dereference",138, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // static_string_dereference ::= static_string_dereference T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable scalar = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(scalarleft, endright, parser.ast, scalar, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_string_dereference",138, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase scalar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // static_scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier) list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // static_scalar ::= static_array_creation 
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ArrayCreation arr = (ArrayCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = arr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // static_scalar ::= static_array_creation_dereference 
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable arr = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = arr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // static_scalar ::= static_string_dereference 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable ref = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = ref;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",110, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, "class"));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",110, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier) list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase scalar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_SINGLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // scalar ::= string_dereference 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable ref = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = ref;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // r_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",98, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // w_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",76, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // rw_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",100, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Variable memberProperty = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.resolveDimList(new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList)), list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (memberProperty.list != null) {
		RESULT = new FunctionInvocation(chleft, endright, parser.ast,
				new FunctionName(chleft, memberPropertyright, parser.ast, parser.createDispatch(ch, memberProperty)), paramsList);
	} else {
		RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty.variable), paramsList));
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // field_access_dim_list_indirect_reference ::= field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // field_access_dim_list_indirect_reference ::= simple_indirect_reference field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.refCount = ref_count;
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable finalVar = (Variable) var.variable;
	int end = var.variable.getEnd();
	if (var.refCount > 0) {
		finalVar = (Variable) parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariable(varleft + var.refCount - i - 1, varright, parser.ast, finalVar);
		}
		var.list = null;
		end = varright;
	}
	RESULT = parser.resolveDimList(new StaticFieldAccess(classNameleft, end, parser.ast, className, finalVar), var.list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",102, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable finalVar = (Variable) var.variable;
	int end = var.variable.getEnd();
	if (var.refCount > 0) {
		finalVar = (Variable) parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariable(varleft + var.refCount - i - 1, varright, parser.ast, finalVar);
		}
		var.list = null;
		end = varright;
	}
	RESULT = parser.resolveDimList(new StaticFieldAccess(classNameleft, end, parser.ast, className, finalVar), var.list);;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",102, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // variable_class_name ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",111, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",111, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // base_variable ::= reference_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // base_variable ::= static_member 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // reference_variable ::= compound_variable 
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // reference_variable ::= array_creation_dereference 
            {
              Variable RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable creation = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = creation;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // compound_variable ::= tracked_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(sleft, eright, parser.ast, expr);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // dim_list ::= 
            {
              DimList RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // dim_list ::= dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              DimList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (list == null) {
		list = new DimList();
	}
	list.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // variable_name ::= string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // assignment_list_element ::= list_variable 
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ListVariable list = (ListVariable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // array_pair_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(var, new Variable(stringleft, stringright, parser.ast, string));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new ArrayAccess(varNameleft, cright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new Variable(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(stringleft, stringright, parser.ast, string);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(numleft, numright, parser.ast, num, Scalar.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "isset")), varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "empty")), exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "eval")), exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",103, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",103, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, "class"));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",104, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // yield_arg ::= variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_arg",131, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // yield_arg ::= expr_without_variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_arg",131, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // yield_expr ::= T_YIELD 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, tokenright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",132, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // yield_expr ::= T_YIELD yield_arg 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",132, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // yield_expr ::= T_YIELD yield_arg T_DOUBLE_ARROW yield_arg 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, parser.ast, key, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",132, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$PHPAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$PHPAstParser$do_action_part00000000(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$PHPAstParser$do_action_part00000001(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
