
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package org.eclipse.php.internal.core.ast.scanner.php54;

import java.util.*;
import org.eclipse.dltk.core.DLTKCore;
import org.eclipse.php.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PHPAstParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public PHPAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PHPAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\003\000\002\006\004" +
    "\000\002\006\002\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\006\000\002\007\005\000\002" +
    "\007\007\000\002\007\006\000\002\007\005\000\002\007" +
    "\004\000\002\005\005\000\002\005\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\004\000\002\004\006\000" +
    "\002\011\004\000\002\011\002\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\010" +
    "\003\000\002\010\004\000\002\013\005\000\002\013\011" +
    "\000\002\013\014\000\002\013\007\000\002\013\011\000" +
    "\002\013\013\000\002\013\007\000\002\013\004\000\002" +
    "\013\005\000\002\013\004\000\002\013\005\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\013\004\000\002\013\005\000\002\013\007\000\002" +
    "\013\012\000\002\013\012\000\002\013\007\000\002\013" +
    "\003\000\002\013\017\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\004\000\002\013\005\000" +
    "\002\132\003\000\002\132\002\000\002\133\003\000\002" +
    "\133\004\000\002\134\012\000\002\014\003\000\002\014" +
    "\005\000\002\015\003\000\002\016\003\000\002\016\005" +
    "\000\002\127\003\000\002\130\003\000\002\051\002\000" +
    "\002\051\003\000\002\135\013\000\002\136\011\000\002" +
    "\136\010\000\002\137\003\000\002\137\004\000\002\137" +
    "\004\000\002\137\003\000\002\140\002\000\002\140\004" +
    "\000\002\114\003\000\002\115\002\000\002\115\004\000" +
    "\002\141\002\000\002\141\004\000\002\142\003\000\002" +
    "\142\005\000\002\017\002\000\002\017\004\000\002\020" +
    "\003\000\002\020\004\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\023\003\000" +
    "\002\023\005\000\002\024\005\000\002\024\007\000\002" +
    "\025\005\000\002\025\006\000\002\025\005\000\002\025" +
    "\006\000\002\026\002\000\002\026\007\000\002\026\006" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\031\002\000\002\031\010\000\002" +
    "\032\002\000\002\032\011\000\002\033\002\000\002\033" +
    "\004\000\002\034\002\000\002\034\005\000\002\035\003" +
    "\000\002\035\002\000\002\040\003\000\002\040\005\000" +
    "\002\041\004\000\002\041\005\000\002\041\006\000\002" +
    "\041\007\000\002\143\002\000\002\143\003\000\002\143" +
    "\003\000\002\143\003\000\002\042\003\000\002\042\002" +
    "\000\002\043\003\000\002\043\003\000\002\043\004\000" +
    "\002\043\005\000\002\043\005\000\002\043\006\000\002" +
    "\044\005\000\002\044\003\000\002\045\003\000\002\045" +
    "\004\000\002\045\006\000\002\046\005\000\002\046\007" +
    "\000\002\046\003\000\002\046\005\000\002\047\004\000" +
    "\002\047\002\000\002\050\005\000\002\050\004\000\002" +
    "\050\012\000\002\050\004\000\002\050\003\000\002\162" +
    "\005\000\002\163\003\000\002\163\005\000\002\164\003" +
    "\000\002\164\005\000\002\165\002\000\002\165\003\000" +
    "\002\166\003\000\002\166\004\000\002\167\004\000\002" +
    "\167\004\000\002\170\005\000\002\171\003\000\002\171" +
    "\005\000\002\172\003\000\002\172\003\000\002\173\005" +
    "\000\002\174\006\000\002\174\005\000\002\175\002\000" +
    "\002\175\003\000\002\124\003\000\002\124\005\000\002" +
    "\145\003\000\002\145\003\000\002\123\002\000\002\123" +
    "\003\000\002\125\003\000\002\125\004\000\002\126\003" +
    "\000\002\126\003\000\002\126\003\000\002\126\003\000" +
    "\002\126\003\000\002\126\003\000\002\121\005\000\002" +
    "\121\007\000\002\121\003\000\002\121\005\000\002\122" +
    "\007\000\002\122\006\000\002\052\005\000\002\052\003" +
    "\000\002\053\002\000\002\053\003\000\002\054\005\000" +
    "\002\054\003\000\002\176\005\000\002\176\005\000\002" +
    "\176\005\000\002\176\011\000\002\176\011\000\002\177" +
    "\005\000\002\055\010\000\002\055\005\000\002\055\006" +
    "\000\002\055\010\000\002\055\004\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\055\004\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\004\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\003\000\002\055" +
    "\003\000\002\055\007\000\002\055\006\000\002\055\003" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\004\000\002\055\004\000\002\055\004\000\002\055" +
    "\003\000\002\055\006\000\002\055\005\000\002\055\005" +
    "\000\002\055\004\000\002\055\013\000\002\055\014\000" +
    "\002\036\002\000\002\036\006\000\002\037\005\000\002" +
    "\037\006\000\002\037\003\000\002\037\004\000\002\056" +
    "\006\000\002\056\010\000\002\056\007\000\002\056\010" +
    "\000\002\056\010\000\002\056\010\000\002\056\010\000" +
    "\002\056\006\000\002\056\006\000\002\117\003\000\002" +
    "\117\003\000\002\117\005\000\002\117\004\000\002\120" +
    "\003\000\002\120\005\000\002\120\004\000\002\153\003" +
    "\000\002\153\003\000\002\155\003\000\002\157\003\000" +
    "\002\157\005\000\002\157\005\000\002\057\002\000\002" +
    "\057\004\000\002\057\005\000\002\107\002\000\002\107" +
    "\003\000\002\107\003\000\002\060\002\000\002\060\005" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\005" +
    "\000\002\061\004\000\002\062\003\000\002\062\003\000" +
    "\002\062\005\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\062\006\000\002\062\005\000\002\062" +
    "\003\000\002\160\005\000\002\063\003\000\002\063\003" +
    "\000\002\063\005\000\002\063\004\000\002\063\003\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\064\002\000\002\064\004\000\002\065\002\000\002\065" +
    "\003\000\002\066\007\000\002\066\005\000\002\066\005" +
    "\000\002\066\003\000\002\067\003\000\002\067\003\000" +
    "\002\144\003\000\002\116\003\000\002\146\003\000\002" +
    "\131\003\000\002\131\005\000\002\131\005\000\002\131" +
    "\011\000\002\131\011\000\002\147\003\000\002\147\004" +
    "\000\002\076\003\000\002\076\004\000\002\075\006\000" +
    "\002\075\006\000\002\075\003\000\002\150\005\000\002" +
    "\150\005\000\002\071\003\000\002\161\003\000\002\161" +
    "\003\000\002\156\003\000\002\156\004\000\002\156\003" +
    "\000\002\070\006\000\002\070\006\000\002\070\003\000" +
    "\002\072\003\000\002\072\006\000\002\073\002\000\002" +
    "\073\003\000\002\077\002\000\002\077\006\000\002\074" +
    "\006\000\002\074\006\000\002\074\003\000\002\100\003" +
    "\000\002\100\005\000\002\101\003\000\002\101\004\000" +
    "\002\102\005\000\002\102\003\000\002\103\003\000\002" +
    "\103\006\000\002\103\002\000\002\104\002\000\002\104" +
    "\004\000\002\105\007\000\002\105\005\000\002\105\005" +
    "\000\002\105\003\000\002\105\010\000\002\105\006\000" +
    "\002\105\006\000\002\105\004\000\002\106\004\000\002" +
    "\106\004\000\002\106\004\000\002\106\003\000\002\106" +
    "\004\000\002\110\003\000\002\110\006\000\002\110\005" +
    "\000\002\110\005\000\002\110\010\000\002\110\005\000" +
    "\002\110\005\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\112\006\000\002\112\006\000\002\112" +
    "\004\000\002\112\004\000\002\112\006\000\002\112\004" +
    "\000\002\112\004\000\002\151\003\000\002\151\005\000" +
    "\002\154\005\000\002\154\005\000\002\152\003\000\002" +
    "\113\003\000\002\113\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u038c\000\002\001\ufffb\000\004\002\u038e\001\002\000" +
    "\250\003\127\004\156\005\171\006\116\007\012\010\066" +
    "\011\035\013\064\015\102\020\141\021\022\022\134\023" +
    "\130\024\046\026\034\030\111\032\170\035\113\037\142" +
    "\043\057\044\133\045\075\046\117\047\147\050\150\051" +
    "\042\053\166\054\027\055\011\057\104\060\161\061\032" +
    "\062\061\063\033\064\154\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\104\070\107\106" +
    "\110\140\111\043\112\072\113\024\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\044\215\065\216\017\222\164\225" +
    "\110\226\122\227\062\230\105\232\132\234\126\001\001" +
    "\000\002\001\ufebe\000\004\222\u038b\001\002\000\002\001" +
    "\uffcb\000\006\013\u0380\225\u0381\001\002\000\002\001\ufec2" +
    "\000\002\001\ufefc\000\004\222\u037c\001\002\000\154\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\002\001\ufeee\000\004\063\u037a\001\002" +
    "\000\070\034\u010a\123\u0102\124\u0112\125\374\143\377\144" +
    "\u0379\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\001\002\000\002\001\ufebc\000\154\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\002\001\ufe83\000\232\003\127\004\156" +
    "\005\171\006\116\007\012\010\066\011\174\013\064\015" +
    "\102\020\141\021\022\022\134\023\130\024\046\026\034" +
    "\030\111\032\170\035\113\037\142\043\057\044\133\045" +
    "\075\046\177\050\150\051\042\053\166\054\223\055\011" +
    "\057\104\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\104\070\107\176" +
    "\110\140\111\043\112\072\113\024\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\044\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\040\067\366\127\354" +
    "\130\357\131\355\132\367\133\360\134\365\135\362\136" +
    "\364\137\356\140\353\141\361\142\363\174\ufe97\175\ufe97" +
    "\001\ufe99\000\002\001\uffb9\000\014\011\174\020\236\112" +
    "\u036c\114\060\222\234\001\002\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\004\222\u0365\001\002\000" +
    "\002\001\uffb3\000\004\222\u0355\001\002\000\004\224\u0354" +
    "\001\uffff\000\014\013\064\017\u0352\101\330\102\u029b\103" +
    "\u029a\001\002\000\154\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\164\114\165\073\171\157\172\015\174\055\175\165\176" +
    "\030\177\145\200\041\201\137\202\100\203\146\204\074" +
    "\205\037\206\054\210\103\214\175\222\164\225\110\226" +
    "\122\227\062\230\105\234\126\001\002\000\002\001\ufe87" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\004\104\u0338\001\002\000" +
    "\002\001\ufebd\000\006\013\u032f\046\u01af\001\ufed8\000\004" +
    "\206\u032c\001\ufe86\000\004\222\u0324\001\002\000\002\001" +
    "\ufeba\000\004\011\u031a\001\002\000\002\001\ufeb9\000\004" +
    "\222\u0317\001\002\000\002\001\ufe96\000\156\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\151\u0304\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\ufe6d\000\020\011\174\013\064\107\u0188\112\u0184" +
    "\114\060\214\277\225\110\001\002\000\012\104\u0132\106" +
    "\ufe88\206\u0133\222\ufe91\001\ufe85\000\156\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\144\u0300\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\002\001\ufffd\000\004\222\u02fd\001\002\000" +
    "\012\013\064\017\u02fb\102\u029b\103\u029a\001\ufec8\000\004" +
    "\106\u02f7\001\002\000\002\001\ufe49\000\004\063\u02f6\001" +
    "\002\000\002\001\ufec1\000\154\004\156\006\116\007\012" +
    "\010\066\011\174\013\064\020\141\035\113\046\177\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\107\176\110\140\111\043\112" +
    "\072\114\060\115\031\116\076\117\052\120\136\121\115" +
    "\126\067\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\002\000\002" +
    "\001\uffea\000\002\001\ufef8\000\006\011\174\114\060\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\004\011\u02ee\001\002\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\006\013\064\225\u013c\001\002\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\002\001\ufeab\000\002\001\uffd2\000\020\011\174\013" +
    "\064\107\u0124\112\u011d\114\060\214\277\225\110\001\002" +
    "\000\004\222\u02e1\001\002\000\012\013\064\017\u029c\102" +
    "\u029b\103\u029a\001\002\000\012\011\174\104\u02d7\112\336" +
    "\114\060\001\002\000\006\174\u02d5\175\u02d6\001\002\000" +
    "\004\104\u013d\001\ufe74\000\004\222\u02bf\001\002\000\002" +
    "\001\ufff9\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\002\001\ufec3\000\004" +
    "\151\201\001\uffb8\000\002\001\ufea7\000\002\001\uffe5\000" +
    "\012\013\064\017\u029c\102\u029b\103\u029a\001\002\000\002" +
    "\001\ufe7f\000\004\011\u0247\001\002\000\006\122\u0242\144" +
    "\u0243\001\002\000\002\001\ufebb\000\002\001\uffc7\000\232" +
    "\003\127\004\156\005\171\006\116\007\012\010\066\011" +
    "\035\013\064\015\102\020\141\021\022\022\134\023\130" +
    "\024\046\026\034\030\111\032\170\035\113\037\142\043" +
    "\057\044\133\045\075\046\177\050\150\051\042\053\166" +
    "\054\223\055\011\057\104\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\104\070\107\176\110\140\111\043\112\072\113\024\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\144\010\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\044\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\002\000\002" +
    "\001\ufe80\000\002\001\uffb0\000\156\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\144\u0239\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\002\001\ufff8\000\154" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\175\222\164\225\110\226\122\227\062\230\105" +
    "\234\126\001\002\000\154\004\156\006\116\007\012\010" +
    "\066\011\174\013\064\020\141\035\113\046\177\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\107\176\110\140\111\043\112\072" +
    "\114\060\115\031\116\076\117\052\120\136\121\115\126" +
    "\067\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\175\222\164\225\110" +
    "\226\122\227\062\230\105\234\126\001\002\000\002\001" +
    "\ufeb8\000\002\001\ufec0\000\004\222\u0219\001\002\000\002" +
    "\001\ufebf\000\002\001\uffba\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\154\004\156\006\116\007\012\010\066\011\174\013\064" +
    "\020\141\035\113\046\177\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\107\176\110\140\111\043\112\072\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\002\000\004\011\u0214\001\002\000\156" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\144\u020f\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\002\001\ufe9a\000\004\106" +
    "\u020d\001\002\000\002\001\ufe9b\000\002\001\uffad\000\010" +
    "\106\ufed7\112\255\222\u018a\001\ufeaa\000\004\222\u0208\001" +
    "\ufecb\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\002\001\ufffa\000\004" +
    "\222\u0201\001\002\000\004\067\u01f6\001\ufefb\000\004\222" +
    "\u01e9\001\002\000\154\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\164\114\165\073\171\157\172\015\174\055\175\165\176" +
    "\030\177\145\200\041\201\137\202\100\203\146\204\074" +
    "\205\037\206\054\210\103\214\175\222\164\225\110\226" +
    "\122\227\062\230\105\234\126\001\002\000\020\011\174" +
    "\013\064\107\u0188\112\u0184\114\060\214\277\225\110\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\002\001\ufffc\000\004" +
    "\222\u01d2\001\002\000\004\222\172\001\002\000\154\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\070\034\u010a\123\u0102\124\u0112\125\374" +
    "\143\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152" +
    "\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100" +
    "\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167" +
    "\u0107\170\372\173\376\223\u01b8\001\002\000\002\001\uffff" +
    "\000\004\046\u01af\001\ufed8\000\004\112\336\001\002\000" +
    "\004\151\201\001\uffb8\000\004\222\202\001\002\000\002" +
    "\001\uffb7\000\020\011\174\072\203\107\210\112\213\114" +
    "\060\223\uff86\233\207\001\uff7f\000\002\001\uff7d\000\004" +
    "\112\255\001\ufed4\000\006\013\264\151\263\001\002\000" +
    "\004\122\261\001\uff87\000\002\001\uff7c\000\004\112\257" +
    "\001\002\000\002\001\uff7e\000\002\001\uff85\000\006\011" +
    "\174\114\060\001\002\000\004\223\215\001\002\000\004" +
    "\054\216\001\ufee7\000\004\222\242\001\002\000\004\104" +
    "\220\001\002\000\002\001\uffea\000\250\003\127\004\156" +
    "\005\171\006\116\007\012\010\066\011\035\013\064\015" +
    "\102\020\141\021\022\022\134\023\130\024\046\026\034" +
    "\030\111\032\170\035\113\037\142\043\057\044\133\045" +
    "\075\046\117\050\150\051\042\053\166\054\223\055\011" +
    "\057\104\060\161\061\032\062\224\063\033\064\154\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\104\070\105\226\107\176\110\140\111\043\112" +
    "\072\113\024\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\144\010\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\044\215\065\216\017\222\164\225\110\226\122\227\062" +
    "\230\105\232\132\234\126\001\002\000\002\001\uffeb\000" +
    "\006\020\236\222\234\001\002\000\004\222\231\001\002" +
    "\000\002\001\uffe8\000\002\001\ufee9\000\002\001\uffe7\000" +
    "\002\001\uffe9\000\004\223\232\001\002\000\004\144\233" +
    "\001\002\000\002\001\uffe6\000\004\020\240\001\002\000" +
    "\004\144\237\001\002\000\002\001\uffbc\000\002\001\uffd0" +
    "\000\004\223\241\001\002\000\002\001\uffbb\000\006\013" +
    "\245\151\243\001\002\000\004\013\253\001\002\000\006" +
    "\122\247\223\246\001\002\000\002\001\ufee3\000\002\001" +
    "\ufee6\000\006\013\251\151\250\001\002\000\004\013\252" +
    "\001\002\000\002\001\ufee5\000\002\001\ufee4\000\002\001" +
    "\ufee2\000\004\112\255\001\ufed2\000\004\011\256\001\002" +
    "\000\002\001\ufffe\000\006\011\174\114\060\001\002\000" +
    "\004\112\255\001\ufed3\000\016\011\174\072\203\107\210" +
    "\112\213\114\060\233\207\001\uff7f\000\002\001\uff84\000" +
    "\004\013\333\001\002\000\004\127\265\001\uff83\000\056" +
    "\006\116\007\012\010\066\011\174\020\141\072\273\073" +
    "\021\074\047\075\051\076\143\077\006\100\266\107\301" +
    "\110\140\111\043\112\272\114\060\164\300\165\270\206" +
    "\274\214\277\234\126\001\002\000\006\017\331\101\330" +
    "\001\002\000\002\001\ufeb5\000\056\006\116\007\012\010" +
    "\066\011\174\020\141\072\273\073\021\074\047\075\051" +
    "\076\143\077\006\100\266\107\301\110\140\111\043\112" +
    "\272\114\060\164\300\165\270\206\274\214\277\234\126" +
    "\001\002\000\002\001\ufead\000\006\011\174\114\060\001" +
    "\002\000\004\222\323\001\002\000\056\006\116\007\012" +
    "\010\066\011\174\020\141\072\273\073\021\074\047\075" +
    "\051\076\143\077\006\100\266\107\301\110\140\111\043" +
    "\112\272\114\060\164\300\165\270\206\274\214\277\234" +
    "\126\001\ufea3\000\004\106\306\001\002\000\002\001\uff81" +
    "\000\002\001\ufed8\000\056\006\116\007\012\010\066\011" +
    "\174\020\141\072\273\073\021\074\047\075\051\076\143" +
    "\077\006\100\266\107\301\110\140\111\043\112\272\114" +
    "\060\164\300\165\270\206\274\214\277\234\126\001\002" +
    "\000\004\112\303\001\002\000\006\106\ufed7\112\255\001" +
    "\ufeb4\000\006\011\174\114\060\001\002\000\006\106\ufed6" +
    "\112\255\001\ufeb3\000\002\001\ufeb1\000\004\011\307\001" +
    "\002\000\002\001\ufeac\000\004\207\322\001\002\000\004" +
    "\122\315\001\ufea1\000\004\070\313\001\ufe9c\000\056\006" +
    "\116\007\012\010\066\011\174\020\141\072\273\073\021" +
    "\074\047\075\051\076\143\077\006\100\266\107\301\110" +
    "\140\111\043\112\272\114\060\164\300\165\270\206\274" +
    "\214\277\234\126\001\002\000\002\001\ufe9d\000\056\006" +
    "\116\007\012\010\066\011\174\020\141\072\273\073\021" +
    "\074\047\075\051\076\143\077\006\100\266\107\301\110" +
    "\140\111\043\112\272\114\060\164\300\165\270\206\274" +
    "\214\277\234\126\001\ufea0\000\002\001\ufea2\000\004\070" +
    "\320\001\ufe9e\000\056\006\116\007\012\010\066\011\174" +
    "\020\141\072\273\073\021\074\047\075\051\076\143\077" +
    "\006\100\266\107\301\110\140\111\043\112\272\114\060" +
    "\164\300\165\270\206\274\214\277\234\126\001\002\000" +
    "\002\001\ufe9f\000\002\001\ufeae\000\056\006\116\007\012" +
    "\010\066\011\174\020\141\072\273\073\021\074\047\075" +
    "\051\076\143\077\006\100\266\107\301\110\140\111\043" +
    "\112\272\114\060\164\300\165\270\206\274\214\277\234" +
    "\126\001\ufea3\000\004\223\325\001\002\000\002\001\ufeaf" +
    "\000\006\106\ufed5\112\255\001\ufeb2\000\002\001\ufeb0\000" +
    "\002\001\ufeb6\000\004\101\332\001\002\000\002\001\ufeb7" +
    "\000\004\127\334\001\uff82\000\056\006\116\007\012\010" +
    "\066\011\174\020\141\072\273\073\021\074\047\075\051" +
    "\076\143\077\006\100\266\107\301\110\140\111\043\112" +
    "\272\114\060\164\300\165\270\206\274\214\277\234\126" +
    "\001\002\000\002\001\uff80\000\006\011\174\114\060\001" +
    "\002\000\010\106\ufed6\112\255\222\340\001\ufea9\000\156" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\151\342\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\uff7a\000\004\223\u01ae\001\002\000" +
    "\020\011\174\013\064\107\u0188\112\u0184\114\060\214\277" +
    "\225\110\001\002\000\066\034\u010a\123\u0102\124\u0112\125" +
    "\374\143\377\145\373\146\u010c\147\375\150\u0104\151\u010b" +
    "\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160" +
    "\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108" +
    "\167\u0107\170\372\173\376\001\002\000\044\067\366\122" +
    "\uff78\127\354\130\357\131\355\132\367\133\360\134\365" +
    "\135\362\136\364\137\356\140\353\141\361\142\363\174" +
    "\ufe97\175\ufe97\223\uff78\001\ufe99\000\004\122\347\001\uff7b" +
    "\000\006\122\uff79\223\uff79\001\ufe9a\000\156\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\151\350\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\020\011\174\013\064\107\u0188\112\u0184" +
    "\114\060\214\277\225\110\001\002\000\044\067\366\122" +
    "\uff75\127\354\130\357\131\355\132\367\133\360\134\365" +
    "\135\362\136\364\137\356\140\353\141\361\142\363\174" +
    "\ufe97\175\ufe97\223\uff75\001\ufe99\000\006\122\uff76\223\uff76" +
    "\001\ufe9a\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\156\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\151\u0181\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\154\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\164\114\165\073\171\157\172\015\174\055\175\165\176" +
    "\030\177\145\200\041\201\137\202\100\203\146\204\074" +
    "\205\037\206\054\210\103\214\175\222\164\225\110\226" +
    "\122\227\062\230\105\234\126\001\002\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\154\004\156\006\116\007\012\010\066\011\174\013\064" +
    "\020\141\035\113\046\177\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\107\176\110\140\111\043\112\072\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\002\000\014\011\u012f\013\064\104\u0130" +
    "\114\u012e\225\110\001\002\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\060\034\u010a\143\377\145\373\146\u010c\147\375\150\u0104" +
    "\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157" +
    "\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101" +
    "\166\u0108\167\u0107\170\372\173\376\001\uff27\000\154\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\154\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\164\114\165\073\171\157\172\015\174\055\175\165\176" +
    "\030\177\145\200\041\201\137\202\100\203\146\204\074" +
    "\205\037\206\054\210\103\214\175\222\164\225\110\226" +
    "\122\227\062\230\105\234\126\001\002\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\156\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\224\u0161\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\154\004\156\006\116\007\012\010\066\011\174\013\064" +
    "\020\141\035\113\046\177\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\107\176\110\140\111\043\112\072\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\002\000\154\004\156\006\116\007\012" +
    "\010\066\011\174\013\064\020\141\035\113\046\177\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\107\176\110\140\111\043\112" +
    "\072\114\060\115\031\116\076\117\052\120\136\121\115" +
    "\126\067\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\002\000\154" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\175\222\164\225\110\226\122\227\062\230\105" +
    "\234\126\001\002\000\154\004\156\006\116\007\012\010" +
    "\066\011\174\013\064\020\141\035\113\046\177\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\107\176\110\140\111\043\112\072" +
    "\114\060\115\031\116\076\117\052\120\136\121\115\126" +
    "\067\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\175\222\164\225\110" +
    "\226\122\227\062\230\105\234\126\001\002\000\020\011" +
    "\174\013\064\107\u0124\112\u011d\114\060\214\277\225\110" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\154\004\156\006\116\007\012\010\066\011\174\013\064" +
    "\020\141\035\113\046\177\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\107\176\110\140\111\043\112\072\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\002\000\154\004\156\006\116\007\012" +
    "\010\066\011\174\013\064\020\141\035\113\046\177\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\107\176\110\140\111\043\112" +
    "\072\114\060\115\031\116\076\117\052\120\136\121\115" +
    "\126\067\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\002\000\062" +
    "\034\u010a\125\374\143\377\145\373\146\u010c\147\375\150" +
    "\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f" +
    "\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165" +
    "\u0101\166\u0108\167\u0107\170\372\173\376\001\uff16\000\012" +
    "\034\u010a\166\u0108\167\u0107\170\372\001\uff11\000\034\034" +
    "\u010a\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106" +
    "\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001" +
    "\uff04\000\024\034\u010a\162\u0109\163\u0106\164\u0111\165\u0101" +
    "\166\u0108\167\u0107\170\372\173\376\001\uff01\000\024\034" +
    "\u010a\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\001\ufeff\000\024\034\u010a\162\u0109\163" +
    "\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376" +
    "\001\uff00\000\052\034\u010a\147\375\150\u0104\151\u010b\152" +
    "\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100" +
    "\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167" +
    "\u0107\170\372\173\376\001\uff19\000\044\034\u010a\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\001\uff14\000\002\001\ufed0\000\004\106" +
    "\u0154\001\002\000\006\011\174\114\060\001\002\000\010" +
    "\104\u0132\106\ufe88\206\u0133\001\ufe85\000\004\106\u0147\001" +
    "\ufed1\000\002\001\ufefe\000\002\001\ufece\000\006\013\064" +
    "\225\u013c\001\002\000\004\067\u0128\001\ufecf\000\004\112" +
    "\u0126\001\002\000\004\112\255\001\ufed7\000\006\011\174" +
    "\114\060\001\002\000\004\112\255\001\ufed6\000\014\011" +
    "\u012f\013\064\104\u0130\114\u012e\225\110\001\002\000\002" +
    "\001\ufe76\000\002\001\ufe77\000\002\001\ufecd\000\006\104" +
    "\u0140\206\u0141\001\ufecc\000\006\013\064\225\u013c\001\002" +
    "\000\002\001\ufe47\000\002\001\ufe48\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\006\104\u0132\206\u0133\001\ufe91\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\ufe7d\000\066\034\u010a\123" +
    "\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147\375" +
    "\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156" +
    "\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\001\ufe7c\000" +
    "\004\207\u0136\001\002\000\002\001\ufe82\000\070\034\u010a" +
    "\105\u0138\123\u0102\124\u0112\125\374\143\377\145\373\146" +
    "\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371" +
    "\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163" +
    "\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376" +
    "\001\002\000\002\001\ufe81\000\070\034\u010a\105\u013a\123" +
    "\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147\375" +
    "\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156" +
    "\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\001\002\000" +
    "\002\001\ufe75\000\006\104\u0132\206\u0133\001\ufe90\000\004" +
    "\104\u013d\001\ufe73\000\154\004\156\006\116\007\012\010" +
    "\066\011\174\013\064\020\141\035\113\046\177\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\107\176\110\140\111\043\112\072" +
    "\114\060\115\031\116\076\117\052\120\136\121\115\126" +
    "\067\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\175\222\164\225\110" +
    "\226\122\227\062\230\105\234\126\001\002\000\070\034" +
    "\u010a\105\u013f\123\u0102\124\u0112\125\374\143\377\145\373" +
    "\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154" +
    "\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109" +
    "\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\001\002\000\002\001\ufe7e\000\154\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\002" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\ufe7d\000\004\207\u0143\001\002\000" +
    "\002\001\ufe79\000\070\034\u010a\105\u0145\123\u0102\124\u0112" +
    "\125\374\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\002\000\002\001\ufe78" +
    "\000\006\104\u0132\206\u0133\001\ufe84\000\006\013\064\225" +
    "\110\001\002\000\006\104\u014d\206\u014e\001\ufe8f\000\006" +
    "\013\064\225\u013c\001\002\000\002\001\ufe8a\000\002\001" +
    "\ufe8b\000\006\104\u014d\206\u014e\001\ufe8e\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\ufe7d\000\004\207\u0150\001" +
    "\002\000\002\001\ufe8d\000\070\034\u010a\105\u0152\123\u0102" +
    "\124\u0112\125\374\143\377\145\373\146\u010c\147\375\150" +
    "\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f" +
    "\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165" +
    "\u0101\166\u0108\167\u0107\170\372\173\376\001\002\000\002" +
    "\001\ufe8c\000\004\112\255\001\ufed5\000\006\013\064\225" +
    "\110\001\002\000\002\001\ufe89\000\020\034\u010a\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\001\uff0c\000" +
    "\004\034\u010a\001\uff0f\000\004\034\u010a\001\uff0e\000\020" +
    "\034\u010a\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\001\uff0b\000\034\034\u010a\156\u010f\157\u010e\160\u0100" +
    "\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167" +
    "\u0107\170\372\173\376\001\uff03\000\046\034\u010a\151\u010b" +
    "\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160" +
    "\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108" +
    "\167\u0107\170\372\173\376\001\uff13\000\034\034\u010a\156" +
    "\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\001\uff05\000" +
    "\064\034\u010a\124\u0112\125\374\143\377\145\373\146\u010c" +
    "\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155" +
    "\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106" +
    "\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001" +
    "\uff18\000\012\034\u010a\166\u0108\167\u0107\170\372\001\uff10" +
    "\000\024\034\u010a\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\uff02\000\070\034\u010a" +
    "\123\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147" +
    "\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103" +
    "\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164" +
    "\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\224\u0163" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\066\034\u010a\123" +
    "\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147\375" +
    "\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156" +
    "\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\001\ufef9\000" +
    "\154\004\156\006\116\007\012\010\066\011\174\013\064" +
    "\020\141\035\113\046\177\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\107\176\110\140\111\043\112\072\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\002\000\066\034\u010a\123\u0102\124\u0112" +
    "\125\374\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\ufefa\000\012\034\u010a" +
    "\166\u0108\167\u0107\170\372\001\uff12\000\050\034\u010a\150" +
    "\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f" +
    "\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165" +
    "\u0101\166\u0108\167\u0107\170\372\173\376\001\uff15\000\060" +
    "\034\u010a\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\uff17\000\054\034\u010a" +
    "\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154" +
    "\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109" +
    "\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\001\uff1a\000\004\034\u010a\001\uff0d\000\034\034\u010a" +
    "\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164" +
    "\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001\uff06" +
    "\000\004\222\u0174\001\ufe95\000\010\104\u0140\206\u0141\222" +
    "\u016d\001\ufe94\000\156\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\151\342\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\uff7a\000\004" +
    "\223\u016f\001\002\000\002\001\ufe7b\000\004\206\u0171\001" +
    "\ufe92\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\ufe7d\000\004\207\u0173\001\002" +
    "\000\002\001\ufe7a\000\156\004\156\006\116\007\012\010" +
    "\066\011\174\013\064\020\141\035\113\046\177\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\107\176\110\140\111\043\112\072" +
    "\114\060\115\031\116\076\117\052\120\136\121\115\126" +
    "\067\151\342\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\uff7a\000" +
    "\004\223\u0176\001\002\000\002\001\ufe7b\000\004\206\u0171" +
    "\001\ufe93\000\060\034\u010a\143\377\145\373\146\u010c\147" +
    "\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103" +
    "\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164" +
    "\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001\uff25" +
    "\000\060\034\u010a\143\377\145\373\146\u010c\147\375\150" +
    "\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f" +
    "\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165" +
    "\u0101\166\u0108\167\u0107\170\372\173\376\001\uff23\000\060" +
    "\034\u010a\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\uff1f\000\060\034\u010a" +
    "\143\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152" +
    "\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100" +
    "\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167" +
    "\u0107\170\372\173\376\001\uff24\000\060\034\u010a\143\377" +
    "\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153" +
    "\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d" +
    "\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170" +
    "\372\173\376\001\uff20\000\060\034\u010a\143\377\145\373" +
    "\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154" +
    "\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109" +
    "\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\001\uff26\000\060\034\u010a\143\377\145\373\146\u010c" +
    "\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155" +
    "\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106" +
    "\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001" +
    "\uff29\000\060\034\u010a\143\377\145\373\146\u010c\147\375" +
    "\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156" +
    "\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\001\uff22\000" +
    "\060\034\u010a\143\377\145\373\146\u010c\147\375\150\u0104" +
    "\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157" +
    "\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101" +
    "\166\u0108\167\u0107\170\372\173\376\001\uff28\000\022\011" +
    "\174\013\064\107\u0188\112\u0184\114\060\210\u0187\214\277" +
    "\225\110\001\002\000\060\034\u010a\143\377\145\373\146" +
    "\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371" +
    "\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163" +
    "\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376" +
    "\001\uff2d\000\004\106\u01a1\001\002\000\006\011\174\114" +
    "\060\001\002\000\004\106\u0194\001\002\000\004\067\366" +
    "\001\uff2c\000\020\011\174\013\064\107\u0124\112\u011d\114" +
    "\060\214\277\225\110\001\002\000\004\112\u018d\001\002" +
    "\000\006\112\255\222\u018a\001\ufed7\000\156\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\151\342\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\uff7a\000\004\223\u018c\001\002\000\002\001\ufee1" +
    "\000\006\011\174\114\060\001\002\000\006\112\255\222" +
    "\340\001\ufed6\000\004\222\u0191\001\ufec5\000\002\001\uff2b" +
    "\000\156\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\151\342\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\uff7a\000\004\223\u0193\001" +
    "\002\000\002\001\ufec4\000\014\011\u012f\013\064\104\u0130" +
    "\114\u012e\225\110\001\002\000\004\222\u019a\001\002\000" +
    "\004\222\u0197\001\ufe8a\000\156\004\156\006\116\007\012" +
    "\010\066\011\174\013\064\020\141\035\113\046\177\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\107\176\110\140\111\043\112" +
    "\072\114\060\115\031\116\076\117\052\120\136\121\115" +
    "\126\067\151\342\164\114\165\073\171\157\172\015\174" +
    "\055\175\165\176\030\177\145\200\041\201\137\202\100" +
    "\203\146\204\074\205\037\206\054\210\103\214\175\222" +
    "\164\225\110\226\122\227\062\230\105\234\126\001\uff7a" +
    "\000\004\223\u0199\001\002\000\002\001\ufedd\000\156\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\151\342\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\uff7a\000\004\223\u019c\001\002\000\002" +
    "\001\ufede\000\006\112\255\222\u019e\001\ufed5\000\156\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\151\342\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\175\222\164\225\110\226\122\227\062\230" +
    "\105\234\126\001\uff7a\000\004\223\u01a0\001\002\000\002" +
    "\001\ufedf\000\014\011\u012f\013\064\104\u0130\114\u012e\225" +
    "\110\001\002\000\004\222\u01a7\001\002\000\004\222\u01a4" +
    "\001\ufe89\000\156\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\151" +
    "\342\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\175\222\164\225\110" +
    "\226\122\227\062\230\105\234\126\001\uff7a\000\004\223" +
    "\u01a6\001\002\000\002\001\ufedc\000\156\004\156\006\116" +
    "\007\012\010\066\011\174\013\064\020\141\035\113\046" +
    "\177\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\107\176\110\140\111" +
    "\043\112\072\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\151\342\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\uff7a\000\004\223\u01a9\001\002\000\002\001\ufedb\000" +
    "\060\034\u010a\143\377\145\373\146\u010c\147\375\150\u0104" +
    "\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157" +
    "\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101" +
    "\166\u0108\167\u0107\170\372\173\376\001\uff21\000\002\001" +
    "\uff74\000\004\067\366\001\ufe98\000\002\001\uff77\000\002" +
    "\001\ufee0\000\004\151\201\001\uffb8\000\004\222\u01b1\001" +
    "\002\000\020\011\174\072\203\107\210\112\213\114\060" +
    "\223\uff86\233\207\001\uff7f\000\004\223\u01b3\001\002\000" +
    "\004\054\216\001\ufee7\000\004\104\u01b5\001\002\000\002" +
    "\001\uffea\000\250\003\127\004\156\005\171\006\116\007" +
    "\012\010\066\011\035\013\064\015\102\020\141\021\022" +
    "\022\134\023\130\024\046\026\034\030\111\032\170\035" +
    "\113\037\142\043\057\044\133\045\075\046\117\050\150" +
    "\051\042\053\166\054\223\055\011\057\104\060\161\061" +
    "\032\062\224\063\033\064\154\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\104\070\105" +
    "\u01b7\107\176\110\140\111\043\112\072\113\024\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\144" +
    "\010\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\044\215\065\216\017" +
    "\222\164\225\110\226\122\227\062\230\105\232\132\234" +
    "\126\001\002\000\002\001\ufee8\000\234\003\127\004\156" +
    "\005\171\006\116\007\012\010\066\011\035\013\064\015" +
    "\102\020\141\021\022\022\134\023\130\024\046\026\034" +
    "\030\111\032\170\035\113\037\142\043\057\044\133\045" +
    "\075\046\177\050\150\051\042\053\166\054\223\055\011" +
    "\057\104\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\104\070\107\176" +
    "\110\140\111\043\112\072\113\024\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\044\222\164\224\u01b9\225\110\226" +
    "\122\227\062\230\105\234\126\001\002\000\002\001\uffea" +
    "\000\002\001\uff8f\000\006\212\u01be\213\u01bd\001\uff8b\000" +
    "\002\001\uffe2\000\232\003\127\004\156\005\171\006\116" +
    "\007\012\010\066\011\035\013\064\015\102\020\141\021" +
    "\022\022\134\023\130\024\046\026\034\030\111\032\170" +
    "\035\113\037\142\043\057\044\133\045\075\046\177\050" +
    "\150\051\042\053\166\054\223\055\011\057\104\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\104\070\107\176\110\140\111\043" +
    "\112\072\113\024\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\144\010\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\044\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\004\222\u01bf\001\002\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\070\034\u010a\123\u0102\124\u0112\125\374\143" +
    "\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\223\u01c1\001\002\000\232\003\127\004" +
    "\156\005\171\006\116\007\012\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\130\024\046\026" +
    "\034\030\111\032\170\035\113\037\142\043\057\044\133" +
    "\045\075\046\177\050\150\051\042\053\166\054\223\055" +
    "\011\057\104\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\104\070\107" +
    "\176\110\140\111\043\112\072\113\024\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\044\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\002\001\uff8e\000" +
    "\002\001\uff8a\000\246\003\127\004\156\005\171\006\116" +
    "\007\012\010\066\011\035\013\064\015\102\020\141\021" +
    "\022\022\134\023\130\024\046\026\034\030\111\032\170" +
    "\035\113\037\142\043\057\044\133\045\075\046\117\050" +
    "\150\051\042\053\166\054\223\055\011\057\104\060\161" +
    "\061\032\062\224\063\033\064\154\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\104\070" +
    "\107\176\110\140\111\043\112\072\113\024\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\144\010" +
    "\164\114\165\073\171\157\172\015\174\055\175\165\176" +
    "\030\177\145\200\041\201\137\202\100\203\146\204\074" +
    "\205\037\206\054\210\103\214\044\215\065\216\017\222" +
    "\164\225\110\226\122\227\062\230\105\232\132\234\126" +
    "\001\uff8d\000\006\212\u01c8\213\u01c7\001\uff89\000\004\211" +
    "\u01d0\001\002\000\004\224\u01ce\001\002\000\004\222\u01c9" +
    "\001\002\000\154\004\156\006\116\007\012\010\066\011" +
    "\174\013\064\020\141\035\113\046\177\060\161\061\032" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\107\176\110\140\111\043\112\072\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\070\034\u010a\123" +
    "\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147\375" +
    "\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156" +
    "\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111" +
    "\165\u0101\166\u0108\167\u0107\170\372\173\376\223\u01cb\001" +
    "\002\000\004\224\u01cc\001\002\000\002\001\uffea\000\246" +
    "\003\127\004\156\005\171\006\116\007\012\010\066\011" +
    "\035\013\064\015\102\020\141\021\022\022\134\023\130" +
    "\024\046\026\034\030\111\032\170\035\113\037\142\043" +
    "\057\044\133\045\075\046\117\050\150\051\042\053\166" +
    "\054\223\055\011\057\104\060\161\061\032\062\224\063" +
    "\033\064\154\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\104\070\107\176\110\140\111" +
    "\043\112\072\113\024\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\144\010\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\044\215\065\216\017\222\164\225\110\226\122" +
    "\227\062\230\105\232\132\234\126\001\uff8c\000\002\001" +
    "\uffea\000\246\003\127\004\156\005\171\006\116\007\012" +
    "\010\066\011\035\013\064\015\102\020\141\021\022\022" +
    "\134\023\130\024\046\026\034\030\111\032\170\035\113" +
    "\037\142\043\057\044\133\045\075\046\117\050\150\051" +
    "\042\053\166\054\223\055\011\057\104\060\161\061\032" +
    "\062\224\063\033\064\154\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\104\070\107\176" +
    "\110\140\111\043\112\072\113\024\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\044\215\065\216\017\222\164\225" +
    "\110\226\122\227\062\230\105\232\132\234\126\001\uff88" +
    "\000\004\144\u01d1\001\002\000\002\001\uffe1\000\006\011" +
    "\u012f\114\u012e\001\002\000\006\122\u01d8\223\u01d7\001\002" +
    "\000\004\127\u01d5\001\002\000\056\006\116\007\012\010" +
    "\066\011\174\020\141\072\273\073\021\074\047\075\051" +
    "\076\143\077\006\100\266\107\301\110\140\111\043\112" +
    "\272\114\060\164\300\165\270\206\274\214\277\234\126" +
    "\001\002\000\002\001\uff9c\000\234\003\127\004\156\005" +
    "\171\006\116\007\012\010\066\011\035\013\064\015\102" +
    "\020\141\021\022\022\134\023\130\024\046\026\034\030" +
    "\111\032\170\035\113\037\142\043\057\044\133\045\075" +
    "\046\177\050\150\051\042\053\166\054\223\055\011\057" +
    "\104\060\161\061\032\071\163\072\014\073\021\074\047" +
    "\075\051\076\143\077\006\100\036\104\070\107\176\110" +
    "\140\111\043\112\072\113\024\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\144\010\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\044\222\164\224\u01dd\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\006\011\u012f\114" +
    "\u012e\001\002\000\004\127\u01da\001\002\000\056\006\116" +
    "\007\012\010\066\011\174\020\141\072\273\073\021\074" +
    "\047\075\051\076\143\077\006\100\266\107\301\110\140" +
    "\111\043\112\272\114\060\164\300\165\270\206\274\214" +
    "\277\234\126\001\002\000\002\001\uff9b\000\002\001\uffcc" +
    "\000\002\001\uffea\000\002\001\uff9e\000\250\003\127\004" +
    "\156\005\171\006\116\007\012\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\130\024\046\026" +
    "\034\030\111\032\170\033\u01e0\035\113\037\142\043\057" +
    "\044\133\045\075\046\117\050\150\051\042\053\166\054" +
    "\223\055\011\057\104\060\161\061\032\062\224\063\033" +
    "\064\154\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\104\070\107\176\110\140\111\043" +
    "\112\072\113\024\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\144\010\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\044\215\065\216\017\222\164\225\110\226\122\227" +
    "\062\230\105\232\132\234\126\001\002\000\002\001\uff9d" +
    "\000\070\034\u010a\123\u0102\124\u0112\125\374\143\377\144" +
    "\u01e2\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\001\002\000\002\001\uffc9\000\002\001" +
    "\uff1b\000\004\067\366\001\ufe97\000\004\223\u01e8\001\ufefc" +
    "\000\070\034\u010a\123\u0102\124\u0112\125\374\143\377\145" +
    "\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105" +
    "\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162" +
    "\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372" +
    "\173\376\223\u01e7\001\002\000\002\001\ufefd\000\002\001" +
    "\uff34\000\022\011\174\013\064\071\u01ed\107\u0188\112\u0184" +
    "\114\060\214\277\225\110\001\ufe6e\000\006\122\u01f1\223" +
    "\u01f3\001\002\000\002\001\ufe71\000\004\067\366\001\ufe70" +
    "\000\004\222\u01ee\001\002\000\022\011\174\013\064\071" +
    "\u01ed\107\u0188\112\u0184\114\060\214\277\225\110\001\ufe6e" +
    "\000\006\122\u01f1\223\u01f0\001\002\000\002\001\ufe6f\000" +
    "\022\011\174\013\064\071\u01ed\107\u0188\112\u0184\114\060" +
    "\214\277\225\110\001\ufe6e\000\002\001\ufe72\000\004\127" +
    "\u01f4\001\002\000\154\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\164\114\165\073\171\157\172\015\174\055\175\165\176" +
    "\030\177\145\200\041\201\137\202\100\203\146\204\074" +
    "\205\037\206\054\210\103\214\175\222\164\225\110\226" +
    "\122\227\062\230\105\234\126\001\002\000\060\034\u010a" +
    "\143\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152" +
    "\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100" +
    "\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167" +
    "\u0107\170\372\173\376\001\uff2e\000\014\011\u012f\013\064" +
    "\104\u0130\114\u012e\225\110\001\002\000\004\222\u01fd\001" +
    "\uff33\000\010\104\u0140\206\u0141\222\u01f9\001\uff32\000\156" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\151\342\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\uff7a\000\004\223\u01fb\001\002\000" +
    "\002\001\ufe7b\000\004\206\u0171\001\uff30\000\156\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\151\342\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\175\222\164\225\110\226\122\227\062\230\105" +
    "\234\126\001\uff7a\000\004\223\u01ff\001\002\000\002\001" +
    "\ufe7b\000\004\206\u0171\001\uff31\000\020\011\174\013\064" +
    "\107\u0188\112\u0184\114\060\214\277\225\110\001\002\000" +
    "\004\067\366\001\ufe4d\000\006\122\u0205\223\u0204\001\002" +
    "\000\002\001\ufe54\000\020\011\174\013\064\107\u0188\112" +
    "\u0184\114\060\214\277\225\110\001\002\000\004\067\366" +
    "\001\ufe4c\000\004\034\u010a\001\uff08\000\156\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\223\u020b\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\002\001\ufef0\000\070\034\u010a\123\u0102" +
    "\124\u0112\125\374\143\377\145\373\146\u010c\147\375\150" +
    "\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f" +
    "\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165" +
    "\u0101\166\u0108\167\u0107\170\372\173\376\223\u020c\001\002" +
    "\000\002\001\ufeca\000\002\001\ufec9\000\014\011\u020e\013" +
    "\064\104\u0130\114\u012e\225\110\001\002\000\004\222\ufe48" +
    "\001\ufe4a\000\002\001\uffd8\000\042\067\366\127\354\130" +
    "\357\131\355\132\367\133\360\134\365\135\362\136\364" +
    "\137\356\140\353\141\361\142\363\144\u0213\174\ufe97\175" +
    "\ufe97\001\ufe99\000\004\144\u0212\001\ufe9a\000\002\001\uffd7" +
    "\000\002\001\uffd6\000\004\127\u0215\001\002\000\056\006" +
    "\116\007\012\010\066\011\174\020\141\072\273\073\021" +
    "\074\047\075\051\076\143\077\006\100\266\107\301\110" +
    "\140\111\043\112\272\114\060\164\300\165\270\206\274" +
    "\214\277\234\126\001\002\000\002\001\uff3b\000\002\001" +
    "\ufef2\000\002\001\ufef6\000\154\004\156\006\116\007\012" +
    "\010\066\011\174\013\064\020\141\035\113\046\177\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\107\176\110\140\111\043\112" +
    "\072\114\060\115\031\116\076\117\052\120\136\121\115" +
    "\126\067\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\002\000\070" +
    "\034\u010a\123\u0102\124\u0112\125\374\143\377\145\373\146" +
    "\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371" +
    "\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163" +
    "\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376" +
    "\223\u021b\001\002\000\006\104\u021d\224\u021e\001\002\000" +
    "\002\001\uffdd\000\004\144\u022e\001\uff96\000\004\144\u0220" +
    "\001\uff96\000\010\040\u022c\041\u0223\042\u0224\001\002\000" +
    "\002\001\uff96\000\010\040\u0222\041\u0223\042\u0224\001\002" +
    "\000\002\001\uff97\000\154\004\156\006\116\007\012\010" +
    "\066\011\174\013\064\020\141\035\113\046\177\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\107\176\110\140\111\043\112\072" +
    "\114\060\115\031\116\076\117\052\120\136\121\115\126" +
    "\067\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\175\222\164\225\110" +
    "\226\122\227\062\230\105\234\126\001\002\000\006\144" +
    "\u0227\224\u0226\001\002\000\002\001\uffea\000\002\001\uff93" +
    "\000\002\001\uff92\000\246\003\127\004\156\005\171\006" +
    "\116\007\012\010\066\011\035\013\064\015\102\020\141" +
    "\021\022\022\134\023\130\024\046\026\034\030\111\032" +
    "\170\035\113\037\142\043\057\044\133\045\075\046\117" +
    "\050\150\051\042\053\166\054\223\055\011\057\104\060" +
    "\161\061\032\062\224\063\033\064\154\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\104" +
    "\070\107\176\110\140\111\043\112\072\113\024\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\144" +
    "\010\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\044\215\065\216\017" +
    "\222\164\225\110\226\122\227\062\230\105\232\132\234" +
    "\126\001\uff94\000\072\034\u010a\123\u0102\124\u0112\125\374" +
    "\143\377\144\u0227\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\224\u0226\001\002\000\002" +
    "\001\uffea\000\246\003\127\004\156\005\171\006\116\007" +
    "\012\010\066\011\035\013\064\015\102\020\141\021\022" +
    "\022\134\023\130\024\046\026\034\030\111\032\170\035" +
    "\113\037\142\043\057\044\133\045\075\046\117\050\150" +
    "\051\042\053\166\054\223\055\011\057\104\060\161\061" +
    "\032\062\224\063\033\064\154\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\104\070\107" +
    "\176\110\140\111\043\112\072\113\024\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\044\215\065\216\017\222\164" +
    "\225\110\226\122\227\062\230\105\232\132\234\126\001" +
    "\uff95\000\002\001\uff98\000\010\041\u0223\042\u0224\105\u0231" +
    "\001\002\000\002\001\uff96\000\010\041\u0223\042\u0224\105" +
    "\u0230\001\002\000\002\001\uff99\000\002\001\uff9a\000\002" +
    "\001\ufef4\000\066\034\u010a\123\u0102\124\u0112\125\374\143" +
    "\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\001\ufe4f\000\066\034\u010a\123\u0102\124" +
    "\u0112\125\374\143\377\145\373\146\u010c\147\375\150\u0104" +
    "\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157" +
    "\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101" +
    "\166\u0108\167\u0107\170\372\173\376\001\uff39\000\006\122" +
    "\u0236\144\u0237\001\002\000\154\004\156\006\116\007\012" +
    "\010\066\011\174\013\064\020\141\035\113\046\177\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\107\176\110\140\111\043\112" +
    "\072\114\060\115\031\116\076\117\052\120\136\121\115" +
    "\126\067\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\002\000\002" +
    "\001\uffd3\000\066\034\u010a\123\u0102\124\u0112\125\374\143" +
    "\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\001\uff3a\000\002\001\uffda\000\070\034" +
    "\u010a\123\u0102\124\u0112\125\374\143\377\144\u023b\145\373" +
    "\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154" +
    "\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109" +
    "\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\001\002\000\002\001\uffd9\000\004\024\u023d\001\002" +
    "\000\004\222\u023e\001\002\000\154\004\156\006\116\007" +
    "\012\010\066\011\174\013\064\020\141\035\113\046\177" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\107\176\110\140\111\043" +
    "\112\072\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\164\114\165\073\171\157\172\015\174\055" +
    "\175\165\176\030\177\145\200\041\201\137\202\100\203" +
    "\146\204\074\205\037\206\054\210\103\214\175\222\164" +
    "\225\110\226\122\227\062\230\105\234\126\001\002\000" +
    "\070\034\u010a\123\u0102\124\u0112\125\374\143\377\145\373" +
    "\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154" +
    "\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109" +
    "\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\223\u0240\001\002\000\004\144\u0241\001\002\000\002" +
    "\001\uffdf\000\004\011\u0244\001\002\000\002\001\ufff2\000" +
    "\004\127\u0245\001\002\000\056\006\116\007\012\010\066" +
    "\011\174\020\141\072\273\073\021\074\047\075\051\076" +
    "\143\077\006\100\266\107\301\110\140\111\043\112\272" +
    "\114\060\164\300\165\270\206\274\214\277\234\126\001" +
    "\002\000\002\001\uff3c\000\004\065\u0249\001\uffac\000\004" +
    "\104\u024e\001\002\000\012\011\174\107\210\112\213\114" +
    "\060\001\002\000\004\122\u024c\001\uffab\000\002\001\uffa8" +
    "\000\012\011\174\107\210\112\213\114\060\001\002\000" +
    "\002\001\uffa7\000\002\001\uff69\000\030\047\147\054\u025d" +
    "\056\u0260\105\u025a\113\u0259\214\u025c\215\u0253\216\u0254\217" +
    "\u0257\220\u0252\221\u025b\001\uff4a\000\004\046\u028c\001\002" +
    "\000\002\001\uff64\000\002\001\uff45\000\002\001\uff42\000" +
    "\002\001\uff41\000\002\001\uff6a\000\020\046\uff49\214\u025c" +
    "\215\u0253\216\u0254\217\u0257\220\u0252\221\u025b\001\uff4c\000" +
    "\002\001\uff44\000\002\001\uff48\000\232\003\127\004\156" +
    "\005\171\006\116\007\012\010\066\011\174\013\064\015" +
    "\102\020\141\021\022\022\134\023\130\024\046\026\034" +
    "\030\111\032\170\035\113\037\142\043\057\044\133\045" +
    "\075\046\177\050\150\051\042\053\166\054\223\055\011" +
    "\057\104\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\104\070\107\176" +
    "\110\140\111\043\112\072\113\024\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\044\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\002\001\uffb4\000\002" +
    "\001\uff46\000\002\001\uff43\000\012\011\174\107\210\112" +
    "\213\114\060\001\002\000\004\013\u0262\001\002\000\006" +
    "\122\u0242\144\u0261\001\002\000\002\001\uff4b\000\002\001" +
    "\uff67\000\004\127\u0269\001\uff3e\000\006\122\u0264\144\u0265" +
    "\001\002\000\004\013\u0266\001\002\000\002\001\uff68\000" +
    "\004\127\u0267\001\uff40\000\056\006\116\007\012\010\066" +
    "\011\174\020\141\072\273\073\021\074\047\075\051\076" +
    "\143\077\006\100\266\107\301\110\140\111\043\112\272" +
    "\114\060\164\300\165\270\206\274\214\277\234\126\001" +
    "\002\000\002\001\uff3f\000\056\006\116\007\012\010\066" +
    "\011\174\020\141\072\273\073\021\074\047\075\051\076" +
    "\143\077\006\100\266\107\301\110\140\111\043\112\272" +
    "\114\060\164\300\165\270\206\274\214\277\234\126\001" +
    "\002\000\002\001\uff3d\000\010\104\u026e\122\u026d\144\u0270" +
    "\001\002\000\002\001\uff62\000\012\011\174\107\210\112" +
    "\213\114\060\001\002\000\012\011\u0279\107\210\112\213" +
    "\114\060\001\uff5e\000\002\001\uff63\000\002\001\uff60\000" +
    "\004\036\u0285\001\002\000\004\144\u0284\001\002\000\012" +
    "\011\u0279\107\210\112\213\114\060\001\uff5d\000\004\105" +
    "\u0282\001\002\000\004\231\u027d\001\uff54\000\004\106\u027b" +
    "\001\002\000\002\001\uff5c\000\004\144\u027a\001\002\000" +
    "\004\036\uff55\001\uffff\000\002\001\uff5a\000\004\011\u027c" +
    "\001\002\000\002\001\uff53\000\012\011\174\107\210\112" +
    "\213\114\060\001\002\000\004\122\u0280\001\uff58\000\002" +
    "\001\uff57\000\012\011\174\107\210\112\213\114\060\001" +
    "\002\000\002\001\uff56\000\002\001\uff5f\000\002\001\uff5b" +
    "\000\002\001\uff59\000\016\214\u025c\215\u0253\216\u0254\217" +
    "\u0257\220\u0252\221\u025b\001\uff50\000\004\011\u0288\001\002" +
    "\000\004\144\uff51\001\uff4f\000\002\001\uff52\000\002\001" +
    "\uff61\000\002\001\uff65\000\002\001\uff47\000\004\151\201" +
    "\001\uffb8\000\006\011\u012f\114\u012e\001\002\000\004\222" +
    "\u028f\001\002\000\020\011\174\072\203\107\210\112\213" +
    "\114\060\223\uff86\233\207\001\uff7f\000\004\223\u0291\001" +
    "\002\000\006\104\u0293\144\u0294\001\002\000\002\001\uff66" +
    "\000\002\001\uffea\000\002\001\uff4e\000\250\003\127\004" +
    "\156\005\171\006\116\007\012\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\130\024\046\026" +
    "\034\030\111\032\170\035\113\037\142\043\057\044\133" +
    "\045\075\046\117\050\150\051\042\053\166\054\223\055" +
    "\011\057\104\060\161\061\032\062\224\063\033\064\154" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\104\070\105\u0296\107\176\110\140\111\043" +
    "\112\072\113\024\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\144\010\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\044\215\065\216\017\222\164\225\110\226\122\227" +
    "\062\230\105\232\132\234\126\001\002\000\002\001\uff4d" +
    "\000\006\067\u02ad\206\u02ac\001\ufe5e\000\016\013\064\016" +
    "\u02ab\017\u02aa\102\u029b\103\u029a\226\u02a9\001\002\000\002" +
    "\001\ufe60\000\020\011\174\013\064\107\u0188\112\u0184\114" +
    "\060\214\277\225\110\001\002\000\156\004\156\006\116" +
    "\007\012\010\066\011\174\012\u029f\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\010\013\064\102\u029b\103\u029a\001\002\000" +
    "\002\001\ufe5f\000\070\034\u010a\105\u02a5\123\u0102\124\u0112" +
    "\125\374\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\002\000\006\105\u02a0" +
    "\206\u02a1\001\002\000\002\001\ufe59\000\154\004\156\006" +
    "\116\007\012\010\066\011\174\013\064\020\141\035\113" +
    "\046\177\060\161\061\032\071\163\072\014\073\021\074" +
    "\047\075\051\076\143\077\006\100\036\107\176\110\140" +
    "\111\043\112\072\114\060\115\031\116\076\117\052\120" +
    "\136\121\115\126\067\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\175" +
    "\222\164\225\110\226\122\227\062\230\105\234\126\001" +
    "\002\000\070\034\u010a\123\u0102\124\u0112\125\374\143\377" +
    "\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153" +
    "\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d" +
    "\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170" +
    "\372\173\376\207\u02a3\001\002\000\004\105\u02a4\001\002" +
    "\000\002\001\ufe5a\000\002\001\ufe5b\000\006\067\366\105" +
    "\u02a7\001\002\000\002\001\ufe58\000\002\001\ufe63\000\002" +
    "\001\ufea6\000\002\001\ufe62\000\002\001\ufe61\000\012\011" +
    "\u012f\013\064\014\u02b2\114\u012e\001\002\000\006\011\u012f" +
    "\114\u012e\001\002\000\002\001\ufe5c\000\002\001\ufe55\000" +
    "\004\207\u02b3\001\002\000\002\001\ufe57\000\002\001\ufe56" +
    "\000\002\001\ufe5d\000\010\011\u012f\114\u012e\222\202\001" +
    "\002\000\004\222\u02b6\001\002\000\020\011\174\072\203" +
    "\107\210\112\213\114\060\223\uff86\233\207\001\uff7f\000" +
    "\004\223\u02b8\001\002\000\004\104\u02b9\001\002\000\002" +
    "\001\uffea\000\250\003\127\004\156\005\171\006\116\007" +
    "\012\010\066\011\035\013\064\015\102\020\141\021\022" +
    "\022\134\023\130\024\046\026\034\030\111\032\170\035" +
    "\113\037\142\043\057\044\133\045\075\046\117\050\150" +
    "\051\042\053\166\054\223\055\011\057\104\060\161\061" +
    "\032\062\224\063\033\064\154\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\104\070\105" +
    "\u02bb\107\176\110\140\111\043\112\072\113\024\114\060" +
    "\115\031\116\076\117\052\120\136\121\115\126\067\144" +
    "\010\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\044\215\065\216\017" +
    "\222\164\225\110\226\122\227\062\230\105\232\132\234" +
    "\126\001\002\000\002\001\uffb6\000\066\034\u010a\123\u0102" +
    "\124\u0112\125\374\143\377\145\373\146\u010c\147\375\150" +
    "\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f" +
    "\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165" +
    "\u0101\166\u0108\167\u0107\170\372\173\376\001\ufe4e\000\012" +
    "\034\u010a\166\u0108\167\u0107\170\372\001\uff0a\000\002\001" +
    "\uff2a\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\042\036\u02d0\067\366" +
    "\127\354\130\357\131\355\132\367\133\360\134\365\135" +
    "\362\136\364\137\356\140\353\141\361\142\363\174\ufe97" +
    "\175\ufe97\001\ufe99\000\004\036\u02c2\001\ufe9a\000\020\011" +
    "\174\013\064\107\u0188\112\u0184\114\060\214\277\225\110" +
    "\001\002\000\006\067\366\070\u02c5\001\uffa6\000\004\223" +
    "\u02ca\001\002\000\022\011\174\013\064\107\u0188\112\u0184" +
    "\114\060\151\u02c8\214\277\225\110\001\002\000\002\001" +
    "\uffa5\000\004\067\366\001\uffa4\000\020\011\174\013\064" +
    "\107\u0188\112\u0184\114\060\214\277\225\110\001\002\000" +
    "\004\067\366\001\uffa3\000\234\003\127\004\156\005\171" +
    "\006\116\007\012\010\066\011\035\013\064\015\102\020" +
    "\141\021\022\022\134\023\130\024\046\026\034\030\111" +
    "\032\170\035\113\037\142\043\057\044\133\045\075\046" +
    "\177\050\150\051\042\053\166\054\223\055\011\057\104" +
    "\060\161\061\032\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\104\070\107\176\110\140" +
    "\111\043\112\072\113\024\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\144\010\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\044\222\164\224\u02cb\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\002\001\uffea\000\002" +
    "\001\uffa0\000\002\001\uffcd\000\250\003\127\004\156\005" +
    "\171\006\116\007\012\010\066\011\035\013\064\015\102" +
    "\020\141\021\022\022\134\023\130\024\046\026\034\030" +
    "\111\031\u02cf\032\170\035\113\037\142\043\057\044\133" +
    "\045\075\046\117\050\150\051\042\053\166\054\223\055" +
    "\011\057\104\060\161\061\032\062\224\063\033\064\154" +
    "\071\163\072\014\073\021\074\047\075\051\076\143\077" +
    "\006\100\036\104\070\107\176\110\140\111\043\112\072" +
    "\113\024\114\060\115\031\116\076\117\052\120\136\121" +
    "\115\126\067\144\010\164\114\165\073\171\157\172\015" +
    "\174\055\175\165\176\030\177\145\200\041\201\137\202" +
    "\100\203\146\204\074\205\037\206\054\210\103\214\044" +
    "\215\065\216\017\222\164\225\110\226\122\227\062\230" +
    "\105\232\132\234\126\001\002\000\002\001\uff9f\000\022" +
    "\011\174\013\064\107\u0188\112\u0184\114\060\151\u02c8\214" +
    "\277\225\110\001\002\000\004\070\u02c5\001\uffa6\000\004" +
    "\223\u02d3\001\002\000\234\003\127\004\156\005\171\006" +
    "\116\007\012\010\066\011\035\013\064\015\102\020\141" +
    "\021\022\022\134\023\130\024\046\026\034\030\111\032" +
    "\170\035\113\037\142\043\057\044\133\045\075\046\177" +
    "\050\150\051\042\053\166\054\223\055\011\057\104\060" +
    "\161\061\032\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\104\070\107\176\110\140\111" +
    "\043\112\072\113\024\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\144\010\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\044\222\164\224\u02cb\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\002\001\uffce\000\002\001" +
    "\uff1e\000\002\001\uff1c\000\002\001\ufffb\000\010\104\u02d9" +
    "\112\255\144\u02da\001\002\000\002\001\ufffb\000\002\001" +
    "\ufff6\000\252\003\127\004\156\005\171\006\116\007\012" +
    "\010\066\011\035\013\064\015\102\020\141\021\022\022" +
    "\134\023\130\024\046\026\034\030\111\032\170\035\113" +
    "\037\142\043\057\044\133\045\075\046\117\047\147\050" +
    "\150\051\042\053\166\054\027\055\011\057\104\060\161" +
    "\061\032\062\061\063\033\064\154\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\104\070" +
    "\105\u02dc\107\106\110\140\111\043\112\072\113\024\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\144\010\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\044\215\065\216" +
    "\017\222\164\225\110\226\122\227\062\230\105\232\132" +
    "\234\126\001\002\000\002\001\ufff5\000\252\003\127\004" +
    "\156\005\171\006\116\007\012\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\130\024\046\026" +
    "\034\030\111\032\170\035\113\037\142\043\057\044\133" +
    "\045\075\046\117\047\147\050\150\051\042\053\166\054" +
    "\027\055\011\057\104\060\161\061\032\062\061\063\033" +
    "\064\154\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\104\070\105\u02de\107\106\110\140" +
    "\111\043\112\072\113\024\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\144\010\164\114\165\073" +
    "\171\157\172\015\174\055\175\165\176\030\177\145\200" +
    "\041\201\137\202\100\203\146\204\074\205\037\206\054" +
    "\210\103\214\044\215\065\216\017\222\164\225\110\226" +
    "\122\227\062\230\105\232\132\234\126\001\002\000\002" +
    "\001\ufff4\000\016\013\064\016\u02ab\017\u02aa\102\u029b\103" +
    "\u029a\230\u02e0\001\002\000\002\001\ufea5\000\020\011\174" +
    "\013\064\107\u0188\112\u0184\114\060\214\277\225\110\001" +
    "\002\000\002\001\uffbf\000\004\067\366\001\uffbd\000\006" +
    "\122\u02e6\223\u02e5\001\002\000\004\144\u02e8\001\002\000" +
    "\020\011\174\013\064\107\u0188\112\u0184\114\060\214\277" +
    "\225\110\001\002\000\002\001\uffbe\000\002\001\uffcf\000" +
    "\004\222\u0191\001\ufec5\000\002\001\uff2f\000\002\001\ufef3" +
    "\000\010\104\u0132\206\u0133\222\ufe90\001\ufe84\000\066\034" +
    "\u010a\123\u0102\124\u0112\125\374\143\377\145\373\146\u010c" +
    "\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155" +
    "\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106" +
    "\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001" +
    "\ufe51\000\004\144\u02ef\001\002\000\002\001\uffc8\000\002" +
    "\001\ufef1\000\012\034\u010a\166\u0108\167\u0107\170\372\001" +
    "\uff09\000\010\106\ufed5\112\255\222\u019e\001\ufea8\000\250" +
    "\003\127\004\156\005\171\006\116\007\012\010\066\011" +
    "\035\013\064\015\102\020\141\021\022\022\134\023\130" +
    "\024\046\026\034\030\111\032\170\035\113\037\142\043" +
    "\057\044\133\045\075\046\117\050\150\051\042\053\166" +
    "\054\223\055\011\057\104\060\161\061\032\062\224\063" +
    "\033\064\154\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\104\070\105\u02f4\107\176\110" +
    "\140\111\043\112\072\113\024\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\144\010\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\044\215\065\216\017\222\164\225\110" +
    "\226\122\227\062\230\105\232\132\234\126\001\002\000" +
    "\002\001\uffe3\000\060\034\u010a\143\377\145\373\146\u010c" +
    "\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155" +
    "\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106" +
    "\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001" +
    "\ufeea\000\002\001\uffb2\000\014\011\u02f8\013\064\104\u0130" +
    "\114\u012e\225\110\001\002\000\004\222\ufe48\001\ufe4b\000" +
    "\004\227\u02fc\001\002\000\014\013\064\016\u02ab\017\u02aa" +
    "\102\u029b\103\u029a\001\ufec6\000\010\013\064\102\u029b\103" +
    "\u029a\001\ufec7\000\002\001\ufeeb\000\004\223\u02fe\001\002" +
    "\000\004\144\u02ff\001\002\000\002\001\ufff7\000\002\001" +
    "\uffdc\000\070\034\u010a\123\u0102\124\u0112\125\374\143\377" +
    "\144\u0302\145\373\146\u010c\147\375\150\u0104\151\u010b\152" +
    "\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100" +
    "\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167" +
    "\u0107\170\372\173\376\001\002\000\002\001\uffdb\000\002" +
    "\001\uff1d\000\020\011\174\013\064\107\u0188\112\u0184\114" +
    "\060\214\277\225\110\001\002\000\070\034\u010a\070\u0312" +
    "\123\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147" +
    "\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103" +
    "\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164" +
    "\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001\ufe68" +
    "\000\004\122\u0309\001\ufea1\000\004\207\u0308\001\002\000" +
    "\002\001\ufeec\000\156\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\151\u030b\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\ufea0\000\002" +
    "\001\ufe6c\000\020\011\174\013\064\107\u0188\112\u0184\114" +
    "\060\214\277\225\110\001\002\000\070\034\u010a\070\u030d" +
    "\123\u0102\124\u0112\125\374\143\377\145\373\146\u010c\147" +
    "\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155\u0103" +
    "\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164" +
    "\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001\ufe6a" +
    "\000\156\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\151\u030e\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\175\222\164\225\110\226\122" +
    "\227\062\230\105\234\126\001\002\000\020\011\174\013" +
    "\064\107\u0188\112\u0184\114\060\214\277\225\110\001\002" +
    "\000\066\034\u010a\123\u0102\124\u0112\125\374\143\377\145" +
    "\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105" +
    "\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162" +
    "\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372" +
    "\173\376\001\ufe6b\000\002\001\ufe67\000\002\001\ufe66\000" +
    "\156\004\156\006\116\007\012\010\066\011\174\013\064" +
    "\020\141\035\113\046\177\060\161\061\032\071\163\072" +
    "\014\073\021\074\047\075\051\076\143\077\006\100\036" +
    "\107\176\110\140\111\043\112\072\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\151\u0313\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\002\000\020\011\174\013\064" +
    "\107\u0188\112\u0184\114\060\214\277\225\110\001\002\000" +
    "\066\034\u010a\123\u0102\124\u0112\125\374\143\377\145\373" +
    "\146\u010c\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154" +
    "\371\155\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109" +
    "\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173" +
    "\376\001\ufe69\000\002\001\ufe65\000\002\001\ufe64\000\154" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\175\222\164\225\110\226\122\227\062\230\105" +
    "\234\126\001\002\000\070\034\u010a\123\u0102\124\u0112\125" +
    "\374\143\377\145\373\146\u010c\147\375\150\u0104\151\u010b" +
    "\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160" +
    "\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108" +
    "\167\u0107\170\372\173\376\223\u0319\001\002\000\002\001" +
    "\ufe50\000\004\065\u031b\001\uffaf\000\012\011\174\107\210" +
    "\112\213\114\060\001\002\000\004\066\u031e\001\uffaa\000" +
    "\004\104\u0320\001\002\000\012\011\174\107\210\112\213" +
    "\114\060\001\002\000\004\122\u024c\001\uffa9\000\002\001" +
    "\uff69\000\030\047\147\054\u025d\056\u0260\105\u0322\113\u0259" +
    "\214\u025c\215\u0253\216\u0254\217\u0257\220\u0252\221\u025b\001" +
    "\uff4a\000\002\001\uffb5\000\002\001\uffae\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\002\000\070\034\u010a\123\u0102\124\u0112\125\374\143" +
    "\377\145\373\146\u010c\147\375\150\u0104\151\u010b\152\u0110" +
    "\153\u0105\154\371\155\u0103\156\u010f\157\u010e\160\u0100\161" +
    "\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166\u0108\167\u0107" +
    "\170\372\173\376\223\u0326\001\002\000\234\003\127\004" +
    "\156\005\171\006\116\007\012\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\130\024\046\026" +
    "\034\030\111\032\170\035\113\037\142\043\057\044\133" +
    "\045\075\046\177\050\150\051\042\053\166\054\223\055" +
    "\011\057\104\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\104\070\107" +
    "\176\110\140\111\043\112\072\113\024\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\044\222\164\224\u0327\225\110" +
    "\226\122\227\062\230\105\234\126\001\002\000\002\001" +
    "\uffea\000\002\001\uffe0\000\002\001\uff91\000\250\003\127" +
    "\004\156\005\171\006\116\007\012\010\066\011\035\013" +
    "\064\015\102\020\141\021\022\022\134\023\130\024\046" +
    "\025\u032b\026\034\030\111\032\170\035\113\037\142\043" +
    "\057\044\133\045\075\046\117\050\150\051\042\053\166" +
    "\054\223\055\011\057\104\060\161\061\032\062\224\063" +
    "\033\064\154\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\104\070\107\176\110\140\111" +
    "\043\112\072\113\024\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\144\010\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\044\215\065\216\017\222\164\225\110\226\122" +
    "\227\062\230\105\232\132\234\126\001\002\000\002\001" +
    "\uff90\000\154\004\156\006\116\007\012\010\066\011\174" +
    "\013\064\020\141\035\113\046\177\060\161\061\032\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\107\176\110\140\111\043\112\072\114\060\115" +
    "\031\116\076\117\052\120\136\121\115\126\067\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\175\222\164\225\110\226\122\227" +
    "\062\230\105\234\126\001\ufe7d\000\004\207\u032e\001\002" +
    "\000\002\001\ufed9\000\004\127\u0336\001\uff6c\000\006\122" +
    "\u0331\144\u0332\001\002\000\004\013\u0333\001\002\000\002" +
    "\001\uffd4\000\004\127\u0334\001\uff6e\000\056\006\116\007" +
    "\012\010\066\011\174\020\141\072\273\073\021\074\047" +
    "\075\051\076\143\077\006\100\266\107\301\110\140\111" +
    "\043\112\272\114\060\164\300\165\270\206\274\214\277" +
    "\234\126\001\002\000\002\001\uff6d\000\056\006\116\007" +
    "\012\010\066\011\174\020\141\072\273\073\021\074\047" +
    "\075\051\076\143\077\006\100\266\107\301\110\140\111" +
    "\043\112\272\114\060\164\300\165\270\206\274\214\277" +
    "\234\126\001\002\000\002\001\uff6b\000\002\001\uffea\000" +
    "\250\003\127\004\156\005\171\006\116\007\012\010\066" +
    "\011\035\013\064\015\102\020\141\021\022\022\134\023" +
    "\130\024\046\026\034\030\111\032\170\035\113\037\142" +
    "\043\057\044\133\045\075\046\117\050\150\051\042\053" +
    "\166\054\223\055\011\057\104\060\161\061\032\062\224" +
    "\063\033\064\154\071\163\072\014\073\021\074\047\075" +
    "\051\076\143\077\006\100\036\104\070\105\u033a\107\176" +
    "\110\140\111\043\112\072\113\024\114\060\115\031\116" +
    "\076\117\052\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\157\172\015\174\055\175\165\176\030\177" +
    "\145\200\041\201\137\202\100\203\146\204\074\205\037" +
    "\206\054\210\103\214\044\215\065\216\017\222\164\225" +
    "\110\226\122\227\062\230\105\232\132\234\126\001\002" +
    "\000\004\052\u033b\001\002\000\004\222\u033c\001\002\000" +
    "\012\011\174\107\210\112\213\114\060\001\002\000\004" +
    "\013\064\001\002\000\004\223\u033f\001\002\000\004\104" +
    "\u0340\001\002\000\002\001\uffea\000\250\003\127\004\156" +
    "\005\171\006\116\007\012\010\066\011\035\013\064\015" +
    "\102\020\141\021\022\022\134\023\130\024\046\026\034" +
    "\030\111\032\170\035\113\037\142\043\057\044\133\045" +
    "\075\046\117\050\150\051\042\053\166\054\223\055\011" +
    "\057\104\060\161\061\032\062\224\063\033\064\154\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\104\070\105\u0342\107\176\110\140\111\043\112" +
    "\072\113\024\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\144\010\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\044\215\065\216\017\222\164\225\110\226\122\227\062" +
    "\230\105\232\132\234\126\001\002\000\004\052\u0343\001" +
    "\uffc3\000\004\222\u0348\001\002\000\002\001\uffca\000\002" +
    "\001\uffc2\000\004\052\u0343\001\uffc4\000\002\001\uffc1\000" +
    "\012\011\174\107\210\112\213\114\060\001\002\000\004" +
    "\013\u034a\001\002\000\004\223\u034b\001\002\000\004\104" +
    "\u034c\001\002\000\002\001\uffea\000\250\003\127\004\156" +
    "\005\171\006\116\007\012\010\066\011\035\013\064\015" +
    "\102\020\141\021\022\022\134\023\130\024\046\026\034" +
    "\030\111\032\170\035\113\037\142\043\057\044\133\045" +
    "\075\046\117\050\150\051\042\053\166\054\223\055\011" +
    "\057\104\060\161\061\032\062\224\063\033\064\154\071" +
    "\163\072\014\073\021\074\047\075\051\076\143\077\006" +
    "\100\036\104\070\105\u034e\107\176\110\140\111\043\112" +
    "\072\113\024\114\060\115\031\116\076\117\052\120\136" +
    "\121\115\126\067\144\010\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\044\215\065\216\017\222\164\225\110\226\122\227\062" +
    "\230\105\232\132\234\126\001\002\000\002\001\uffc0\000" +
    "\002\001\ufef5\000\002\001\ufeef\000\016\013\064\016\u02ab" +
    "\017\u02aa\101\u0353\102\u029b\103\u029a\001\002\000\012\013" +
    "\064\101\332\102\u029b\103\u029a\001\002\000\002\001\ufea4" +
    "\000\002\001\uffe4\000\154\004\156\006\116\007\012\010" +
    "\066\011\174\013\064\020\141\035\113\046\177\060\161" +
    "\061\032\071\163\072\014\073\021\074\047\075\051\076" +
    "\143\077\006\100\036\107\176\110\140\111\043\112\072" +
    "\114\060\115\031\116\076\117\052\120\136\121\115\126" +
    "\067\164\114\165\073\171\157\172\015\174\055\175\165" +
    "\176\030\177\145\200\041\201\137\202\100\203\146\204" +
    "\074\205\037\206\054\210\103\214\175\222\164\225\110" +
    "\226\122\227\062\230\105\234\126\001\uff38\000\066\034" +
    "\u010a\123\u0102\124\u0112\125\374\143\377\145\373\146\u010c" +
    "\147\375\150\u0104\151\u010b\152\u0110\153\u0105\154\371\155" +
    "\u0103\156\u010f\157\u010e\160\u0100\161\u010d\162\u0109\163\u0106" +
    "\164\u0111\165\u0101\166\u0108\167\u0107\170\372\173\376\001" +
    "\uff35\000\004\144\u035b\001\002\000\004\122\u0359\001\uff37" +
    "\000\154\004\156\006\116\007\012\010\066\011\174\013" +
    "\064\020\141\035\113\046\177\060\161\061\032\071\163" +
    "\072\014\073\021\074\047\075\051\076\143\077\006\100" +
    "\036\107\176\110\140\111\043\112\072\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\002\000\066\034\u010a\123\u0102\124" +
    "\u0112\125\374\143\377\145\373\146\u010c\147\375\150\u0104" +
    "\151\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157" +
    "\u010e\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101" +
    "\166\u0108\167\u0107\170\372\173\376\001\uff36\000\154\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\uff38\000\004\144\u035d\001\002\000\154\004\156" +
    "\006\116\007\012\010\066\011\174\013\064\020\141\035" +
    "\113\046\177\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\107\176\110" +
    "\140\111\043\112\072\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\164\114\165\073\171\157\172" +
    "\015\174\055\175\165\176\030\177\145\200\041\201\137" +
    "\202\100\203\146\204\074\205\037\206\054\210\103\214" +
    "\175\222\164\225\110\226\122\227\062\230\105\234\126" +
    "\001\uff38\000\004\223\u035f\001\002\000\234\003\127\004" +
    "\156\005\171\006\116\007\012\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\130\024\046\026" +
    "\034\030\111\032\170\035\113\037\142\043\057\044\133" +
    "\045\075\046\177\050\150\051\042\053\166\054\223\055" +
    "\011\057\104\060\161\061\032\071\163\072\014\073\021" +
    "\074\047\075\051\076\143\077\006\100\036\104\070\107" +
    "\176\110\140\111\043\112\072\113\024\114\060\115\031" +
    "\116\076\117\052\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\157\172\015\174\055\175\165\176\030" +
    "\177\145\200\041\201\137\202\100\203\146\204\074\205" +
    "\037\206\054\210\103\214\044\222\164\224\u0361\225\110" +
    "\226\122\227\062\230\105\234\126\001\002\000\002\001" +
    "\uffde\000\002\001\uffea\000\002\001\uffa2\000\250\003\127" +
    "\004\156\005\171\006\116\007\012\010\066\011\035\013" +
    "\064\015\102\020\141\021\022\022\134\023\130\024\046" +
    "\026\034\027\u0364\030\111\032\170\035\113\037\142\043" +
    "\057\044\133\045\075\046\117\050\150\051\042\053\166" +
    "\054\223\055\011\057\104\060\161\061\032\062\224\063" +
    "\033\064\154\071\163\072\014\073\021\074\047\075\051" +
    "\076\143\077\006\100\036\104\070\107\176\110\140\111" +
    "\043\112\072\113\024\114\060\115\031\116\076\117\052" +
    "\120\136\121\115\126\067\144\010\164\114\165\073\171" +
    "\157\172\015\174\055\175\165\176\030\177\145\200\041" +
    "\201\137\202\100\203\146\204\074\205\037\206\054\210" +
    "\103\214\044\215\065\216\017\222\164\225\110\226\122" +
    "\227\062\230\105\232\132\234\126\001\002\000\002\001" +
    "\uffa1\000\020\011\174\013\064\107\u0188\112\u0184\114\060" +
    "\214\277\225\110\001\002\000\006\067\366\223\u0367\001" +
    "\002\000\002\001\ufe53\000\066\034\u010a\123\u0102\124\u0112" +
    "\125\374\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\ufe52\000\002\001\ufef7" +
    "\000\006\036\u0374\112\255\001\uffef\000\002\001\ufff0\000" +
    "\006\011\174\114\060\001\002\000\006\122\u036e\144\u036f" +
    "\001\002\000\010\011\174\112\u036c\114\060\001\002\000" +
    "\002\001\ufff3\000\002\001\ufff1\000\006\036\u0372\112\255" +
    "\001\uffed\000\004\011\u0373\001\002\000\002\001\uffec\000" +
    "\004\011\u0375\001\002\000\002\001\uffee\000\002\001\uffc6" +
    "\000\006\122\u0236\144\u0378\001\002\000\002\001\uffc5\000" +
    "\002\001\uffd1\000\002\001\uffb1\000\002\001\uff07\000\156" +
    "\004\156\006\116\007\012\010\066\011\174\013\064\020" +
    "\141\035\113\046\177\060\161\061\032\071\163\072\014" +
    "\073\021\074\047\075\051\076\143\077\006\100\036\107" +
    "\176\110\140\111\043\112\072\114\060\115\031\116\076" +
    "\117\052\120\136\121\115\126\067\151\u0304\164\114\165" +
    "\073\171\157\172\015\174\055\175\165\176\030\177\145" +
    "\200\041\201\137\202\100\203\146\204\074\205\037\206" +
    "\054\210\103\214\175\222\164\225\110\226\122\227\062" +
    "\230\105\234\126\001\ufe6d\000\004\223\u037e\001\002\000" +
    "\002\001\ufeed\000\006\122\u0388\144\u0389\001\002\000\002" +
    "\001\uff71\000\022\011\174\013\064\104\u0385\107\u0188\112" +
    "\u0184\114\060\214\277\225\110\001\002\000\002\001\uff72" +
    "\000\002\001\uff70\000\004\067\366\001\ufe99\000\154\004" +
    "\156\006\116\007\012\010\066\011\174\013\064\020\141" +
    "\035\113\046\177\060\161\061\032\071\163\072\014\073" +
    "\021\074\047\075\051\076\143\077\006\100\036\107\176" +
    "\110\140\111\043\112\072\114\060\115\031\116\076\117" +
    "\052\120\136\121\115\126\067\164\114\165\073\171\157" +
    "\172\015\174\055\175\165\176\030\177\145\200\041\201" +
    "\137\202\100\203\146\204\074\205\037\206\054\210\103" +
    "\214\175\222\164\225\110\226\122\227\062\230\105\234" +
    "\126\001\002\000\070\034\u010a\105\u0387\123\u0102\124\u0112" +
    "\125\374\143\377\145\373\146\u010c\147\375\150\u0104\151" +
    "\u010b\152\u0110\153\u0105\154\371\155\u0103\156\u010f\157\u010e" +
    "\160\u0100\161\u010d\162\u0109\163\u0106\164\u0111\165\u0101\166" +
    "\u0108\167\u0107\170\372\173\376\001\002\000\002\001\uff6f" +
    "\000\006\013\u0380\225\u0381\001\002\000\002\001\uffd5\000" +
    "\002\001\uff73\000\156\004\156\006\116\007\012\010\066" +
    "\011\174\013\064\020\141\035\113\046\177\060\161\061" +
    "\032\071\163\072\014\073\021\074\047\075\051\076\143" +
    "\077\006\100\036\107\176\110\140\111\043\112\072\114" +
    "\060\115\031\116\076\117\052\120\136\121\115\126\067" +
    "\151\342\164\114\165\073\171\157\172\015\174\055\175" +
    "\165\176\030\177\145\200\041\201\137\202\100\203\146" +
    "\204\074\205\037\206\054\210\103\214\175\222\164\225" +
    "\110\226\122\227\062\230\105\234\126\001\uff7a\000\004" +
    "\223\u038d\001\002\000\002\001\ufeda\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u038c\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\104\003\154\007\166\010\157\013\120\055\150" +
    "\056\044\061\117\063\015\067\017\070\055\071\151\072" +
    "\130\101\076\112\070\114\123\117\062\122\124\127\111" +
    "\130\134\131\024\135\143\136\025\137\047\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\u037e\045\u0381\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u037a" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\154\052\u0376\055\150\056\044\061\117\063" +
    "\015\067\u0233\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\002\001\001\000\062\003\154\013\u0375\055\150\056" +
    "\044\061\117\063\015\067\017\070\055\071\151\072\130" +
    "\101\076\112\070\117\062\131\024\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\u0369\004\u036a\005\u036c\016\234\001\001\000\060" +
    "\003\154\055\150\056\044\061\117\063\015\067\u0368\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0367\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\106" +
    "\u0350\110\u0298\152\u0296\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u034f\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\002\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u034e\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u032f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\154\055\150\056\044\061\117\063\015\067\u0304\070\055" +
    "\071\151\072\130\101\076\104\u0306\105\u0305\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\036\003\u0188\056\044\070\055\071\u0182\072\130\101\076" +
    "\117\u0184\131\u01e3\146\u0302\147\006\150\022\152\122\156" +
    "\037\161\052\001\001\000\002\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0300\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\106\u02f9\107\u02f8\110\u0298\152\u0296\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\u02f4\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\004\011\u02f2\001\001\000\002\001\001\000" +
    "\004\003\u02f1\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u02f0\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u02ef\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\002\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u02ec\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\010\070\u02eb\072\130\152\122\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u02ea\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\u0124\070\u011d\071" +
    "\u011b\072\130\101\u0121\117\u011e\150\022\152\122\153\u02e8" +
    "\155\u011a\156\u0120\157\u0122\001\001\000\002\001\001\000" +
    "\010\106\u02de\110\u0298\152\u0296\001\001\000\004\003\u02d7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u02bd\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u02bc\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\060\003\154\055\150\056\044\061\117\063\015" +
    "\067\u02bb\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\004\051\u02b3\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\106\u0297\110\u0298\152\u0296\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\154\010" +
    "\u023b\013\120\055\150\056\044\061\117\063\015\067\017" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u0239\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\062\003\154\052\u0234\055\150\056\044" +
    "\061\117\063\015\067\u0233\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u0232\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u0231\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\154\055\150\056\044\061\117\063\015\067\u0217\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\060\003\154\055" +
    "\150\056\044\061\117\063\015\067\u0216\070\055\071\151" +
    "\072\130\101\076\112\070\117\062\131\024\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\060\003" +
    "\154\055\u0210\056\044\061\117\063\015\067\342\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\u020f\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u0208\001\001\000\060\003\154\055" +
    "\150\056\044\061\117\063\015\067\u0206\070\055\071\151" +
    "\072\130\101\076\112\070\117\062\131\024\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u01e5\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\u01e4\001\001\000\036\003\u0188\056\044" +
    "\070\055\071\u0182\072\130\101\076\117\u0184\131\u01e3\146" +
    "\u01e2\147\006\150\022\152\122\156\037\161\052\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u01e0\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\154\055\150\056\044\061\117\063\015\067\172\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\203\035\213\040\205\041\211\120\210\143\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\253\001" +
    "\001\000\002\001\001\000\004\036\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\220\001\001\000" +
    "\102\003\154\010\227\012\221\013\120\055\150\056\044" +
    "\061\117\063\015\067\017\070\055\071\151\072\130\101" +
    "\076\112\070\114\123\117\062\127\224\130\226\131\024" +
    "\135\143\136\025\137\047\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\002\001\001\000\004\016\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\257\001\001\000\002" +
    "\001\001\000\012\003\203\041\261\120\210\143\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\301\061\266\062\275\117\274\160\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\301" +
    "\061\266\062\326\117\274\160\270\001\001\000\002\001" +
    "\001\000\004\003\325\001\001\000\002\001\001\000\020" +
    "\003\301\061\266\062\311\064\307\066\310\117\274\160" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\301\061\266\062\304\117\274\160" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\315\001\001\000\002\001\001\000\014\003\301\061" +
    "\266\062\313\117\274\160\270\001\001\000\002\001\001" +
    "\000\014\003\301\061\266\062\316\117\274\160\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\301" +
    "\061\266\062\320\117\274\160\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\301\061\266\062\311" +
    "\064\323\066\310\117\274\160\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\301\061\266\062\334\117\274" +
    "\160\270\001\001\000\002\001\001\000\004\003\336\001" +
    "\001\000\002\001\001\000\064\003\154\042\340\043\344" +
    "\055\345\056\044\061\117\063\015\067\342\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\343\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\036" +
    "\003\u0188\056\044\070\055\071\u0182\072\130\101\076\116" +
    "\u01ac\117\u0184\131\u01ab\147\006\150\022\152\122\156\037" +
    "\161\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\154\055\351" +
    "\056\044\061\117\063\015\067\342\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\350\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\036\003\u0188\056\044\070\055" +
    "\071\u0182\072\130\101\076\116\u01aa\117\u0184\131\u01ab\147" +
    "\006\150\022\152\122\156\037\161\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\154\055\150\056" +
    "\044\061\117\063\015\067\u01a9\070\055\071\151\072\130" +
    "\101\076\112\070\117\062\131\024\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\u0181\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\060\003\154\055\150\056\044\061\117\063" +
    "\015\067\u017f\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u017e\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\060" +
    "\003\154\055\150\056\044\061\117\063\015\067\u017d\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u017c\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u017b\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u017a\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u0179\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\060\003\154\055\150\056\044\061\117\063\015" +
    "\067\u0178\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u0177" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\022\070" +
    "\u0130\072\130\074\u016b\100\u0129\101\u012c\113\u0128\147\u016a" +
    "\152\122\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\367\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\002\001\001\000\060\003\154\055\150\056" +
    "\044\061\117\063\015\067\u0169\070\055\071\151\072\130" +
    "\101\076\112\070\117\062\131\024\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\u0168\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\060\003\154\055\150\056\044\061\117\063" +
    "\015\067\u0167\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u0166\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\060" +
    "\003\154\055\150\056\044\061\117\063\015\067\u0165\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0164\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u015f\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u015e\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u015d\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\060\003\154\055\150\056\044\061\117\063\015" +
    "\067\u015c\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u015b" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\060\003" +
    "\154\055\150\056\044\061\117\063\015\067\u015a\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\060\003\154\055" +
    "\150\056\044\061\117\063\015\067\u0159\070\055\071\151" +
    "\072\130\101\076\112\070\117\062\131\024\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\060\003\154\055\150\056" +
    "\044\061\117\063\015\067\u0158\070\055\071\151\072\130" +
    "\101\076\112\070\117\062\131\024\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\u0157\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\060\003\154\055\150\056\044\061\117\063" +
    "\015\067\u0156\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u0155\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\032" +
    "\003\u0124\070\u011d\071\u011b\072\130\101\u0121\117\u011e\150" +
    "\022\152\122\153\u011f\155\u011a\156\u0120\157\u0122\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u0119\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\060" +
    "\003\154\055\150\056\044\061\117\063\015\067\u0118\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0117\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u0116\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u0115\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u0114\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\060\003\154\055\150\056\044\061\117\063\015" +
    "\067\u0113\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u0112" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\070\u0145\072\130" +
    "\152\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0126\001\001\000\002\001\001" +
    "\000\022\070\u0130\072\130\074\u012b\100\u0129\101\u012c\113" +
    "\u0128\147\u012a\152\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\070" +
    "\u013a\072\130\152\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\154\055\150\056\044\061\117\063" +
    "\015\067\u0138\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\002\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\u0136\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\062\003\154\055\150\056\044\061\117\063" +
    "\015\067\u0133\070\055\071\151\072\130\073\u0134\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u013d" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\154\055\150\056\044" +
    "\061\117\063\015\067\u0143\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\062\003\154\055\150\056\044\061\117" +
    "\063\015\067\u0133\070\055\071\151\072\130\073\u0141\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\072" +
    "\u014a\075\u0147\076\u0149\101\u0148\152\122\001\001\000\002" +
    "\001\001\000\010\072\u014a\075\u014b\152\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\154\055\150\056\044\061\117\063\015\067\u0150\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\062\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0133\070\055\071" +
    "\151\072\130\073\u014e\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\072\u014a\075\u0147\076\u0154\101\u0148" +
    "\152\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u0161\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\060\003\154\055\150\056\044\061\117\063" +
    "\015\067\u0163\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\154\042\u016d\043\344\055\345\056\044\061\117\063\015" +
    "\067\342\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\343\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\004\077\u016f\001\001\000\002\001\001" +
    "\000\062\003\154\055\150\056\044\061\117\063\015\067" +
    "\u0133\070\055\071\151\072\130\073\u0171\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\154\042" +
    "\u0174\043\344\055\345\056\044\061\117\063\015\067\342" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\343\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\004\077\u0176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\u0188\056" +
    "\044\070\055\071\u0182\072\130\101\076\117\u0184\131\u0185" +
    "\147\006\150\022\152\122\156\037\161\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\u0124\070" +
    "\u011d\071\u011b\072\130\101\u0121\117\u011e\150\022\152\122" +
    "\153\u018e\155\u011a\156\u0120\157\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\154\042\u018a\043\344" +
    "\055\345\056\044\061\117\063\015\067\342\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\343\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u018d\001\001\000\002\001\001\000" +
    "\004\060\u018f\001\001\000\002\001\001\000\064\003\154" +
    "\042\u0191\043\344\055\345\056\044\061\117\063\015\067" +
    "\342\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\343\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\072\u014a\075\u0147\076" +
    "\u0195\100\u0194\101\u0148\113\u0128\152\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\154\042\u0197\043" +
    "\344\055\345\056\044\061\117\063\015\067\342\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\343\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\154\042\u019a\043\344\055\345" +
    "\056\044\061\117\063\015\067\342\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\343\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\154\042\u019e\043\344\055" +
    "\345\056\044\061\117\063\015\067\342\070\055\071\151" +
    "\072\130\101\076\112\070\117\062\131\343\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\072\u014a\075\u0147\076\u01a2\100\u01a1\101\u0148" +
    "\113\u0128\152\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\154\042\u01a4\043\344\055\345\056\044" +
    "\061\117\063\015\067\342\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\343\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\154\042\u01a7\043\344\055\345\056\044\061\117\063" +
    "\015\067\342\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\343\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u01af\001\001\000\002\001\001\000" +
    "\016\003\203\035\u01b1\040\205\041\211\120\210\143\204" +
    "\001\001\000\002\001\001\000\004\036\u01b3\001\001\000" +
    "\002\001\001\000\004\011\u01b5\001\001\000\102\003\154" +
    "\010\227\012\221\013\120\055\150\056\044\061\117\063" +
    "\015\067\017\070\055\071\151\072\130\101\076\112\070" +
    "\114\123\117\062\127\224\130\226\131\024\135\143\136" +
    "\025\137\047\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\064\003\154\010\u01b9\013\120\055\150" +
    "\056\044\061\117\063\015\067\017\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\004\011\u01c3\001\001\000\004" +
    "\031\u01ba\001\001\000\004\033\u01bb\001\001\000\002\001" +
    "\001\000\064\003\154\010\u01c2\013\120\055\150\056\044" +
    "\061\117\063\015\067\017\070\055\071\151\072\130\101" +
    "\076\112\070\117\062\131\024\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u01bf\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\002\001\001\000\064\003\154" +
    "\010\u01c1\013\120\055\150\056\044\061\117\063\015\067" +
    "\017\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\003\154\010\227\012" +
    "\221\013\120\032\u01c4\055\150\056\044\061\117\063\015" +
    "\067\017\070\055\071\151\072\130\101\076\112\070\114" +
    "\123\117\062\127\224\130\226\131\024\135\143\136\025" +
    "\137\047\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\004" +
    "\034\u01c5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u01c9\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u01cc" +
    "\001\001\000\102\003\154\010\227\012\221\013\120\055" +
    "\150\056\044\061\117\063\015\067\017\070\055\071\151" +
    "\072\130\101\076\112\070\114\123\117\062\127\224\130" +
    "\226\131\024\135\143\136\025\137\047\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\004\011\u01ce\001\001\000\102" +
    "\003\154\010\227\012\221\013\120\055\150\056\044\061" +
    "\117\063\015\067\017\070\055\071\151\072\130\101\076" +
    "\112\070\114\123\117\062\127\224\130\226\131\024\135" +
    "\143\136\025\137\047\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\u01d2" +
    "\113\u01d3\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\301\061\266\062\u01d5\117\274\160\270\001\001" +
    "\000\002\001\001\000\066\003\154\010\u01dd\013\120\023" +
    "\u01db\055\150\056\044\061\117\063\015\067\017\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\004\113\u01d8\001" +
    "\001\000\002\001\001\000\014\003\301\061\266\062\u01da" +
    "\117\274\160\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u01de\001\001\000\002\001\001\000\102" +
    "\003\154\010\227\012\221\013\120\055\150\056\044\061" +
    "\117\063\015\067\017\070\055\071\151\072\130\101\076" +
    "\112\070\114\123\117\062\127\224\130\226\131\024\135" +
    "\143\136\025\137\047\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\u0188\056\044\070\055\071\u0182\072\130\101\076\102" +
    "\u01e9\103\u01ea\117\u0184\131\u01eb\147\006\150\022\152\122" +
    "\156\037\161\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\u0188" +
    "\056\044\070\055\071\u0182\072\130\101\076\102\u01ee\103" +
    "\u01ea\117\u0184\131\u01eb\147\006\150\022\152\122\156\037" +
    "\161\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0188\056\044\070\055\071\u0182\072\130\101\076" +
    "\103\u01f1\117\u0184\131\u01eb\147\006\150\022\152\122\156" +
    "\037\161\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\154\055\150\056\044\061\117\063\015\067" +
    "\u01f4\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\022\070\u0130\072\130\074\u01f7\100\u0129\101" +
    "\u012c\113\u0128\147\u01f6\152\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\154\042\u01f9\043\344\055" +
    "\345\056\044\061\117\063\015\067\342\070\055\071\151" +
    "\072\130\101\076\112\070\117\062\131\343\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\004\077" +
    "\u01fb\001\001\000\002\001\001\000\064\003\154\042\u01fd" +
    "\043\344\055\345\056\044\061\117\063\015\067\342\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\343" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\002\001\001" +
    "\000\004\077\u01ff\001\001\000\002\001\001\000\036\003" +
    "\u0188\056\044\070\055\071\u0182\072\130\101\076\117\u0184" +
    "\131\u0201\147\006\150\022\151\u0202\152\122\156\037\161" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\u0188\056\044\070\055\071\u0182\072" +
    "\130\101\076\117\u0184\131\u0205\147\006\150\022\152\122" +
    "\156\037\161\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\154\055\150\056\044\061\117\063\015" +
    "\067\u0209\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\072\u014a\075\u0147\076\u01a2\100\u01a1\101" +
    "\u0148\113\u0128\152\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\301" +
    "\061\266\062\u0215\117\274\160\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0219\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\004" +
    "\025\u021b\001\001\000\002\001\001\000\004\026\u022c\001" +
    "\001\000\004\026\u021e\001\001\000\002\001\001\000\004" +
    "\026\u0220\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u0228" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\004\027" +
    "\u0224\001\001\000\004\011\u0227\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\003\154\010\227\012\221\013" +
    "\120\055\150\056\044\061\117\063\015\067\017\070\055" +
    "\071\151\072\130\101\076\112\070\114\123\117\062\127" +
    "\224\130\226\131\024\135\143\136\025\137\047\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\004\027\u0229\001\001" +
    "\000\004\011\u022a\001\001\000\102\003\154\010\227\012" +
    "\221\013\120\055\150\056\044\061\117\063\015\067\017" +
    "\070\055\071\151\072\130\101\076\112\070\114\123\117" +
    "\062\127\224\130\226\131\024\135\143\136\025\137\047" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u022e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u0237" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\154\055\150\056\044\061\117\063\015\067\u023e" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\024\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\301\061" +
    "\266\062\u0245\117\274\160\270\001\001\000\002\001\001" +
    "\000\004\115\u0247\001\001\000\002\001\001\000\010\003" +
    "\203\120\u024a\142\u0249\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\203\120\u024c\001\001\000\002\001" +
    "\001\000\004\047\u024e\001\001\000\020\050\u0254\122\u025e" +
    "\123\u024f\125\u0255\126\u0257\145\u025d\162\u0250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\126" +
    "\u028a\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\154\013\u0289\055\150\056\044\061\117\063\015\067" +
    "\017\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\203\120\u026b\163\u026a\001\001\000\004\121\u0262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\301\061\266\062" +
    "\u0267\117\274\160\270\001\001\000\002\001\001\000\014" +
    "\003\301\061\266\062\u0269\117\274\160\270\001\001\000" +
    "\002\001\001\000\004\164\u026e\001\001\000\002\001\001" +
    "\000\006\003\203\120\u0288\001\001\000\024\003\203\120" +
    "\u0275\165\u0273\166\u0272\167\u0276\170\u0277\172\u0270\173\u0274" +
    "\174\u0271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\203\120\u0275" +
    "\167\u0282\170\u0277\172\u0270\173\u0274\174\u0271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\203" +
    "\120\u027e\171\u027d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\203\120\u0280\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\126\u0286\175\u0285\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u028c\001\001\000\004" +
    "\113\u028d\001\001\000\002\001\001\000\016\003\203\035" +
    "\u028f\040\205\041\211\120\210\143\204\001\001\000\002" +
    "\001\001\000\004\124\u0291\001\001\000\002\001\001\000" +
    "\004\011\u0294\001\001\000\002\001\001\000\102\003\154" +
    "\010\227\012\221\013\120\055\150\056\044\061\117\063" +
    "\015\067\017\070\055\071\151\072\130\101\076\112\070" +
    "\114\123\117\062\127\224\130\226\131\024\135\143\136" +
    "\025\137\047\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\110\u02a7\152\u0296" +
    "\001\001\000\002\001\001\000\034\003\u0188\056\044\070" +
    "\055\071\u0182\072\130\101\076\117\u0184\131\u02a5\147\006" +
    "\150\022\152\122\156\037\161\052\001\001\000\060\003" +
    "\154\055\150\056\044\061\117\063\015\067\u029d\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\006\110\u029c\152" +
    "\u0296\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\154\055\150\056" +
    "\044\061\117\063\015\067\u02a1\070\055\071\151\072\130" +
    "\101\076\112\070\117\062\131\024\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\111\u02af\113\u02b0\152\u02ae" +
    "\001\001\000\004\113\u02ad\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u02b4\001\001\000" +
    "\002\001\001\000\016\003\203\035\u02b6\040\205\041\211" +
    "\120\210\143\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u02b9\001\001\000\102\003\154\010\227" +
    "\012\221\013\120\055\150\056\044\061\117\063\015\067" +
    "\017\070\055\071\151\072\130\101\076\112\070\114\123" +
    "\117\062\127\224\130\226\131\024\135\143\136\025\137" +
    "\047\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\154\055\u02c0\056\044\061\117\063\015\067" +
    "\342\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\u02bf\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\u0188\056\044\070" +
    "\055\071\u0182\072\130\101\076\117\u0184\131\u02c2\147\006" +
    "\150\022\152\122\156\037\161\052\001\001\000\004\017" +
    "\u02c3\001\001\000\002\001\001\000\036\003\u0188\020\u02c5" +
    "\056\044\070\055\071\u0182\072\130\101\076\117\u0184\131" +
    "\u02c6\147\006\150\022\152\122\156\037\161\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\u0188\056" +
    "\044\070\055\071\u0182\072\130\101\076\117\u0184\131\u02c8" +
    "\147\006\150\022\152\122\156\037\161\052\001\001\000" +
    "\002\001\001\000\066\003\154\010\u02cb\013\120\022\u02cc" +
    "\055\150\056\044\061\117\063\015\067\017\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\004\011\u02cd\001\001" +
    "\000\002\001\001\000\002\001\001\000\102\003\154\010" +
    "\227\012\221\013\120\055\150\056\044\061\117\063\015" +
    "\067\017\070\055\071\151\072\130\101\076\112\070\114" +
    "\123\117\062\127\224\130\226\131\024\135\143\136\025" +
    "\137\047\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\036\003\u0188\020\u02d0\056\044\070\055\071" +
    "\u0182\072\130\101\076\117\u0184\131\u02c6\147\006\150\022" +
    "\152\122\156\037\161\052\001\001\000\004\017\u02d1\001" +
    "\001\000\002\001\001\000\066\003\154\010\u02cb\013\120" +
    "\022\u02d3\055\150\056\044\061\117\063\015\067\017\070" +
    "\055\071\151\072\130\101\076\112\070\117\062\131\024" +
    "\144\152\146\106\147\006\150\022\152\122\154\100\156" +
    "\037\161\052\176\161\177\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u02dc\001" +
    "\001\000\002\001\001\000\004\006\u02da\001\001\000\002" +
    "\001\001\000\104\003\154\007\166\010\157\013\120\055" +
    "\150\056\044\061\117\063\015\067\017\070\055\071\151" +
    "\072\130\101\076\112\070\114\123\117\062\122\124\127" +
    "\111\130\134\131\024\135\143\136\025\137\047\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\104" +
    "\003\154\007\166\010\157\013\120\055\150\056\044\061" +
    "\117\063\015\067\017\070\055\071\151\072\130\101\076" +
    "\112\070\114\123\117\062\122\124\127\111\130\134\131" +
    "\024\135\143\136\025\137\047\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\006\110\u02a7\152\u0296" +
    "\001\001\000\002\001\001\000\040\003\u0188\014\u02e3\015" +
    "\u02e1\056\044\070\055\071\u0182\072\130\101\076\117\u0184" +
    "\131\u02e2\147\006\150\022\152\122\156\037\161\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\u0188\015\u02e6\056\044\070" +
    "\055\071\u0182\072\130\101\076\117\u0184\131\u02e2\147\006" +
    "\150\022\152\122\156\037\161\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u02e9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\102\003\154\010" +
    "\227\012\221\013\120\055\150\056\044\061\117\063\015" +
    "\067\017\070\055\071\151\072\130\101\076\112\070\114" +
    "\123\117\062\127\224\130\226\131\024\135\143\136\025" +
    "\137\047\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\072" +
    "\u014a\075\u0147\076\u0195\100\u0194\101\u0148\113\u0128\152\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\110" +
    "\u02a7\152\u0296\001\001\000\006\110\u029c\152\u0296\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\u0188\056\044\070" +
    "\055\071\u0182\072\130\101\076\116\u0315\117\u0184\131\u01ab" +
    "\147\006\150\022\152\122\156\037\161\052\001\001\000" +
    "\002\001\001\000\004\065\u0309\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\154\055\150\056\044\061" +
    "\117\063\015\067\u030b\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\002\001\001\000\036\003\u0188\056\044\070" +
    "\055\071\u0182\072\130\101\076\116\u0310\117\u0184\131\u01ab" +
    "\147\006\150\022\152\122\156\037\161\052\001\001\000" +
    "\002\001\001\000\060\003\154\055\150\056\044\061\117" +
    "\063\015\067\u030e\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\036\003\u0188\056\044\070\055\071\u0182\072\130" +
    "\101\076\116\u030f\117\u0184\131\u01ab\147\006\150\022\152" +
    "\122\156\037\161\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\154\055\150\056" +
    "\044\061\117\063\015\067\u0313\070\055\071\151\072\130" +
    "\101\076\112\070\117\062\131\024\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\036\003\u0188\056\044\070\055\071" +
    "\u0182\072\130\101\076\116\u0314\117\u0184\131\u01ab\147\006" +
    "\150\022\152\122\156\037\161\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\154" +
    "\055\150\056\044\061\117\063\015\067\u0317\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\140\u031b\001\001\000\006\003\203\120" +
    "\u0322\001\001\000\004\141\u031c\001\001\000\002\001\001" +
    "\000\010\003\203\120\u024a\142\u031e\001\001\000\002\001" +
    "\001\000\004\047\u0320\001\001\000\020\050\u0254\122\u025e" +
    "\123\u024f\125\u0255\126\u0257\145\u025d\162\u0250\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\154\055\150" +
    "\056\044\061\117\063\015\067\u0324\070\055\071\151\072" +
    "\130\101\076\112\070\117\062\131\024\144\152\146\106" +
    "\147\006\150\022\152\122\154\100\156\037\161\052\176" +
    "\161\177\012\001\001\000\002\001\001\000\066\003\154" +
    "\010\u0328\013\120\030\u0327\055\150\056\044\061\117\063" +
    "\015\067\017\070\055\071\151\072\130\101\076\112\070" +
    "\117\062\131\024\144\152\146\106\147\006\150\022\152" +
    "\122\154\100\156\037\161\052\176\161\177\012\001\001" +
    "\000\004\011\u0329\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\003\154\010\227\012\221\013\120\055\150" +
    "\056\044\061\117\063\015\067\017\070\055\071\151\072" +
    "\130\101\076\112\070\114\123\117\062\127\224\130\226" +
    "\131\024\135\143\136\025\137\047\144\152\146\106\147" +
    "\006\150\022\152\122\154\100\156\037\161\052\176\161" +
    "\177\012\001\001\000\002\001\001\000\062\003\154\055" +
    "\150\056\044\061\117\063\015\067\u0133\070\055\071\151" +
    "\072\130\073\u032c\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\301\061\266\062\u0334\117\274\160\270\001\001\000\002" +
    "\001\001\000\014\003\301\061\266\062\u0336\117\274\160" +
    "\270\001\001\000\002\001\001\000\004\011\u0338\001\001" +
    "\000\102\003\154\010\227\012\221\013\120\055\150\056" +
    "\044\061\117\063\015\067\017\070\055\071\151\072\130" +
    "\101\076\112\070\114\123\117\062\127\224\130\226\131" +
    "\024\135\143\136\025\137\047\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\203\120\u033c\001\001\000\004\152\u033d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0340\001\001" +
    "\000\102\003\154\010\227\012\221\013\120\055\150\056" +
    "\044\061\117\063\015\067\017\070\055\071\151\072\130" +
    "\101\076\112\070\114\123\117\062\127\224\130\226\131" +
    "\024\135\143\136\025\137\047\144\152\146\106\147\006" +
    "\150\022\152\122\154\100\156\037\161\052\176\161\177" +
    "\012\001\001\000\010\132\u0343\133\u0345\134\u0344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\134\u0346\001\001\000\002\001\001\000\006\003\203" +
    "\120\u0348\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u034c\001\001\000\102\003\154" +
    "\010\227\012\221\013\120\055\150\056\044\061\117\063" +
    "\015\067\017\070\055\071\151\072\130\101\076\112\070" +
    "\114\123\117\062\127\224\130\226\131\024\135\143\136" +
    "\025\137\047\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\110\u02a7\152\u0296\001\001\000\006\110\u029c\152\u0296\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\154" +
    "\053\u0356\054\u0357\055\150\056\044\061\117\063\015\067" +
    "\u0355\070\055\071\151\072\130\101\076\112\070\117\062" +
    "\131\024\144\152\146\106\147\006\150\022\152\122\154" +
    "\100\156\037\161\052\176\161\177\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\154\055\150\056\044\061\117\063\015\067\u0359\070\055" +
    "\071\151\072\130\101\076\112\070\117\062\131\024\144" +
    "\152\146\106\147\006\150\022\152\122\154\100\156\037" +
    "\161\052\176\161\177\012\001\001\000\002\001\001\000" +
    "\064\003\154\053\u035b\054\u0357\055\150\056\044\061\117" +
    "\063\015\067\u0355\070\055\071\151\072\130\101\076\112" +
    "\070\117\062\131\024\144\152\146\106\147\006\150\022" +
    "\152\122\154\100\156\037\161\052\176\161\177\012\001" +
    "\001\000\002\001\001\000\064\003\154\053\u035d\054\u0357" +
    "\055\150\056\044\061\117\063\015\067\u0355\070\055\071" +
    "\151\072\130\101\076\112\070\117\062\131\024\144\152" +
    "\146\106\147\006\150\022\152\122\154\100\156\037\161" +
    "\052\176\161\177\012\001\001\000\002\001\001\000\066" +
    "\003\154\010\u0361\013\120\021\u035f\055\150\056\044\061" +
    "\117\063\015\067\017\070\055\071\151\072\130\101\076" +
    "\112\070\117\062\131\024\144\152\146\106\147\006\150" +
    "\022\152\122\154\100\156\037\161\052\176\161\177\012" +
    "\001\001\000\002\001\001\000\004\011\u0362\001\001\000" +
    "\002\001\001\000\102\003\154\010\227\012\221\013\120" +
    "\055\150\056\044\061\117\063\015\067\017\070\055\071" +
    "\151\072\130\101\076\112\070\114\123\117\062\127\224" +
    "\130\226\131\024\135\143\136\025\137\047\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\034\003" +
    "\u0188\056\044\070\055\071\u0182\072\130\101\076\117\u0184" +
    "\131\u0365\147\006\150\022\152\122\156\037\161\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0370\001\001\000\002\001\001\000\006\003\u0369" +
    "\004\u036f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\154\055\150\056\044\061" +
    "\117\063\015\067\u0304\070\055\071\151\072\130\101\076" +
    "\104\u037c\105\u0305\112\070\117\062\131\024\144\152\146" +
    "\106\147\006\150\022\152\122\154\100\156\037\161\052" +
    "\176\161\177\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0188" +
    "\056\044\070\055\071\u0182\072\130\101\076\117\u0184\131" +
    "\u0383\144\u0382\147\006\150\022\152\122\156\037\161\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\154\055\150\056\044\061\117\063\015" +
    "\067\u0385\070\055\071\151\072\130\101\076\112\070\117" +
    "\062\131\024\144\152\146\106\147\006\150\022\152\122" +
    "\154\100\156\037\161\052\176\161\177\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0389\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\154\042" +
    "\u038b\043\344\055\345\056\044\061\117\063\015\067\342" +
    "\070\055\071\151\072\130\101\076\112\070\117\062\131" +
    "\343\144\152\146\106\147\006\150\022\152\122\154\100" +
    "\156\037\161\052\176\161\177\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = Integer.valueOf(Modifiers.AccPublic);
	protected final static Integer PRIVATE = Integer.valueOf(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = Integer.valueOf(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = Integer.valueOf(Modifiers.AccAbstract);
	protected final static Integer FINAL = Integer.valueOf(Modifiers.AccFinal);
	protected final static Integer STATIC = Integer.valueOf(Modifiers.AccStatic);

	AST ast;

	public final void setAST (AST ast) {
		this.ast = ast;
	}

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable) property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (FunctionInvocation) property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

	protected VariableBase createDispatch(VariableBase dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected VariableBase resolveDimList(VariableBase variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			variable = new ArrayAccess(variable.getStart(), el.right, ast, variable, el.index, el.type);
		}
		return variable;
	}

	/** Report a non fatal error (or warning).  This method takes a message
	 *  string and an additional object (to be used by specializations
	 *  implemented in subclasses). Here in the base class a very simple
	 *  implementation is provided which simply prints the message to
	 *  System.err.
	 *
	 * @param message an error message.
	 * @param info    an extra object reserved for use by specialized subclasses.
	 */
	public void report_error(String message, Object info)
	{
		if (DLTKCore.DEBUG) {
			super.report_error(message, info);
		}
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}

	public void report_fatal_error(
	String message,
	Object info)
	throws java.lang.Exception
	{
		/* stop parsing (not really necessary since we throw an exception, but) */
		done_parsing();

		/* use the normal error message reporting to put out the message */
		report_error(message, info);

		/* throw an exception */
		// throw new Exception("Can't recover from previous error(s)");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PHPAstParser$actions {
  private final PHPAstParser parser;

  /** Constructor */
  CUP$PHPAstParser$actions(PHPAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000000(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	PHPAstLexer phpAstLexer = (PHPAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	RESULT = new Program(sListleft, sListright, parser.ast, sList, commentList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAstParser$parser.done_parsing();
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= T_STRING 
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= T_DEFINE 
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			// EmptyStatement length == 2 means it is "?>",
			// equals to 1 means it is ";"
			if (!(statement instanceof EmptyStatement && statement.getLength() >= 2) && lastStatement instanceof NamespaceDeclaration && !((NamespaceDeclaration) lastStatement).isBracketed()) {
				((NamespaceDeclaration) lastStatement).addStatement(statement);
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, null,
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(useDecl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",3, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_declaration ::= namespace_name 
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(sleft, listright, parser.ast,
		new NamespaceName(sleft, listright, parser.ast, list, true, false), null);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UseStatementPart(sleft, aliasNameright, parser.ast,
		new NamespaceName(sleft, listright, parser.ast, list, true, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",2, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		sList.add(statement);
	}
	RESULT = sList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",7, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(tokenleft, eright, parser.ast, sList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int s = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int s = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List conds = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ForStatement(tokenleft, statementright, parser.ast, initializations, conds, increasements, statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GlobalStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticStatement(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(sleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, exprright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "use")), list));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(sleft, eright, parser.ast,
		new FunctionInvocation(sleft, closeParright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "unset")), list));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ForEachStatement s = null;
	if (arg == null) {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ForEachStatement s = null;
	if (arg == null) {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new DeclareStatement(sleft, statementright, parser.ast, lists[0], lists[1], statement);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	RESULT = new TryStatement(sleft, catchesListright, parser.ast, tryBlock, catchesList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-12)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(sleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, eright, parser.ast, exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",9, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",88, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",89, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className,
		new Variable(varleft, varright, parser.ast, var),
		new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("additional_catch",90, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",10, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",11, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",12, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",85, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",86, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",39, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(fnleft, fnright, parser.ast, fn), paramList,
		new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",91, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (modifier.intValue() == ClassDeclaration.MODIFIER_TRAIT) {
		RESULT = new TraitDeclaration(modifierleft, blockEndright, parser.ast, ClassDeclaration.MODIFIER_NONE,
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}else{
		RESULT = new ClassDeclaration(modifierleft, blockEndright, parser.ast, modifier.intValue(),
			new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
			new Block(blockStartleft, blockEndright, parser.ast, sList));
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InterfaceDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(classNameleft, classNameright, parser.ast, className), interfaces,
		new Block(blockStartleft, blockEndright, parser.ast, sList));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",92, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // class_entry_type ::= T_TRAIT 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_TRAIT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",93, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // extends_from ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",94, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",74, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",75, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",75, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",95, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",96, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",13, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Reference (sleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",14, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",15, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",16, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",17, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
	listValues.add(value);

	RESULT = new List[] { listKeys, listValues };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",18, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",19, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",21, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",22, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(cond);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",23, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, sListright, parser.ast, sList, false);
	((LinkedList) elseifList[0]).addFirst(cond);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
	RESULT = elseifList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",24, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("else_single",25, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Block(colonleft, listright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",26, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",30, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, v, scalar);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, ref_var, scalar);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // optional_class_type ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // optional_class_type ::= fully_qualified_class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optional_class_type ::= T_ARRAY 
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optional_class_type ::= T_CALLABLE 
            {
              Expression RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object callable = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(callableleft, callableright, parser.ast, "callable");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",97, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",32, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",33, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",34, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("global_var",35, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",36, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // class_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",37, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	modifier = modifier == null ? PHPAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	RESULT = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_statement ::= trait_use_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",38, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, parser.ast, list, adaptations);
	RESULT = traitUseStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",112, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<NamespaceName> traitList = new LinkedList<NamespaceName>();
	traitList.add(name);
	RESULT = traitList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",113, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName name = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",113, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",114, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",114, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",115, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",115, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",116, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",116, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, parser.ast, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",117, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, parser.ast, alias);
	RESULT = traitAliasStatement;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",117, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, parser.ast, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",118, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List<NamespaceName> trList = new LinkedList<NamespaceName>();
	trList.add(className);
	RESULT = trList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",119, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",119, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	//FunctionName name = new FunctionName(sleft, sright, parser.ast,
	//		new Identifier(sleft, sright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new Identifier(sleft, sright, parser.ast, s);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",120, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",120, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	//FunctionName name = new FunctionName(functionNameleft, functionNameright, parser.ast,
	//		new Identifier(functionNameleft, functionNameright, parser.ast, s));
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, parser.ast, className, name);
	RESULT = methodReference;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",121, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? functionNameleft : modifierleft;
	//SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	TraitAlias alias = new TraitAlias(referenceleft, functionNameright, parser.ast, reference, modifierValue, modifierOffset, name);
	RESULT = alias;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",122, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // trait_alias ::= trait_method_reference T_AS member_modifier 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
	int modifierOffset = modifier == null ? asright + 1 : modifierleft;
	TraitAlias alias = new TraitAlias(referenceleft, modifierright, parser.ast, reference, modifierValue, modifierOffset, null);
	RESULT = alias;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",122, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // trait_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",123, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // trait_modifiers ::= member_modifier 
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",123, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Block block = new Block(sleft, eright, parser.ast, list);
	RESULT = block;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_body",82, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",99, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext();) {
		Integer modifier = (Integer) it.next();
		result |= modifier.intValue();
	}
	RESULT = Integer.valueOf(result);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",81, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",83, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PUBLIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PROTECTED;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.PRIVATE;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.STATIC;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.ABSTRACT;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = PHPAstParser.FINAL;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",84, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",79, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",80, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",40, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",41, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",42, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // chain_instance_call ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int openleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(openleft, endright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Variable memberProperty = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.resolveDimList(new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList)), list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (memberProperty.list != null) {
		RESULT = new FunctionInvocation(chleft, endright, parser.ast,
				new FunctionName(chleft, memberPropertyright, parser.ast, parser.createDispatch(ch, memberProperty)), paramsList);
	} else {
		RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty.variable), paramsList));
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",124, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",125, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
	RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL,
		new Reference(reftokenleft, ctorright, parser.ast,
			new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor)));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_AND_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_OR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SL_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SR_EQUAL, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_INC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_DEC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_OR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_AND, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_XOR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MUL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_DIV, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MOD, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SR, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_NOT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_TILDA);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= chain_instance_call 
            {
              Expression RESULT =null;
		int chainleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase chain = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = chain;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, ifTrue, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, null, ifFalse);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_OBJECT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_BOOL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_UNSET);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, s)), expList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "print")), expList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue(), true, stleft);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",43, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",28, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Variable(varleft, varright, parser.ast, var));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",29, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(listleft, eright, parser.ast,
		new FunctionName(listleft, listright, parser.ast,
			new NamespaceName(listleft, listright, parser.ast, list, false, false)), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, listright, parser.ast,
			new NamespaceName(sleft, listright, parser.ast, list, false, true)), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, listright, parser.ast,
			new NamespaceName(sleft, listright, parser.ast, list, true, false)), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase fn = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast,
				fn), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList((VariableBase) finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariable(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, parser.ast, finalVar);
	}
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, finalVar), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList((VariableBase) finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariable(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, parser.ast, finalVar);
	}
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(reflectionNameleft, eright, parser.ast,
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, finalVar), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase fn = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast,
				fn), parameters));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(reflectionNameleft, eright, parser.ast,
		new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // function_call ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		VariableBase call = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(callleft, eright, parser.ast, call, expr, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "static");

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // class_name ::= namespace_name 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action_part00000001(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name",77, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // fully_qualified_class_name ::= namespace_name 
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",78, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // class_name_reference ::= class_name 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",105, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ClassName(varleft, varright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",107, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // dynamic_class_name_variable_property ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",45, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",69, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",46, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // common_scalar ::= T_BNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_BIN);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // common_scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // common_scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // common_scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // common_scalar ::= T_TRAIT_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__TRAIT__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // common_scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, parser.ast, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, parser.ast, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",47, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // static_scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier) list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // static_scalar ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",48, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",110, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier) list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_SINGLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_HEREDOC);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("scalar",49, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",50, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",51, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("expr",53, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // r_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",98, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // w_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",76, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // rw_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",100, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		Variable memberProperty = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.resolveDimList(new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList)), list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              VariableBase RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).right;
		VariableBase ch = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (memberProperty.list != null) {
		RESULT = new FunctionInvocation(chleft, endright, parser.ast,
				new FunctionName(chleft, memberPropertyright, parser.ast, parser.createDispatch(ch, memberProperty)), paramsList);
	} else {
		RESULT = new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(memberPropertyleft, endright, parser.ast,
				new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty.variable), paramsList));
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable",87, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",101, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // field_access_dim_list_indirect_reference ::= field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // field_access_dim_list_indirect_reference ::= simple_indirect_reference field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.refCount = ref_count;
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",60, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",59, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable finalVar = (Variable) var.variable;
	int end = var.variable.getEnd();
	if (var.refCount > 0) {
		finalVar = (Variable) parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariable(varleft + var.refCount - i - 1, varright, parser.ast, finalVar);
		}
		var.list = null;
		end = varright;
	}
	RESULT = parser.resolveDimList(new StaticFieldAccess(classNameleft, end, parser.ast, className, finalVar), var.list);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",102, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	Variable finalVar = (Variable) var.variable;
	int end = var.variable.getEnd();
	if (var.refCount > 0) {
		finalVar = (Variable) parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariable(varleft + var.refCount - i - 1, varright, parser.ast, finalVar);
		}
		var.list = null;
		end = varright;
	}
	RESULT = parser.resolveDimList(new StaticFieldAccess(classNameleft, end, parser.ast, className, finalVar), var.list);;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("static_member",102, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // variable_class_name ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",55, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",111, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",111, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // base_variable ::= reference_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
	}
	RESULT = finalVar;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // base_variable ::= static_member 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",108, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // reference_variable ::= compound_variable 
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",54, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // compound_variable ::= tracked_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(sleft, eright, parser.ast, expr);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",56, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",57, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // dim_list ::= 
            {
              DimList RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // dim_list ::= dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              DimList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (list == null) {
		list = new DimList();
	}
	list.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",61, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",58, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // variable_name ::= string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",62, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",63, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",64, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(sleft, eright, parser.ast, varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",65, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // array_pair_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",66, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",67, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, Scalar.TYPE_STRING));
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",68, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(var, new Variable(stringleft, stringright, parser.ast, string));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new ArrayAccess(varNameleft, cright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, new Variable(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",70, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Identifier(stringleft, stringright, parser.ast, string);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Scalar(numleft, numright, parser.ast, num, Scalar.TYPE_REAL);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",71, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast,
			new Identifier(sleft, sright, parser.ast, "isset")), varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	LinkedList varList = new LinkedList();
	varList.add(var);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "empty")), varList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "eval")), exprList);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",72, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",103, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",103, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
		new Identifier(varNameleft, varNameright, parser.ast, varName));

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",106, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.elementAt(CUP$PHPAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",104, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAstParser$result = parser.getSymbolFactory().newSymbol("string_st",73, ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAstParser$stack.peek()), RESULT);
            }
          return CUP$PHPAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PHPAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PHPAstParser$do_action(
    int                        CUP$PHPAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAstParser$parser,
    java.util.Stack            CUP$PHPAstParser$stack,
    int                        CUP$PHPAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$PHPAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$PHPAstParser$do_action_part00000000(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$PHPAstParser$do_action_part00000001(
                               CUP$PHPAstParser$act_num,
                               CUP$PHPAstParser$parser,
                               CUP$PHPAstParser$stack,
                               CUP$PHPAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
