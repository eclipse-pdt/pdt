package org.eclipse.php.internal.core.compiler.ast.parser.php4;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    $Id: php_compiler_ast_parser.cup,v 1.25 2010/07/23 13:51:23 zzhongwei Exp $
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php4.*;

parser code {:

    public Expression createDispatch(Expression dispatcher, Expression property) {

        if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
            ((ReflectionCallExpression) property).setReceiver (dispatcher);
            dispatcher = property;
        } else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
            PHPCallExpression callExpression = (PHPCallExpression) property;
            dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
        } else {
            dispatcher = new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
        }

        return dispatcher;
    }

	protected Expression constructStaticMember(TypeReference className, Expression dispatcher) {

		Expression result = null;
		if (dispatcher.getKind() == ASTNodeKinds.FIELD_ACCESS) {
			FieldAccess fieldAccess = (FieldAccess)dispatcher;
			Expression var = constructStaticMember(className, fieldAccess.getDispatcher());
			FieldAccess newFieldAccess = new FieldAccess(var.sourceStart(), fieldAccess.getField().sourceEnd() ,var, fieldAccess.getField());
			result = newFieldAccess;
		}
		else if (dispatcher.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			ReflectionCallExpression methodInvocation = (ReflectionCallExpression)dispatcher;
			Expression var = constructStaticMember(className, methodInvocation.getReceiver());
			ReflectionCallExpression newMethodInvocation =  new ReflectionCallExpression(var.sourceStart(), methodInvocation.getName().sourceEnd() ,dispatcher, methodInvocation.getName(), methodInvocation.getArguments());
			result = newMethodInvocation;
		}
		else if (dispatcher.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) dispatcher;
			Expression var = constructStaticMember(className, (Expression)callExpression.getReceiver());
			PHPCallExpression newCallExpression =  new PHPCallExpression(var.sourceStart(), callExpression.getCallName().sourceEnd() ,dispatcher, callExpression.getName(), callExpression.getArgs());
			result = newCallExpression;
		}
		else {
			result = new StaticFieldAccess(className.sourceStart(), dispatcher.sourceEnd(), className, dispatcher);
		}
		return result;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

    protected void report_expected_token_ids()
    {
        // XXX : really verbose, disable it completely for now
        // if (DLTKCore.DEBUG) {
        //     super.report_expected_token_ids();
        // }
    }
:}

/* terminals */

terminal  String T_EXIT;
terminal  T_IF;
terminal  String T_LNUMBER;
terminal  String T_DNUMBER;
terminal  String T_STRING;
terminal  String T_STRING_VARNAME;
terminal  String T_VARIABLE;
terminal  String T_NUM_STRING;
terminal  T_INLINE_HTML;
terminal  String T_CHARACTER;
terminal  String T_BAD_CHARACTER;
terminal  String T_ENCAPSED_AND_WHITESPACE;
terminal  String T_CONSTANT_ENCAPSED_STRING;
terminal  T_ECHO;
terminal  T_DO;
terminal  T_WHILE;
terminal  T_ENDWHILE;
terminal  T_FOR;
terminal  T_ENDFOR;
terminal  T_FOREACH;
terminal  T_ENDFOREACH;
terminal  T_DECLARE;
terminal  T_ENDDECLARE;
terminal  T_AS;
terminal  T_SWITCH;
terminal  T_ENDSWITCH;
terminal  T_CASE;
terminal  T_DEFAULT;
terminal  T_BREAK;
terminal  T_CONTINUE;
terminal  PHPDocBlock T_FUNCTION;
terminal  T_OLD_FUNCTION;
terminal  T_CONST;
terminal  T_RETURN;
terminal  T_USE;
terminal  T_GLOBAL;
terminal  PHPDocBlock T_VAR;
terminal  String T_UNSET;
terminal  String T_ISSET;
terminal  String T_EMPTY;
terminal  PHPDocBlock T_CLASS;
terminal  T_EXTENDS;
terminal  T_OBJECT_OPERATOR;
terminal  T_DOUBLE_ARROW;
terminal  T_LIST;
terminal  T_ARRAY;
terminal  T_CLASS_C;
terminal  T_FUNC_C;
terminal  T_LINE;
terminal  String T_FILE;
terminal  T_START_HEREDOC;
terminal  T_END_HEREDOC;
terminal  T_DOLLAR_OPEN_CURLY_BRACES;
terminal  T_CURLY_OPEN;
terminal  T_CURLY_CLOSE;
terminal  T_PAAMAYIM_NEKUDOTAYIM;
terminal String T_VAR_COMMENT;
terminal String T_DEFINE;

terminal String T_INCLUDE,T_INCLUDE_ONCE,T_EVAL,T_REQUIRE,T_REQUIRE_ONCE;
terminal T_COMMA;
terminal String T_LOGICAL_OR,T_LOGICAL_XOR,T_LOGICAL_AND,T_PRINT;
terminal T_EQUAL;
terminal T_PLUS_EQUAL,T_MINUS_EQUAL,T_MUL_EQUAL,T_DIV_EQUAL,T_CONCAT_EQUAL,T_MOD_EQUAL,T_AND_EQUAL,T_OR_EQUAL,T_XOR_EQUAL,T_SL_EQUAL,T_SR_EQUAL;
terminal T_QUESTION_MARK;
terminal T_SEMICOLON;
terminal T_BOOLEAN_OR, T_BOOLEAN_AND;
terminal T_OR;
terminal T_KOVA;
terminal T_REFERENCE;
terminal T_IS_EQUAL,T_IS_NOT_EQUAL,T_IS_IDENTICAL,T_IS_NOT_IDENTICAL;
terminal T_IS_SMALLER_OR_EQUAL,T_IS_GREATER_OR_EQUAL;
terminal T_RGREATER;
terminal T_LGREATER;
terminal T_SL,T_SR;
terminal T_PLUS;
terminal T_MINUS;
terminal T_TIMES;
terminal T_DIV;
terminal T_PRECENT;
terminal T_NOT;
terminal T_TILDA;
terminal T_NEKUDA;
terminal T_INC,T_DEC,T_INT_CAST,T_DOUBLE_CAST,T_STRING_CAST,T_ARRAY_CAST,T_OBJECT_CAST,T_BOOL_CAST,T_UNSET_CAST;
terminal T_AT;
terminal T_OPEN_RECT,T_CLOSE_RECT;
terminal T_NEW;
terminal T_ENDIF;
terminal T_ELSEIF;
terminal T_ELSE;
terminal PHPDocBlock T_STATIC;
terminal T_OPEN_PARENTHESE,T_CLOSE_PARENTHESE;
terminal T_NEKUDOTAIM;
terminal T_DOLLAR;
terminal T_QUATE,T_BACKQUATE,T_SINGLE_QUATE;

/* Non terminals */

non terminal ModuleDeclaration thestart;
non terminal top_statement_list;
non terminal Statement top_statement;
non terminal Statement statement;
non terminal List inner_statement_list;
non terminal Statement inner_statement;
non terminal Statement unticked_statement;
non terminal PHPCallArgumentsList unset_variables;
non terminal Expression unset_variable;
non terminal Expression use_filename;
non terminal Expression foreach_optional_arg;
non terminal Statement for_statement;
non terminal Statement foreach_statement;
non terminal Statement declare_statement;
non terminal List[] declare_list;
non terminal Block switch_case_list;
non terminal List case_list;
non terminal case_separator;
non terminal Statement while_statement;
non terminal List[] elseif_list;
non terminal List[] new_elseif_list;
non terminal Statement else_single;
non terminal Statement new_else_single;
non terminal List parameter_list;
non terminal List non_empty_parameter_list;
non terminal FormalParameter parameter;
non terminal PHPCallArgumentsList function_call_parameter_list;
non terminal PHPCallArgumentsList non_empty_function_call_parameter_list;
non terminal List global_var_list;
non terminal Expression global_var;
non terminal List static_var_list;
non terminal class_statement_list;
non terminal class_statement;
non terminal Boolean is_reference;
non terminal List echo_expr_list;
non terminal List for_expr;
non terminal List non_empty_for_expr;
non terminal Expression expr_without_variable;
non terminal Expression function_call;
non terminal Expression exit_expr;
non terminal PHPCallArgumentsList ctor_arguments;
non terminal Scalar common_scalar;
non terminal Expression static_scalar;
non terminal Expression scalar;
non terminal List static_array_pair_list;
non terminal possible_comma;
non terminal List non_empty_static_array_pair_list;
non terminal Expression expr;
non terminal Expression reference_variable;
non terminal Expression compound_variable;
non terminal Expression dim_offset;
non terminal Expression object_property;
non terminal Expression object_dim_list;
non terminal Expression variable_name;
non terminal Integer simple_indirect_reference;
non terminal List assignment_list;
non terminal Expression assignment_list_element;
non terminal List array_pair_list;
non terminal List non_empty_array_pair_list;
non terminal List encaps_list;
non terminal Expression encaps_var;
non terminal Expression encaps_var_offset;
non terminal Expression internal_functions_in_yacc;
non terminal String string_st;
non terminal Expression static_or_variable_string;

non terminal List class_variable_declaration;
non terminal Statement declaration_statement;
non terminal Expression cvar;
non terminal Statement unticked_declaration_statement;
non terminal Expression r_cvar;
non terminal Expression w_cvar;
non terminal Expression rw_cvar;
non terminal Expression cvar_without_objects;
non terminal PHPCallArgumentsList isset_variables;
non terminal VariableReference tracked_variable;
non terminal List ref_list;

/* rules added by us in order to improve error handling */
non terminal Statement class_closure;
non terminal PHPMethodDeclaration function_body;
non terminal Statement method_body;
non terminal errorOrNot;
non terminal Statement unticked_class_declaration_statement;
non terminal TypeReference extends_from;

precedence left T_INCLUDE, T_INCLUDE_ONCE, T_EVAL, T_REQUIRE, T_REQUIRE_ONCE;
precedence left T_COMMA;
precedence left T_LOGICAL_OR;
precedence left T_LOGICAL_XOR;
precedence left T_LOGICAL_AND;
precedence right T_PRINT;
precedence left T_EQUAL, T_PLUS_EQUAL,T_MINUS_EQUAL,T_MUL_EQUAL,T_DIV_EQUAL,T_CONCAT_EQUAL,T_MOD_EQUAL,T_AND_EQUAL,T_OR_EQUAL,T_XOR_EQUAL,T_SL_EQUAL,T_SR_EQUAL;
precedence left T_QUESTION_MARK,T_SEMICOLON;
precedence left T_BOOLEAN_OR;
precedence left T_BOOLEAN_AND;
precedence left T_OR;
precedence left T_KOVA;
precedence left T_REFERENCE;

precedence nonassoc T_IS_EQUAL,T_IS_NOT_EQUAL,T_IS_IDENTICAL,T_IS_NOT_IDENTICAL;
precedence nonassoc T_RGREATER,T_IS_SMALLER_OR_EQUAL,T_LGREATER,T_IS_GREATER_OR_EQUAL;
precedence left T_SL,T_SR;
precedence left T_PLUS,T_MINUS,T_NEKUDA;
precedence left T_TIMES,T_DIV,T_PRECENT;
precedence right T_NOT,T_TILDA,T_INC,T_DEC,T_INT_CAST,T_DOUBLE_CAST,T_STRING_CAST,T_ARRAY_CAST,T_OBJECT_CAST,T_BOOL_CAST,T_UNSET_CAST,T_AT;
precedence right T_OPEN_RECT;
precedence nonassoc T_NEW;
precedence left T_ELSEIF;
precedence left T_ELSE;
precedence left T_ENDIF;
precedence right T_STATIC;

thestart ::=
top_statement_list:statementList
{:
	PHPModuleDeclaration program = parser.getModuleDeclaration();
	
	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment)c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
	}
	
	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program; 
:}
;

top_statement_list ::=
top_statement_list:statementList top_statement:statement
{:
	if(statement != null) {
		parser.addStatement(statement);
		if(parser.pendingStatement != null){
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while(!parser.declarations.isEmpty() ) {
		parser.getModuleDeclaration().addStatement(parser.declarations.pop());
	}
:}

| /* empty */
;

top_statement ::=
statement:statement
{: 
	RESULT = statement; 
:}

| declaration_statement:statement
{:
	RESULT = statement;
:}
;

inner_statement_list ::=
inner_statement_list:statementList inner_statement:statement
{:
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}		
	RESULT = statementList;
:}

| /* empty */
{: 
	RESULT = new LinkedList(); 
:}
;

inner_statement ::=
statement:statement
{: 
	RESULT = statement; 
:}

| declaration_statement:statement
{:
	RESULT = statement;
:}
;

statement ::=
unticked_statement:statement
{: 
	RESULT = statement; 
:}
| T_VAR_COMMENT
| error:theError /* error statement */
{:
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	
:}
;

unticked_statement ::=
T_CURLY_OPEN:token
{:
	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);
	
:}
inner_statement_list:statementList T_CURLY_CLOSE:end
{:
	Block block = (Block)parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	
	RESULT = block;
:}

| T_IF:token T_OPEN_PARENTHESE expr:condition T_CLOSE_PARENTHESE statement:iftrue elseif_list:elseif else_single:iffalse
{:
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;
:}

| T_IF:token T_OPEN_PARENTHESE expr:condition T_CLOSE_PARENTHESE T_NEKUDOTAIM:colon inner_statement_list:ifTrueStatementList new_elseif_list:elseif new_else_single:iffalse T_ENDIF T_SEMICOLON:end
{:
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;
:}

| T_WHILE:token T_OPEN_PARENTHESE expr:expr T_CLOSE_PARENTHESE while_statement:statement
{:
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;
:}

| T_DO:token statement:statement T_WHILE T_OPEN_PARENTHESE expr:expr T_CLOSE_PARENTHESE T_SEMICOLON:end
{:
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;
:}

| T_FOR:token T_OPEN_PARENTHESE for_expr:initializations T_SEMICOLON for_expr:conditions T_SEMICOLON for_expr:increasements T_CLOSE_PARENTHESE for_statement:statement
{:		
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;
:}

| T_SWITCH:token T_OPEN_PARENTHESE expr:expr T_CLOSE_PARENTHESE switch_case_list:caseBlock
{:
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;
:}

| T_BREAK:token T_SEMICOLON:end
{: 
	RESULT = new BreakStatement(tokenleft, endright); 
:}

| T_BREAK:token expr:expr T_SEMICOLON:end
{: 
	RESULT = new BreakStatement(tokenleft, endright, expr); 
:}

| T_CONTINUE:token T_SEMICOLON:end
{: 
	RESULT = new ContinueStatement(tokenleft, endright); 
:}

| T_CONTINUE:token expr:expr T_SEMICOLON:end
{: 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 
:}

| T_RETURN:token T_SEMICOLON:end
{: 
	RESULT = new ReturnStatement(tokenleft, endright); 
:}

| T_RETURN:token expr_without_variable:expr T_SEMICOLON:end
{: 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 
:}

| T_RETURN:token cvar:expr T_SEMICOLON:end
{: 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 
:}

| T_GLOBAL:start global_var_list:list T_SEMICOLON:end
{:
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;
:}

| T_STATIC:start static_var_list:list T_SEMICOLON:end
{:
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;
:}

| T_ECHO:start echo_expr_list:exprList T_SEMICOLON:end
{: 
	RESULT = new EchoStatement(startleft, endright, exprList); 
:}

| T_INLINE_HTML

| expr:expr T_SEMICOLON:end
{: 
	ExpressionStatement eval = new ExpressionStatement(exprleft, endright, expr);
	RESULT = eval;
:}

| T_USE:start use_filename:expr T_SEMICOLON:end
{:
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
    list.addNode(expr);
    SimpleReference functionName = new SimpleReference(startleft, startright, "use");
    PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
    ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
    RESULT = expressionStatement;
:}

| T_UNSET:start T_OPEN_PARENTHESE:openPar unset_variables:list T_CLOSE_PARENTHESE:closePar T_SEMICOLON:end
{:
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
    PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
    ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
    RESULT = expressionStatement;
:}

| T_FOREACH:token T_OPEN_PARENTHESE w_cvar:expr T_AS w_cvar:var foreach_optional_arg:arg T_CLOSE_PARENTHESE foreach_statement:statement
{:
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;
:}

| T_FOREACH:token T_OPEN_PARENTHESE expr_without_variable:expr T_AS w_cvar:var foreach_optional_arg:arg T_CLOSE_PARENTHESE foreach_statement:statement
{:
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;
:}

| T_DECLARE:start T_OPEN_PARENTHESE declare_list:lists T_CLOSE_PARENTHESE declare_statement:statement
{:
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;
:}

| T_SEMICOLON:token /* empty statement */
{: 
	RESULT = new EmptyStatement(tokenleft, tokenright); 
:}

;

unset_variables ::=
unset_variable:var
{:
	PHPCallArgumentsList list = new PHPCallArgumentsList();
    list.addNode(var);
	RESULT = list;
:}

| unset_variables:list T_COMMA unset_variable:var
{:
	list.addNode(var);
	RESULT = list;
:}
;

unset_variable ::=
cvar:var
{:
	RESULT = var;
:}
;

use_filename ::=
T_CONSTANT_ENCAPSED_STRING:scalar
{:
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;
:}

| T_OPEN_PARENTHESE:start T_CONSTANT_ENCAPSED_STRING:scalar T_CLOSE_PARENTHESE:end
{:
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;
:}
;

declaration_statement ::=
unticked_declaration_statement:statement
{:
	RESULT = statement;
:}
;

unticked_declaration_statement ::=
T_FUNCTION:start is_reference:isReference string_st:functionName
{:
	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright,functionNameright,null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);
:}
T_OPEN_PARENTHESE parameter_list:paramList T_CLOSE_PARENTHESE:closeParenthese
{:
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);
:}
function_body:body
{:
RESULT = body;
:}

| unticked_class_declaration_statement:statement
{:
RESULT = statement;
:}
;

unticked_class_declaration_statement ::=
T_CLASS:modifier T_STRING:className
{:
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,classNameright, classNameleft, classNameright, 0, className, null, null, new Block(classNameright,classNameright,null), modifier);
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);
:}
errorOrNot
T_CURLY_OPEN:blockStart class_statement_list:statementList class_closure:blockEnd
{:
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;
:}
| T_CLASS:modifier T_STRING:className
{:
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,classNameright, classNameleft, classNameright, 0, className, null, null, new Block(classNameright,classNameright,null), modifier);
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);
:}
extends_from:superClass errorOrNot
{:
	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.peek();
	if (superClass != null) {
		classDeclaration.setSuperClass(superClass);
	}
	classDeclaration.setEnd(superClassright);
	classDeclaration.getBody().setStart(superClassright);
	classDeclaration.getBody().setEnd(superClassright);
:}
T_CURLY_OPEN:blockStart class_statement_list:statementList class_closure:blockEnd
{:
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;
:}
;

extends_from ::=
T_EXTENDS T_STRING:className
{:
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;
:}
| T_EXTENDS error:theError /* error recovery */
{:
	parser.reportError(new ASTError(theErrorleft, theErrorright));
:}
;
errorOrNot ::=
error
|
;

class_closure ::=
T_CURLY_CLOSE
|
unticked_statement:statement /* error recovery */
{: 
	RESULT = statement;
:}
|unticked_class_declaration_statement:statement /* error recovery */ 
{: 
	RESULT = statement;
:} 
;

function_body ::=
T_CURLY_OPEN:blockStart inner_statement_list:statementList T_CURLY_CLOSE:blockEnd
{:
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;
:}
| error:theError
{:
	RESULT = (PHPMethodDeclaration)parser.declarations.pop();
:}
;

foreach_optional_arg ::=
/* empty */
{: 
	RESULT = null;
:}

|	T_DOUBLE_ARROW w_cvar:var
{: 
	RESULT = var;
:}
;

for_statement ::=
statement:statement
{:
	RESULT = statement;
:}

| T_NEKUDOTAIM:start inner_statement_list:statementList T_ENDFOR T_SEMICOLON
{:
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;
:}
;

foreach_statement ::=
statement:statement
{:
	RESULT = statement;
:}

| T_NEKUDOTAIM:start inner_statement_list:statementList T_ENDFOREACH T_SEMICOLON
{:
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;
:}
;

declare_statement ::=
statement:statement
{:
	RESULT = statement;
:}

| T_NEKUDOTAIM:start inner_statement_list:statementList T_ENDDECLARE T_SEMICOLON
{:
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;
:}
;

// this rule returns a pair of keys and values of directives to the declare statement
declare_list ::=
string_st:key T_EQUAL static_scalar:value
{:
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;
:}

| declare_list:lists T_COMMA string_st:key T_EQUAL static_scalar:value
{:
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;
:}
;

switch_case_list ::=
T_CURLY_OPEN:start case_list:caseList T_CURLY_CLOSE:end
{:
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 
:}

| T_CURLY_OPEN:start T_SEMICOLON case_list:caseList T_CURLY_CLOSE:end
{:
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 
:}

| T_NEKUDOTAIM:start case_list:caseList T_ENDSWITCH T_SEMICOLON:end
{:
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 
:}

| T_NEKUDOTAIM:start T_SEMICOLON case_list:caseList T_ENDSWITCH T_SEMICOLON:end
{:
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 
:}
;

case_list ::=
/* empty */
{:
	RESULT = new LinkedList(); // of SwitchCase
:}

| case_list:caseList T_CASE:token expr:expr case_separator inner_statement_list:statements
{:
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;
:}

| case_list:caseList T_DEFAULT:token case_separator inner_statement_list:statements
{:
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;
:}
;

/* Note: we don't capture seperator type */
case_separator ::=
T_NEKUDOTAIM
| T_SEMICOLON
;

while_statement ::=
statement:statement
{:
	RESULT = statement;
:}

| T_NEKUDOTAIM:colon inner_statement_list:statementList T_ENDWHILE T_SEMICOLON
{:
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;
:}
;

elseif_list ::=
/* empty */
{:
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;
:}

| elseif_list:elseifList T_ELSEIF:token T_OPEN_PARENTHESE expr:condition T_CLOSE_PARENTHESE statement:iftrue
{:	
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;
:}
;

new_elseif_list ::=
/* empty */
{:
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;
:}

| new_elseif_list:elseifList T_ELSEIF:token T_OPEN_PARENTHESE expr:condition T_CLOSE_PARENTHESE T_NEKUDOTAIM:colon inner_statement_list:statementList
{:	
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;
:}
;

else_single ::=
/* empty */
{:
	RESULT = null;
:}

| T_ELSE statement:statement
{:
	RESULT = statement;
:}
;

new_else_single ::=
/* empty */
{:
	RESULT = null;
:}

| T_ELSE T_NEKUDOTAIM:colon inner_statement_list:statementList
{:
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;
:}
;

parameter_list ::=
non_empty_parameter_list:list
{:
	RESULT = list;
:}

| /* empty */
{:
	List list = new LinkedList();
	RESULT = list;
:}
;

non_empty_parameter_list ::=
parameter:parameter
{:
	List list = new LinkedList();
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;
:}

| non_empty_parameter_list:list T_COMMA parameter:parameter
{:
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;
:}
| non_empty_parameter_list:list T_COMMA:comma /* error recovery */
{:
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;
:}
;

parameter ::=
T_VARIABLE:var
{:
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
    FormalParameter parameter = new FormalParameter(varleft, varright, null, v);
	RESULT = parameter;	
:}

| T_REFERENCE:ref T_VARIABLE:var
{:
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
    FormalParameter parameter = new FormalParameterByReference(varleft, varright, null, v);
	RESULT = parameter;	
:}

| T_VARIABLE:var T_EQUAL static_scalar:scalar
{:
    VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
    FormalParameter parameter = new FormalParameter(varleft, scalarright, null, v, scalar);
    RESULT = parameter;
:}

| T_CONST:start T_VARIABLE:var
{:
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(startleft, varright, null, v, true);
	RESULT = parameter;	
:}
| error:theError
{:
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;	
:}
;

function_call_parameter_list ::=
non_empty_function_call_parameter_list:paramsList
{:
	RESULT = paramsList;
:}

| /* empty */
{:
    PHPCallArgumentsList list = new PHPCallArgumentsList();
    RESULT = list;
:}
;

non_empty_function_call_parameter_list ::=
expr_without_variable:var
{:
    PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
    paramsList.addNode(var);
	RESULT = paramsList;
:}

| cvar:var
{:
    PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
    paramsList.addNode(var);
    RESULT = paramsList;
:}

| T_REFERENCE:start w_cvar:var
{:
    PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
    Expression var_ref = new ReferenceExpression(startleft, varright, var);
    paramsList.addNode(var_ref);
    RESULT = paramsList;
:}

| non_empty_function_call_parameter_list:paramsList T_COMMA expr_without_variable:var
{:
	paramsList.addNode(var);	
	RESULT = paramsList;
:}

| non_empty_function_call_parameter_list:paramsList T_COMMA cvar:var
{:
	paramsList.addNode(var);	
	RESULT = paramsList;
:}

| non_empty_function_call_parameter_list:paramsList T_COMMA T_REFERENCE:start w_cvar:var
{:
    Expression var_ref = new ReferenceExpression(startleft, varright, var);
    paramsList.addNode(var_ref);
    RESULT = paramsList;
:}
;

global_var_list ::=
global_var_list:list T_COMMA global_var:var
{:
	list.add(var);
	RESULT = list;
:}

| global_var:var 
{:
	List list = new LinkedList();
	list.add(var);
	RESULT = list;
:}
;

global_var ::=
T_VARIABLE:var
{:
    VariableReference variable = new VariableReference(varleft, varright, var);
    RESULT = variable;
:}
| T_DOLLAR:start r_cvar:var
{:
    ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
    RESULT = ref;
:}

| T_DOLLAR:start T_CURLY_OPEN expr:varName T_CURLY_CLOSE:end
{:
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
    RESULT = var;
:}
;

static_var_list ::=
static_var_list:list T_COMMA T_VARIABLE:var
{:
	VariableReference v = new VariableReference(varleft, varright, var);
    list.add(v);
    RESULT = list;
:}

| static_var_list:list T_COMMA T_VARIABLE:var T_EQUAL static_scalar:expr
{:
	VariableReference v = new VariableReference(varleft, varright, var);
    Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
    list.add(assignment);
    RESULT = list;
:}

| T_VARIABLE:var
{:
	VariableReference v = new VariableReference(varleft, varright, var);
    List list = new LinkedList();
    list.add(v);
    RESULT = list;
:}

| T_VARIABLE:var T_EQUAL static_scalar:expr
{:
	VariableReference v = new VariableReference(varleft, varright, var);
    Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
    List list = new LinkedList();
    list.add(assignment);
    RESULT = list;
:}
;

class_statement_list ::=
class_statement_list:list class_statement:classStatement
{:
	if(!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}
:}

| /* empty */
;

class_statement ::=
T_VAR:modifier class_variable_declaration:decList T_SEMICOLON
{:
    Iterator i = decList.iterator();
    while (i.hasNext()) {
        ASTNode[] decl = (ASTNode[]) i.next();
        VariableReference variable = (VariableReference)decl[0];
        Expression initializer = (Expression)decl[1];
        int start = variable.sourceStart();
        int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, 0, modifierleft, modifier));		
    }
:}
| T_FUNCTION:start is_reference:isReference string_st:functionName
{:
	PHPDocBlock docBlock = start;
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);
:} 
T_OPEN_PARENTHESE parameter_list:paramList T_CLOSE_PARENTHESE:closeParenthese
{:
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);
:}
method_body:body
{:
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());
:}
/* old_function support was removed */
| T_VAR_COMMENT
| error:theError /* error statement */
{:
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);
:}
;

method_body ::=
T_CURLY_OPEN:start inner_statement_list:statementList T_CURLY_CLOSE:end
{:
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;
:}
| /* error handeling */
{:
	parser.reportError();
	RESULT = new ASTError(0,0);
:}
;
is_reference ::=
/* empty */
{:
	RESULT = Boolean.FALSE;
:}

| T_REFERENCE
{:
	RESULT = Boolean.TRUE;
:}
;

class_variable_declaration ::=
class_variable_declaration:list T_COMMA T_VARIABLE:var
{:
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, null});
    RESULT = list;
:}

| class_variable_declaration:list T_COMMA T_VARIABLE:var T_EQUAL static_scalar:expr
{:
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, expr});
    RESULT = list;
:}

| T_VARIABLE:var
{:
    List list = new LinkedList();
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, null});
    RESULT = list;
:}

| T_VARIABLE:var T_EQUAL static_scalar:expr
{:
    List list = new LinkedList();
    VariableReference varId = new VariableReference(varleft, varright, var);
    list.add(new ASTNode[] {varId, expr});
    RESULT = list;
:}
;

echo_expr_list ::=
echo_expr_list:exprList T_COMMA expr:expr 
{:
	exprList.add(expr);
	RESULT = exprList;
:}
| expr:expr
{:
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;
:}
;

for_expr ::=
/* empty */
{:
	RESULT = new LinkedList();
:}

| non_empty_for_expr:exprList
{:
	RESULT = exprList;
:}	
;

non_empty_for_expr ::=
non_empty_for_expr:exprList T_COMMA expr:expr
{:
	exprList.add(expr);
	RESULT = exprList;
:}

| expr:expr
{:
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;
:}
;

expr_without_variable ::=
T_LIST:start T_OPEN_PARENTHESE assignment_list:varList T_CLOSE_PARENTHESE:close T_EQUAL expr:expr
{:
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 
:}

| cvar:var T_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr); 
:}

| cvar:var T_EQUAL T_REFERENCE:reftoken w_cvar:refvar
{: 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);
:}

| cvar:var T_EQUAL T_REFERENCE:reftoken function_call:refvar
{: 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);
:}

| cvar:var T_EQUAL T_REFERENCE:reftoken T_NEW:start static_or_variable_string:className ctor_arguments:ctor
{:
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation;
	if (className.getClass().equals(SimpleReference.class)) {
		TypeReference classReference = new TypeReference(classNameleft, classNameright, ((SimpleReference)className).getName());
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, classReference, ctor);
	} else {
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	}
    Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
    RESULT = assignment;
:} 

| T_NEW:start static_or_variable_string:className ctor_arguments:ctor
{:
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation;
	if (className.getClass().equals(SimpleReference.class)) {
		TypeReference classReference = new TypeReference(classNameleft, classNameright, ((SimpleReference)className).getName());
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, classReference, ctor);
	} else {
		classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	}
	RESULT = classInstanceCreation;
:}

| cvar:var T_PLUS_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 
:}

| cvar:var T_MINUS_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 
:}

| cvar:var T_MUL_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 
:}

| cvar:var T_DIV_EQUAL expr:expr
{: 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 
:}

| cvar:var T_CONCAT_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 
:}

| cvar:var T_MOD_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 
:}

| cvar:var T_AND_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 
:}

| cvar:var T_OR_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 
:}

| cvar:var T_XOR_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 
:}

| cvar:var T_SL_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 
:}

| cvar:var T_SR_EQUAL expr:expr
{: 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 
:}

| rw_cvar:var T_INC:token
{: 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 
:} 

| T_INC:token rw_cvar:var
{: 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 
:}
 
| rw_cvar:var T_DEC:token
{: 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 
:}
  
| T_DEC:token rw_cvar:var
{: 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 
:} 

| expr:expr1 T_BOOLEAN_OR expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 
:}

| expr:expr1 T_BOOLEAN_AND expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 
:}

| expr:expr1 T_LOGICAL_OR expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 
:}

| expr:expr1 T_LOGICAL_AND expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 
:}

| expr:expr1 T_LOGICAL_XOR expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);
:}

| expr:expr1 T_OR expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 
:}

| expr:expr1 T_REFERENCE expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 
:}

| expr:expr1 T_KOVA expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 
:}

| expr:expr1 T_NEKUDA expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 
:}

| expr:expr1 T_PLUS expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 
:}

| expr:expr1 T_MINUS expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 
:}

| expr:expr1 T_TIMES expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 
:}

| expr:expr1 T_DIV expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 
:}

| expr:expr1 T_PRECENT expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 
:}

| expr:expr1 T_SL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 
:}

| expr:expr1 T_SR expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 
:}

| T_PLUS:token expr:expr
{: 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 
:}

| T_MINUS:token expr:expr
{: 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 
:}

| T_NOT:token expr:expr
{: 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 
:}

| T_TILDA:token expr:expr
{: 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 
:}

| expr:expr1 T_IS_IDENTICAL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 
:}

| expr:expr1 T_IS_NOT_IDENTICAL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 
:}

| expr:expr1 T_IS_EQUAL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 
:}

| expr:expr1 T_IS_NOT_EQUAL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 
:}

| expr:expr1 T_RGREATER expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 
:}

| expr:expr1 T_IS_SMALLER_OR_EQUAL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 
:}

| expr:expr1 T_LGREATER expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 
:}

| expr:expr1 T_IS_GREATER_OR_EQUAL expr:expr2
{: 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 
:}

| T_OPEN_PARENTHESE:start expr:expr T_CLOSE_PARENTHESE:end
{:
	RESULT = expr;
:}

| expr:condition T_QUESTION_MARK expr:ifTrue T_NEKUDOTAIM expr:ifFalse
{: 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 
:}

| function_call:call
{: 
        RESULT = call;
:}

| internal_functions_in_yacc:expr
{:
	RESULT = expr;
:}

| T_INT_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 
:}

| T_DOUBLE_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 
:}

| T_STRING_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 
:}

| T_ARRAY_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 
:}

| T_OBJECT_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 
:}

| T_BOOL_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 
:}

| T_UNSET_CAST:token expr:expr
{: 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 
:}

| T_EXIT:start exit_expr:expr 
{:
	PHPCallArgumentsList list = new PHPCallArgumentsList();
    if (expr != null) {
        list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
    }
    SimpleReference functionName = new SimpleReference(startleft, startright, start);
    PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
    RESULT = result;
:}

| T_AT:start expr:expr 
{:
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;
:}

| scalar:scalar
{: 
	RESULT = scalar; 
:}

| T_ARRAY:start T_OPEN_PARENTHESE array_pair_list:list T_CLOSE_PARENTHESE:end
{:
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;
:}

| T_BACKQUATE:start encaps_list:list T_BACKQUATE:end
{:
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;
:}

| T_PRINT:start expr:expr
{:
	PHPCallArgumentsList expList = new PHPCallArgumentsList();
	if (expr != null) {
		expList.addNode(expr);
		expList.setStart(expr.sourceStart());
		expList.setEnd(expr.sourceEnd());
	} else {
		expList.setStart(startright);
		expList.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, expList);
	RESULT = result;
:}
;

function_call ::=
string_st:functionName T_OPEN_PARENTHESE:start function_call_parameter_list:parameters T_CLOSE_PARENTHESE:end
{: 
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters); 
:}

| cvar:functionName T_OPEN_PARENTHESE:start function_call_parameter_list:parameters T_CLOSE_PARENTHESE:end
{:
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression result;
	if (functionName.getKind() == ASTNodeKinds.FIELD_ACCESS) {
		FieldAccess fieldAccess = (FieldAccess) functionName;
		Expression fieldName = fieldAccess.getField();
		Expression functionInvocation;
		if (fieldName.getClass().equals(SimpleReference.class)) {
			functionInvocation = new PHPCallExpression(fieldName.sourceStart(), endright, null, (SimpleReference)fieldName, parameters);
		} else {
			functionInvocation = new ReflectionCallExpression(fieldName.sourceStart(), endright, null, fieldName, parameters);
		}
		result = parser.createDispatch(fieldAccess.getDispatcher(), functionInvocation);
	} else {
		result = new ReflectionCallExpression(functionNameleft, endright, null, functionName, parameters);
	} 
	RESULT = result;
:}

| string_st:className T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string:functionName T_OPEN_PARENTHESE:start function_call_parameter_list:parameters T_CLOSE_PARENTHESE:end
{:
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	Expression result = null;
	
	if (functionName.getKind() == ASTNodeKinds.FIELD_ACCESS) {
		FieldAccess fieldAccess = (FieldAccess) functionName;
		Expression dispatcher = parser.constructStaticMember(classReference, fieldAccess.getDispatcher());
		Expression fieldName = fieldAccess.getField();
		
		Expression functionInvocation;
		if (fieldName.getClass().equals(SimpleReference.class)) {
			functionInvocation = new PHPCallExpression(fieldName.sourceStart(), endright, null, (SimpleReference)fieldName, parameters);
		} else {
			functionInvocation = new ReflectionCallExpression(fieldName.sourceStart(), endright, null, fieldName, parameters);
		}
		result = parser.createDispatch(dispatcher, functionInvocation);
	}
	else if (functionName.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
		ReflectionCallExpression methodInvocation = (ReflectionCallExpression) functionName;
		ReflectionCallExpression functionInvocation = new ReflectionCallExpression(methodInvocation.getName().sourceStart(), endright, null, methodInvocation.getName(), parameters); 
		Expression dispatcher = parser.constructStaticMember(classReference, methodInvocation.getReceiver());
		result = parser.createDispatch(dispatcher, functionInvocation);
	}
	else if (functionName.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
		PHPCallExpression methodInvocation = (PHPCallExpression) functionName;
		PHPCallExpression functionInvocation = new PHPCallExpression(methodInvocation.getCallName().sourceStart(), endright, null, methodInvocation.getName(), parameters); 
		Expression dispatcher = parser.constructStaticMember(classReference, (Expression)methodInvocation.getReceiver());
		result = parser.createDispatch(dispatcher, functionInvocation);
	}	
	else {
		if (functionName.getClass().equals(SimpleReference.class)) {
			result = new StaticMethodInvocation(classNameleft, endright, classReference, (SimpleReference)functionName, parameters); 
		} else {
			result = new ReflectionStaticMethodInvocation(classNameleft, endright, classReference, functionName, parameters);
		}  
	}
	
	RESULT = result;
:}
;

static_or_variable_string ::=
T_STRING:className
{: 
	SimpleReference cname = new SimpleReference(classNameleft, classNameright, className);
	RESULT = cname;
:}

| r_cvar:var
{: 
	RESULT = var; 
:}
;

exit_expr ::=
/* empty */
{:
	RESULT = null;
:}

| T_OPEN_PARENTHESE T_CLOSE_PARENTHESE
{:
	RESULT = null;
:}

| T_OPEN_PARENTHESE expr:expr T_CLOSE_PARENTHESE
{:
	RESULT = expr;	
:}
;

ctor_arguments ::=
/* empty */
{:
	RESULT = new PHPCallArgumentsList();
:}

| T_OPEN_PARENTHESE:start function_call_parameter_list:paramsList T_CLOSE_PARENTHESE:end
{:
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;
:}
;

common_scalar ::=
T_LNUMBER:scalar
{:
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;
:}

| T_DNUMBER:scalar
{: 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;
:}

| T_CONSTANT_ENCAPSED_STRING:scalar
{: 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;
:}

| T_LINE:scalar
{:
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;
:}

| T_FILE:scalar
{:
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;
:}

| T_CLASS_C:scalar
{:
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;
:}

| T_FUNC_C:scalar
{:
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;
:}
;

static_scalar ::=  /* compile-time evaluated scalars */
common_scalar:scalar
{:
	RESULT = scalar;
:}

| string_st:str
{:
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	
:}

| T_PLUS:start static_scalar:expr
{:
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	
:}

| T_MINUS:start static_scalar:expr
{:
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	
:}

| T_ARRAY:start T_OPEN_PARENTHESE static_array_pair_list:list T_CLOSE_PARENTHESE:end
{:
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	
:}
;

scalar ::=
string_st:scalar
{: 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;
:}

| T_STRING_VARNAME:scalar
{:
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;
:}

| common_scalar:scalar
{:
	RESULT = scalar;
:}

| T_QUATE:start encaps_list:list T_QUATE:end
{:
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;
:}

| T_SINGLE_QUATE:start encaps_list:list T_SINGLE_QUATE:end
{:
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;
:}

| T_START_HEREDOC:start encaps_list:list T_END_HEREDOC:end
{:
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;
:}
;

static_array_pair_list ::=
/* empty */
{:
	List list = new LinkedList();
	RESULT = list;
:}

| non_empty_static_array_pair_list:list possible_comma
{:
	RESULT = list;
:}
;

/* do nothing */
possible_comma ::=
/* empty */
| T_COMMA
;

non_empty_static_array_pair_list ::=
non_empty_static_array_pair_list:list T_COMMA static_scalar:key T_DOUBLE_ARROW static_scalar:value
{:
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;
:}

| non_empty_static_array_pair_list:list T_COMMA static_scalar:value
{:
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;
:}

| static_scalar:key T_DOUBLE_ARROW static_scalar:value
{:
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;
:}

| static_scalar:value
{:
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;
:}
;

expr ::=
r_cvar:var
{: RESULT = var; :}

| expr_without_variable:ewv
{: RESULT = ewv; :}
;

r_cvar ::=
cvar:var
{: RESULT = var; :}
;

w_cvar ::=
cvar:var
{: RESULT = var; :}
;

rw_cvar ::=
cvar:var
{: RESULT = var; :}
;

cvar ::=
cvar_without_objects:var 
{: 
	RESULT = var; 
:}

| cvar_without_objects:var T_OBJECT_OPERATOR ref_list:propertyList
{:
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	Iterator listIt = propertyList.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;
:}
;

cvar_without_objects ::=
reference_variable:var 
{: 
	RESULT = var; 
:}

| simple_indirect_reference:ref_count reference_variable:var
{:
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
    // accomulate the dolars into reflection variables
    Expression finalVar = var;
    for (int i=0; i<ref_count.intValue(); i++) {
        finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
    }
    RESULT = finalVar;
:}
;

reference_variable ::=
reference_variable:varName T_OPEN_RECT dim_offset:index T_CLOSE_RECT:end
{:
	Expression var;
    if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
    } else {
        var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
    }
    RESULT = var;
:}

| reference_variable:varName T_CURLY_OPEN expr:index T_CURLY_CLOSE:end
{:
	Expression var;
    if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
    } else {
        var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
    }
    RESULT = var;
:}

| compound_variable:comp_var
{: RESULT = comp_var; :}
;

compound_variable ::=
tracked_variable:var
{: RESULT = var; :}

| T_DOLLAR:start T_CURLY_OPEN expr:expr T_CURLY_CLOSE:end
{:
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
    RESULT = var;
:}	
;

dim_offset ::=
/* empty */
{: 
	RESULT = null;
:}

| expr:expr 
{: 
	RESULT = expr; 
:}
;

ref_list ::=
object_property:property
{: 
	List list = new LinkedList();
	list.add(property); 
	RESULT = list;
:}
| ref_list:list T_OBJECT_OPERATOR object_property:property
{: 
	list.add(property); 
	RESULT = list;
:}
;

object_property ::=
object_dim_list:var
{: 
    RESULT = var; 
:}

| cvar_without_objects:var
{: 
    RESULT = var; 
:}
;

object_dim_list ::=
object_dim_list:var T_OPEN_RECT dim_offset:index T_CLOSE_RECT:end
{:
	Expression varArray;
    if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
    } else {
        varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
    }
    RESULT = varArray;

:}

| object_dim_list:var T_CURLY_OPEN expr:index T_CURLY_CLOSE:end
{:
	Expression varArray;
    if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { //VariableReference  - $a
        varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
    } else {
        varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
    }
    RESULT = varArray;
:}

| variable_name:var
{: RESULT = var; :}
;

variable_name ::=
string_st:varName
{:
	RESULT = new SimpleReference(varNameleft, varNameright, varName);
:}

| T_CURLY_OPEN:start expr:expr T_CURLY_CLOSE:end
{:
	RESULT = new ReflectionVariableReference(startleft, endright, expr);
:}
;

simple_indirect_reference ::=
T_DOLLAR
{:
	RESULT = Integer.valueOf(1);
:}

| simple_indirect_reference:ref T_DOLLAR
{:
	RESULT = Integer.valueOf(1 + ref.intValue());
:}
;

assignment_list ::=
assignment_list:listElements T_COMMA assignment_list_element:element
{:
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;
:}

| assignment_list_element:var
{:
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;
:}
;

assignment_list_element ::=
cvar:var
{:
	RESULT = var;
:}

| T_LIST:start T_OPEN_PARENTHESE assignment_list:varList T_CLOSE_PARENTHESE:end
{:
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;
:}

| /* empty */
{:
	RESULT = null;
:}
;

array_pair_list ::=
/* empty */
{:
	List list = new LinkedList();
	RESULT = list;	
:}

| non_empty_array_pair_list:list possible_comma
{:
	RESULT = list;
:}
;

non_empty_array_pair_list ::=
non_empty_array_pair_list:list T_COMMA expr:key T_DOUBLE_ARROW expr:value
{:
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;
:}

| non_empty_array_pair_list:list T_COMMA expr:expr
{:
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;
:}

| expr:key T_DOUBLE_ARROW expr:value
{:
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;
:}

| expr:expr
{:
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;
:}

| non_empty_array_pair_list:list T_COMMA expr:key T_DOUBLE_ARROW T_REFERENCE:start w_cvar:var
{:
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(keyleft, varright, key, value);
    list.add(element);
    RESULT = list;
:}

| non_empty_array_pair_list:list T_COMMA T_REFERENCE:start w_cvar:var
{:
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(startleft, varright, ref);
    list.add(element);
    RESULT = list;
:}

| expr:key T_DOUBLE_ARROW T_REFERENCE:start w_cvar:var
{:
	List list = new LinkedList();
    ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(keyleft, varright, key, value);
    list.add(element);
    RESULT = list;
:}

| T_REFERENCE:start w_cvar:var
{:
	List list = new LinkedList();
    ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
    ArrayElement element = new ArrayElement(startleft, varright, ref);
    list.add(element);
    RESULT = list;
:}
;

encaps_list ::=
encaps_list:list encaps_var:var
{:
	list.add(var);
	RESULT = list;
:}

| encaps_list:list string_st:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_NUM_STRING:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_ENCAPSED_AND_WHITESPACE:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_CHARACTER:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_BAD_CHARACTER:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_OPEN_RECT:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, "[", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_CLOSE_RECT:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, "]", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_CURLY_OPEN:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, "{", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_CURLY_CLOSE:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, "}", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| encaps_list:list T_OBJECT_OPERATOR:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, "->", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;
:}

| /* empty */
{:
	RESULT = new LinkedList();
:}
;

encaps_var ::=
tracked_variable:var
{:
	RESULT = var;
:}

| tracked_variable:varName T_OPEN_RECT encaps_var_offset:index T_CLOSE_RECT:end
{:
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
    RESULT = var;
:}

| tracked_variable:var T_OBJECT_OPERATOR string_st:string
{:
	VariableReference property = new VariableReference(stringleft, stringright, string);
    Expression dispatch = parser.createDispatch(var, property);
    RESULT = dispatch;
:}

| T_DOLLAR_OPEN_CURLY_BRACES:start expr:expr T_CURLY_CLOSE:end
{:
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
    RESULT = var;
:}	

| T_DOLLAR_OPEN_CURLY_BRACES:start T_STRING_VARNAME:varName T_OPEN_RECT expr:index T_CLOSE_RECT T_CURLY_CLOSE:end
{:
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
    RESULT = indexedVar;
:}

| T_CURLY_OPEN cvar:var T_CURLY_CLOSE
{:
	RESULT = var;
:}
;

encaps_var_offset ::=
string_st:string
{:
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;
:}

| T_NUM_STRING:num
{:
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	
:}

| tracked_variable:var
{:
	RESULT = var;
:}
;

internal_functions_in_yacc ::=
T_ISSET:start T_OPEN_PARENTHESE:openPar isset_variables:varList T_CLOSE_PARENTHESE:end
{:
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;
:}

| T_EMPTY:start T_OPEN_PARENTHESE:openPar cvar:var T_CLOSE_PARENTHESE:end
{:
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;
:}

| T_INCLUDE:include expr:expr
{:
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;
:}

| T_INCLUDE_ONCE:include expr:expr
{:
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;
:}

| T_EVAL:start T_OPEN_PARENTHESE:openPar expr:expr T_CLOSE_PARENTHESE:end
{:
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;
:}

| T_REQUIRE:include expr:expr
{:
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;
:}

| T_REQUIRE_ONCE:include expr:expr
{:
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;
:}
;

isset_variables ::=
cvar:var 
{:
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	
:}

| isset_variables:varList T_COMMA cvar:var
{:
	varList.addNode(var);
	RESULT = varList;
:}
;

tracked_variable ::=
T_VARIABLE:varName
{:
	RESULT = new VariableReference(varNameleft, varNameright, varName); 
:}
;

string_st ::=
T_STRING:value
{: RESULT = value; :}

| T_DEFINE:value
{: RESULT = value; :}
;
